using FluentAssertions;
using System;
using System.Threading.Tasks;
using Xle.Data;
using Xle.Maps.Dungeons;
using Xle.Maps.Dungeons.Commands;
using Xunit;

namespace Xle.Commands
{
    public class DungeonOpenTest : XleTest
    {
        private DungeonOpenCommand command;

        public DungeonOpenTest()
        {
            command = new DungeonOpenCommand();

            InitializeCommand(command);

            command.GameControl = Services.GameControl.Object;
            command.SoundMan = Services.SoundMan.Object;
            command.Random = new Random(1);
            command.StatsDisplay = Services.StatsDisplay.Object;
            command.Data = Services.Data;
            command.DungeonAdapter = Services.DungeonAdapter.Object;
        }

        [Fact]
        public async Task DoNothingIfNothingToOpen()
        {
            await command.Execute();

            Services.TextAreaText.Should().Contain("Nothing");
        }

        [Fact]
        public async Task OpenChestTest()
        {
            int gold = Player.Gold;

            Services.DungeonAdapter.Setup(x => x.TileAt(Player.X, Player.Y, -1))
                .Returns(DungeonTile.Chest);
            Services.DungeonAdapter.Setup(x => x.ChestValueAt(Player.X, Player.Y, -1))
                .Returns(0);

            await command.Execute();

            (Player.Gold > gold + 10).Should().BeTrue();
        }

        [Fact]
        public async Task BoxHealingTeset()
        {
            Player.HP = 1;

            Services.DungeonAdapter.Setup(x => x.TileAt(Player.X, Player.Y, -1))
                .Returns(DungeonTile.Box);

            await command.Execute();

            (Player.HP > 50).Should().BeTrue();
        }

        [Fact]
        public async Task UrnHealingTeset()
        {
            Player.HP = 1;

            Services.DungeonAdapter.Setup(x => x.TileAt(Player.X, Player.Y, -1))
                .Returns(DungeonTile.Urn);

            await command.Execute();

            (Player.HP > 50).Should().BeTrue();
        }

        [Fact]
        public async Task NoHealingIfFullHP()
        {
            Player.HP = Player.MaxHP;

            Services.DungeonAdapter.Setup(x => x.TileAt(Player.X, Player.Y, -1))
                .Returns(DungeonTile.Urn);

            await command.Execute();

            Services.TextAreaText.Should().Contain("nothing");
        }

        [Fact]
        public async Task GiveSpecialItem()
        {
            Services.DungeonAdapter.Setup(x => x.TileAt(Player.X, Player.Y, -1))
                .Returns(DungeonTile.Chest);
            Services.DungeonAdapter.Setup(x => x.ChestValueAt(Player.X, Player.Y, -1))
                .Returns(2);
            Services.DungeonAdapter.Setup(x => x.GetTreasure(2, -1))
                .Returns(22);

            Services.Data.ItemList.Add(22, new ItemInfo(22, "Fake", "Fake fake", "do nothing"));

            Player.Items[22].Should().Be(0);

            await command.Execute();

            Player.Items[22].Should().Be(1);
        }
    }
}
