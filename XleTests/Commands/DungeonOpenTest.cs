using ERY.Xle.Data;
using ERY.Xle.Maps.Dungeons;
using ERY.Xle.Maps.Dungeons.Commands;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ERY.XleTests.Commands
{
    [TestClass]
    public class DungeonOpenTest : XleTest
    {
        DungeonOpenCommand command;

        public DungeonOpenTest()
        {
            command = new DungeonOpenCommand();

            InitializeCommand(command);

            command.GameControl = Services.GameControl.Object;
            command.SoundMan = Services.SoundMan.Object;
            command.Random = new Random(1);
            command.StatsDisplay = Services.StatsDisplay.Object;
            command.Data = Services.Data;
            command.DungeonAdapter = Services.DungeonAdapter.Object;
        }

        [TestMethod]
        public void DoNothingIfNothingToOpen()
        {
            command.Execute();

            StringAssert.Contains(Services.TextAreaText, "Nothing");
        }

        [TestMethod]
        public void OpenChestTest()
        {
            int gold = Player.Gold;

            Services.DungeonAdapter.Setup(x => x.TileAt(Player.X, Player.Y, -1))
                .Returns(DungeonTile.Chest);
            Services.DungeonAdapter.Setup(x => x.ChestValueAt(Player.X, Player.Y, -1))
                .Returns(0);

            command.Execute();

            Assert.IsTrue(Player.Gold > gold + 10);
        }

        [TestMethod]
        public void BoxHealingTeset()
        {
            Player.HP = 1;

            Services.DungeonAdapter.Setup(x => x.TileAt(Player.X, Player.Y, -1))
                .Returns(DungeonTile.Box);

            command.Execute();

            Assert.IsTrue(Player.HP > 50);
        }

        [TestMethod]
        public void UrnHealingTeset()
        {
            Player.HP = 1;

            Services.DungeonAdapter.Setup(x => x.TileAt(Player.X, Player.Y, -1))
                .Returns(DungeonTile.Urn);

            command.Execute();

            Assert.IsTrue(Player.HP > 50);
        }

        [TestMethod]
        public void NoHealingIfFullHP()
        {
            Player.HP = Player.MaxHP;

            Services.DungeonAdapter.Setup(x => x.TileAt(Player.X, Player.Y, -1))
                .Returns(DungeonTile.Urn);

            command.Execute();

            StringAssert.Contains(Services.TextAreaText, "nothing");
        }

        [TestMethod]
        public void GiveSpecialItem()
        {
            Services.DungeonAdapter.Setup(x => x.TileAt(Player.X, Player.Y, -1))
                .Returns(DungeonTile.Chest);
            Services.DungeonAdapter.Setup(x => x.ChestValueAt(Player.X, Player.Y, -1))
                .Returns(2);
            Services.DungeonAdapter.Setup(x => x.GetTreasure(2, -1))
                .Returns(22);

            Services.Data.ItemList.Add(22, new ItemInfo(22, "Fake", "Fake fake", "do nothing"));

            Assert.AreEqual(0, Player.Items[22]);

            command.Execute();

            Assert.AreEqual(1, Player.Items[22]);
        }
    }
}
