/*	This file was automatically created by
 *	Reverse Engineering Compiler 1.6a (C) Giampiero Caprino (Dec  8 2002)
 *	Input file: '..\twndr.exe'
 */

/* DEST BLOCK NOT FOUND: 00000136 -> 00000179 */
/*	Procedure: 0x00000118 - 0x00000138
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00000118()
{



    *L0000209E = 0x64;
    goto L00000165;
    *L000020A0 = 0xf;
    (save)0x20a0;
    L00000855();
    *L0000209E = 0x3e7;
    goto L00000179;
}

/* DEST BLOCK NOT FOUND: 0000013f -> 00000165 */
/* DEST BLOCK NOT FOUND: 00000148 -> 00000165 */
/*	Procedure: 0x00000139 - 0x0000014A
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00000139()
{



    *L0000209E = 0x1e;
    goto L00000165;
    *L0000209E = 0x14;
    goto L00000165;
}

stack space not deallocated on return
/*	Procedure: 0x0000014B - 0x00000387
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0000014B()
{



    *L000020A2 = 0x1e;
    *L000020A4 = 0xca;
    return(L00000855(0x20a4, 0x20a2));
    *L000020A6 = 2;
    return(L00000855(0x20a6, 0x209e));
    return(L00000855(0x209e));
    L00005EC4();
    si = 0x1b96;
    bx = 0x44 + *L00001BA0;
    es = *L00001B98;
    *%es:bx] = 1;
    L0000042D();
    L00000855();
    goto L0000034e;
L000001a2:
    *L000020A8 = L00000000();
    ax = *L000020A8;
    *L00001F04 = ax;
    if(*L00001F04 == 0) {
    } else {
        L00000388();
    }
    (save)0x1f24;
    L00000855();
    L00000855();
    if(*L00001E1E == 0) {
    } else {
        *L000020AA = *L00001E1E - 1;
        (save)0x1b00;
        (save)0x1b04;
        (save)0x20aa;
        L00000715();
        if(*L00001F02 <= 0) {
        } else {
            L00000839();
            goto L000002b9;
        }
        bx = 0x1af8;
        L00000855();
        bx = 0x264a;
        L00000855();
        bx = 0x1af8;
        L00000855();
        (save)0x264e;
        si = 0x1d94;
        (save)( *L00001E1E << 1 << 1) + 65532 + *L00001D9E;
        (save)L00000855();
        (save)0x20ac;
        L00000855();
        (save)0x20ac;
        L00000855();
        (save)0x20ac;
        L00000855();
        if(*L000020B0 <= 0) {
        } else {
            *L000020B0 = *L000020B0 + 1;
            if(*L000020B0 <= 0x13) {
            } else {
                L0000046A();
                (save)0x2658;
                (save)0xc;
                (save)L00000855();
                (save)L00000855();
                (save)0x265e;
                (save)L00000855();
                (save)0x20b2;
                L00000855();
                (save)0x20b2;
                L00000855();
                (save)0x20b2;
                L00000855();
                *L00001F2A = 1;
                *L000020B0 = 0;
                *L000020B6 = 0xbb8;
                (save)0x20b6;
                L00000855();
            }
        }
L000002b9:
        L00000855();
        *L000020B8 = 0;
        (save)0x1b00;
        (save)0x1b04;
        (save)0x20b8;
        (save)0x1f2a;
        L00000715();
        if(*L00001F2A <= 0) {
        } else {
            if(*L00002080 <= 0) {
            } else {
                L00000F9F();
            }
        }
        goto L000001a2;
    }
    if(*L00001F24 <= 0) {
    } else {
        *L00001F24 = 0xff;
    }
    if(*L00001E20 >= 0xd) {
    } else {
        bx = *L00001E20 + 1;
        ax = L00000855() | 0x649;
        asm("adc ax,[bx+di]");
        asm("adc ax,[bx+di]");
        asm("adc ax,[bx+di]");
        asm("adc cx,[bx+di]");
        asm("cmc");
        (save)es;
        ax = ax + 1;
        (save)es;
        asm("loop 0x32e");
        *di = *si;
        di = di + 1;
        si = si + 1;
        (restore)es;
        *L00000113 = *L00000113 - cx;
        asm("rol byte [0x5b77],0xe9");
        asm("sbb [bx+si],ax");
    }
    bx = *L00001E20 + -12;
    L00000855();
    (save)es;
    asm("sahf");
    asm("adc [bp+di],dx");
    *(bx + si + 0x135d) = *(bx + si + 0x135d) + bx;
    *bx = *bx + si;
    (save)es;
    asm("adc ax,[bx+di]");
L0000034e:
    *L000020BA = 0;
    (save)0x1b00;
    (save)0x1b04;
    (save)0x20ba;
    (save)0x1f2a;
    L00000715();
    if(*L00001F2A <= 0) {
    } else {
        if(*L00002080 <= 0) {
        } else {
            L00000F9F();
        }
    }
    L00000715();
    goto L000001a2;
}

stack space not deallocated on return
/*	Procedure: 0x00000388 - 0x000003EE
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00000388()
{



    if(*L00001F04 == 2) {
    } else {
        if(*L000020BC != 1) {
        } else {
            return;
        }
        *L000020BC = 1;
        return(L00000000(0x1f2a));
    }
    if(*L000020BC != 0) {
    } else {
        return;
    }
    *L000020BC = 0;
    *L000020BE = 0;
    return(L00000000(0x20be));
    ax = 0xf;
    asm("imul word [0x20bc]");
    *L000020C0 = ax + 0x2d;
    *L000020C2 = 3;
    return(L00000855(0x20c2, 0x20c0));
}

stack space not deallocated on return
/*	Procedure: 0x000003EF - 0x0000042C
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L000003EF()
{



    ax = *L00001AD2;
    dx = *L00001AD4;
    L00000855();
    L00000855();
    *L00001AD2 = L00000855();
    *L00001AD4 = dx;
    ax = 0;
    if(*L00001F2A > 0) {
        eax = -1 & 65535;
    }
    cx = 0x19;
    asm("imul cx");
    *L000020C4 = cx - ax;
    return(L00000855(0x20c4));
}

stack space not deallocated on return
/*	Procedure: 0x0000042D - 0x00000469
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0000042D()
{



    *L000020C6 = 0;
    *L000020C8 = 0;
    (save)0x20c6;
    (save)0x20c8;
    L00000715();
    L00000855();
    L00000855();
    *L000020CA = 2;
    *L000020CC = 0xa33;
    return(L00000855(0x20cc, 0x20ca));
}

/*	Procedure: 0x0000046A - 0x0000048B
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0000046A()
{



    for(ax = 0; 1; ax = *L000020D0 + 1) {
        *L000020D0 = ax;
        if(ax > 3) {
            break;
        }
        *L000020CE = 1;
        L00000855(0x20ce);
    }
}

stack space not deallocated on return
/*	Procedure: 0x0000048C - 0x00000570
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0000048C()
{



    ebx = *L00001E34 & 65535;
    *L000020D2 = *L00001E2C;
    *L000020D4 = 0xcc2;
    *L000020D6 = 0x12c0;
    *L000020D8 = 0xdb;
    (save)0x20d2;
    (save)0x20d4;
    (save)0x20d6;
    (save)0x20d8;
    *L000020DA = L00000855();
    *L00001F02 = *L000020DA;
    (save) *L000020D2;
    L00000855();
    if(*L00001F02 <= 0) {
    } else {
        bx = *L00001F02 + 1;
        es = *L00000101;
        *%es:bx] = 0;
        bx = *L00001F02 + 2;
        es = *L00000101;
        *%es:bx] = 0 & 65535;
    }
    *L000020DC = *L00001F02 + 1;
    *L000020DE = 0xdb;
    (save)0x20d2;
    (save)0x20dc;
    (save)0x20d6;
    (save)0x20de;
    *L000020E0 = L00000855();
    ax = *L000020E0;
    *L00001F02 = ax;
    if(ax <= 0) {
    } else {
        bx = ax + 1;
        es = *L00000101;
        *%es:bx] = 0;
        bx = *L00001F02 + 2;
        es = *L00000101;
        *%es:bx] = 0 & 65535;
    }
    *L000020E2 = 0xce;
    *L000020E4 = 0;
    return(L00000855(0x20e4, 0x20e2, 0x20d6, 0x20d4, 0x20d2));
}

stack space not deallocated on return
/*	Procedure: 0x00000571 - 0x00000592
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00000571()
{



    *L000020E6 = 0;
    *L000020E8 = 0;
    return(L00000715(0x20e8, 0x20e6, 0x1b04, 0x1b00));
}

/*	Procedure: 0x00000593 - 0x00000630
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00000593()
{



    *L000020EA = 2;
    *L000020EC = 0x12;
    *L000020EE = 0xc;
    *L000020F0 = 0x12;
    (save)0x20ea;
    (save)0x20ec;
    (save)0x20ee;
    (save)0x20f0;
    L00000855();
    *L000020F2 = 1;
    *L000020F4 = 0x26;
    *L000020F6 = 0x13;
    *L000020F8 = 0x17;
    (save)0x20f2;
    (save)0x20f4;
    (save)0x20f6;
    (save)0x20f8;
    L00000855();
    L00000855();
    *L000020FA = 2;
    *L000020FC = 0x25;
    *L000020FE = 0x13;
    *L00002100 = 0x17;
    (save)0x20fa;
    (save)0x20fc;
    (save)0x20fe;
    (save)0x2100;
    L00000855();
    *L00002102 = 0;
    (save)0x2102;
    L00000855();
    L000003EF();
}

/* DEST BLOCK NOT FOUND: 000006bd -> 0000042d */
/* DEST BLOCK NOT FOUND: 000006df -> 00000142 */
/* DEST BLOCK NOT FOUND: 000006f2 -> 00000571 */
/* DEST BLOCK NOT FOUND: 000007a1 -> 00000179 */
/* DEST BLOCK NOT FOUND: 00000814 -> 00000872 */
/* DEST BLOCK NOT FOUND: 00000836 -> 00000118 */
/*	Procedure: 0x00000631 - 0x00000838
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00000631()
{



    return(L00000715());
    *L0000209E = 1;
    goto L0000064f;
    *L0000209E = 3;
    goto L0000064f;
    *L0000209E = 2;
L0000064f:
    bx = *L00001E20 << 1 << 1;
    dx = bx;
    (save)bx + *L00001CB8;
    (save)0x2104;
    *(bp - 0xc) = dx;
    L00000855();
    (save)0x2104;
    L00000855();
    (save)0x2104;
    (save) *(bp - 0xc) + *L00001CB8;
    L00000855();
    L00000855();
    L00000855();
    (save)0x266e;
    (save)0x2108;
    L00000855();
    (save)0x2108;
    L00000855();
    (save)0x2108;
    L00000855();
    (save)0x209e;
    L00000855();
    L00000631();
    goto L0000042D;
    (save)0x2680;
    (save)0x210c;
    L00000855();
    (save)0x210c;
    L00000855();
    (save)0x210c;
    L00000855();
    goto L00000142;
    L00000855();
    L00000855();
    L00000593();
    L0000042D();
    goto L00000571;
    (save)0x2688;
    (save)0x2110;
    L00000855();
    (save)0x2110;
    L00000855();
    (save)0x2110;
    L00000855();
    (save)0x26a6;
    (save)0x2114;
    L00000855();
    (save)0x2114;
    L00000855();
    (save)0x2114;
    L00000855();
    L00000855();
    *L00002118 = 0x65;
    *L0000211A = 5;
    *L0000211C = 2;
    *L0000211E = *L00001AC8 - 1;
    (save)0x2118;
    (save)0x211a;
    (save)0x211c;
    (save)0x211e;
    L00000855();
    *L00001AC8 = *L00001E22;
    (save)0x26be;
    (save) *L00001AC8;
    (save)L00000855();
    (save)L00000855();
    (save)0x2120;
    L00000855();
    (save)0x2120;
    L00000855();
    (save)0x2120;
    L00000855();
    *L0000209E = 0x1f4;
    goto L00000179;
    bx = *L00001E20 << 1 << 1;
    dx = bx;
    (save)bx + *L00001CB8;
    (save)0x2124;
    *(bp - 0xc) = dx;
    L00000855();
    (save)0x2124;
    L00000855();
    (save)0x2124;
    (save) *(bp - 0xc) + *L00001CB8;
    L00000855();
    (save)0x1b00;
    (save)0x1b04;
    L00000715();
    ax = 0;
    if(*L00001F02 != 0xd7) {
        eax = -1 & 65535;
    }
    cx = 0;
    if(*L00001F2A == 0) {
        ecx = -1 & 65535;
    }
    cx = cx & ax;
    ax = 0;
    if(*L000020B0 == 0) {
        eax = -1 & 65535;
    }
    if((ax & cx) != 0) {
        goto L00000872;
    }
    (save)0x26d4;
    (save)0x2128;
    L00000855();
    (save)0x2128;
    L00000855();
    (save)0x2128;
    L00000855();
    goto L00000118;
}

/* DEST BLOCK NOT FOUND: 00000a69 -> 00000118 */
/* DEST BLOCK NOT FOUND: 00000aa7 -> 00000118 */
/* DEST BLOCK NOT FOUND: 00000c70 -> 0000014b */
/* DEST BLOCK NOT FOUND: 00000e26 -> 0000014b */
/* DEST BLOCK NOT FOUND: 00000eeb -> 00000118 */
stack space not deallocated on return
/*	Procedure: 0x00000839 - 0x00000F9E
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00000839()
{



    if(*L00001F02 == 3) {
    } else {
        (save)0x26ec;
        (save)0x212c;
        L00000855();
        (save)0x212c;
        L00000855();
        (save)0x212c;
        L00000855();
        *L00002130 = 0x12;
        return(L00000855(0x2130));
    }
    ax = *L00001F22 + 1;
    cx = 0;
    if(*L00001F2A > 0) {
        ecx = -1 & 65535;
    }
    asm("imul cx");
    cx = 65535 - ax;
    bx = 0x3e + *L00001BA0;
    es = *L00001B98;
    *%es:bx] = cx;
    L00000855();
    L00000855();
    (save)0x26fc;
    (save)( *L00001F22 << 1 << 1) + *L00001DFA;
    (save)L00000855();
    (save)0x2132;
    L00000855();
    (save)0x2132;
    L00000855();
    (save)0x2132;
    L00000855();
    (save)0x2708;
    (save)0x2136;
    L00000855();
    (save)0x2136;
    L00000855();
    (save)0x2136;
    L00000855();
    (save)0x2714;
    (save)0x213a;
    L00000855();
    (save)0x213a;
    L00000855();
    (save)0x213a;
    L00000855();
    *L00001AEE = 0;
    (save)0x271c;
    (save)( *L00001AFE << 1 << 1) + *L00001D14;
    (save)L00000855();
    (save)0x213e;
    L00000855();
    (save)0x213e;
    L00000855();
    (save)0x213e;
    L00000855();
L0000094d:
    (save)0x272e;
    (save)0x2142;
    L00000855();
    (save)0x2142;
    L00000855();
    (save)0x2142;
    L00000855();
    *L00002146 = 0;
    (save)0x2146;
    L00000855();
    ax = ( *L00001E1E << 1 << 1) + 65532;
    bx = ax;
    (save)bx + *L00001D9E;
    bx = ax;
    (save)0x2148;
    *(bp - 0xc) = bx;
    L00000855();
    (save)0x2148;
    L00000855();
    (save)0x2148;
    (save) *(bp - 0xc) + *L00001D9E;
    L00000855();
    ax = 0;
    if(*L00001AFE == 6) {
        eax = -1 & 65535;
    }
    cx = 0;
    if(*L00001AFE == 8) {
        ecx = -1 & 65535;
    }
    ax = ax | cx;
    cx = 9;
    asm("imul cx");
    *L00001F16 = ~(ax - 1);
    if(*L00001AEE <= 0) {
    } else {
        *L00001F16 = cx;
    }
    *L0000214C = *L00001E1E - 1;
    (save)0x1b00;
    (save)0x1b04;
    (save)0x214c;
    (save)0x1f16;
    L00000715();
    if(*L00001F02 < 0x40) {
    } else {
        if(*L00001F02 == 0xfd) {
        } else {
            ax = 0;
            if(*L00001F02 == 0xfe) {
                eax = -1 & 65535;
            }
            cx = 0;
            if(*L00001F04 == 0xbf) {
                ecx = -1 & 65535;
            }
            if((cx & ax) == 0) {
            } else {
                (save)0x2744;
                (save)0x214e;
                L00000855();
                (save)0x214e;
                L00000855();
                (save)0x214e;
                L00000855();
                *L00002152 = 0x15;
                (save)0x2152;
                L00000855();
                goto L00000118;
            }
            if(*L00001AEE <= 0) {
            } else {
                *L00002154 = *L00001E22 + 0xd;
                (save)0x2154;
                L00000855();
            }
            (save)0x275c;
            (save)0x2156;
            L00000855();
            (save)0x2156;
            L00000855();
            (save)0x2156;
            L00000855();
            goto L00000118;
        }
        L00000715();
        ax = 0;
        if(*L00001F04 == 0) {
            eax = -1 & 65535;
        }
        cx = 0;
        if(*L00001F2A == 0) {
            ecx = -1 & 65535;
        }
        if((cx & ax) == 0) {
        } else {
            *L000020B0 = 0x12;
        }
        ax = 0;
        if(*L00001F04 == 1) {
            eax = -1 & 65535;
        }
        cx = 0;
        if(*L00001F2A == 0) {
            ecx = -1 & 65535;
        }
        if((cx & ax) == 0) {
        } else {
            *L000020B0 = 1;
        }
        *L0000215A = 6;
        (save)0x215a;
        L00000855();
        (save)0x276c;
        ax = *L00001AC0;
        L00000855();
        (save) *L0000278E;
        (save) *L0000278C;
        *(bp - 0xc) = L00000855();
        L00000855();
        bx = 0x2790;
        L00000855();
        L00000855();
        L00000855();
        sp = sp - 4;
        bx = sp;
        L00000855();
        (save)L00000855();
        (save)L00000855();
        (save)0x215c;
        L00000855();
        (save)0x215c;
        L00000855();
        (save)0x215c;
        L00000855();
        ax = L00000139();
        goto L00000e17;
    }
    if(*L00001AEE != 0) {
    } else {
        ax = *L00001AC0 + 0x10;
        cx = ( *L00001AFE << 1 << 1 << 1) + 0x63;
        asm("imul cx");
        asm("cwd");
        dx = *L00002160 % *L00002160;
        L00000855();
        (save) *L0000278E;
        (save) *L0000278C;
        *(bp - 0xc) = L00000855();
        L00000855();
        bx = 0x2794;
        L00000855();
        L00000855();
        if(!( *L00002160 = *L00002160 / *L00002160)) {
            goto L00000ca4;
        }
        goto L00000c20;
    }
    ax = 0;
    if(*L00001AEE == 1) {
    }
    bx = 0x2798;
    *(bp - 0xc) = ax;
    L00000855();
    ax = *L00001AF0;
    L00000855();
    L00000855();
    bx = 0x279c;
    L00000855();
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0xe) = L00000855();
    L00000855();
    L00000855();
    ax = 0;
    if(!(eax = -1 & 65535)) {
        eax = -1 & 65535;
    }
    if((ax & *(bp - 0xc)) != 0) {
    } else {
L00000c20:
        if(*L00001AEE != 1) {
        } else {
            *L00002162 = *L00001E22 + 0xf;
            (save)0x2162;
            L00000855();
            (save)( *L00001E22 << 1 << 1) + *L00001DCC;
            (save)0x27a0;
            (save)L00000855();
            (save)0x2164;
            L00000855();
            (save)0x2164;
            L00000855();
            (save)0x2164;
            L00000855();
            goto L0000014B;
        }
        (save)0x27b4;
        (save)0x2168;
        L00000855();
        (save)0x2168;
        L00000855();
        (save)0x2168;
        L00000855();
        *L0000216C = 4;
        (save)0x216c;
        ax = L00000855();
        goto L00000e17;
    }
L00000ca4:
    *L00001F2A = 1;
    *L000020B0 = 0;
    ax = *L0000216E;
    asm("cwd");
    *L00001F06 = *L00001F06 / *L00001F06;
    dx = *L00001F06 % *L00001F06;
    *L0000216E = ax + 1;
    if(*L00001AEE != 0) {
    } else {
        cx = 8;
        ax = *L00001AFE + 2;
        asm("imul word [0x1b08]");
        asm("cwd");
        dx = cx / cx % cx / cx;
        *L0000216E = ax + 4;
        L00000855();
        (save) *L0000278E;
        (save) *L0000278C;
        *(bp - 0xc) = L00000855();
        L00000855();
        cx = 2;
        ax = *L0000216E;
        asm("cwd");
        dx = cx / cx % cx / cx;
        L00000855();
        L00000855();
        *L0000216E = L00000855();
    }
    bx = *L00001F02 << 1;
    dx = bx;
    bx = bx + *L00001C86;
    es = *L00001C7E;
    bx = dx + *L00001C86;
    es = *L00001C7E;
    *%es:bx] = *%es:bx] - *L0000216E;
    *L0000209E = 2;
    if(*L00001AEE != 1) {
    } else {
        *L0000209E = *L00001E22 + 0xd;
    }
    (save)0x27ce;
    (save) *L0000216E;
    (save)L00000855();
    (save)L00000855();
    (save)0x27e0;
    (save)L00000855();
    (save)0x2170;
    L00000855();
    (save)0x2170;
    L00000855();
    (save)0x2170;
    L00000855();
    (save)0x209e;
    ax = L00000855();
    es = *L00001C7E;
    si = ( *L00001F02 << 1) + *L00001C86;
    if(*%es:bx] > 0) {
    } else {
        (save)0x27ee;
        (save)0x2174;
        L00000855();
        (save)0x2174;
        L00000855();
        (save)0x2174;
        L00000855();
        *L00002178 = *L00002178 - 1;
        (save)0x1f02;
        L00000715();
        *L0000217A = 0;
        *L0000217C = 0;
        (save)0x1b00;
        (save)0x1b04;
        (save)0x217a;
        (save)0x217c;
        L00000715();
        *L0000217E = 6;
        (save)0x217e;
        L00000855();
        *L00002180 = 0x12c;
        return(L00000855(0x2180));
    }
L00000e17:
    if(*L000020BC != 1) {
    } else {
        ax = L00000000();
    }
    goto L0000014B;
    if(*L00001E24 <= 1) {
    } else {
        *L00001E24 = 0;
    }
    (save)0x2800;
    (save)0x2182;
    L00000855();
    (save)0x2182;
    L00000855();
    (save)0x2182;
    L00000855();
    L00000855();
    *L00002186 = 9;
    *L00002188 = 3;
    *L0000218A = 2;
    ax = L00000855(0x1e24, 0x218a, 0x2188, 0x2186);
    if(*L00001E22 != 0xb) {
    } else {
        return;
    }
    es = *L00001BC6;
    si = ( *L00001E22 << 1) + 0x1e + *L00001BCE;
    if(*%es:bx] >= 1) {
    } else {
        (save)0x2816;
        (save)( *L00001E22 << 1 << 1) + *L00001DCC;
        (save)L00000855();
        (save)0x2826;
        (save)L00000855();
        (save)0x218c;
        L00000855();
        (save)0x218c;
        L00000855();
        (save)0x218c;
        L00000855();
        goto L00000118;
    }
    *L00001AEE = 1;
    *L00001E24 = *L00001E22 + 65527;
    ax = ( *L00001E22 << 1) + 0x1e;
    bx = ax;
    bx = bx + *L00001BCE;
    es = *L00001BC6;
    bx = ax + *L00001BCE;
    es = *L00001BC6;
    *%es:bx] = *%es:bx] - 1;
    (save)0x282c;
    (save)( *L00001E22 << 1 << 1) + *L00001DCC;
    (save)L00000855();
    (save)0x2190;
    L00000855();
    (save)0x2190;
    L00000855();
    (save)0x2190;
    L00000855();
    ax = *L00001E22;
    L00000855();
    bx = 0x283c;
    L00000855();
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0xc) = L00000855();
    L00000855();
    bx = 0x2840;
    L00000855();
    bx = 0x2840;
    L00000855();
    L00000855();
    L00000855();
    *L0000216E = L00000855();
    goto L0000094d;
}

/* DEST BLOCK NOT FOUND: 00001187 -> 00000872 */
/* DEST BLOCK NOT FOUND: 00001221 -> 00000118 */
/* DEST BLOCK NOT FOUND: 000012b8 -> 0000560b */
/* DEST BLOCK NOT FOUND: 00001330 -> 00000118 */
/* DEST BLOCK NOT FOUND: 0000137b -> 00000139 */
/* DEST BLOCK NOT FOUND: 0000139d -> 00000118 */
/* DEST BLOCK NOT FOUND: 000013bf -> 00000118 */
/* DEST BLOCK NOT FOUND: 00003aa2 -> 0000591b */
stack space not deallocated on return
/*	Procedure: 0x00000F9F - 0x00001F50
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00000F9F()
{



    if(*L00001ADA >= 0x5a) {
    } else {
        if(*L00002080 <= 1) {
        } else {
            if(*L00002194 > 0) {
                goto L000054b0;
            }
        }
    }
    *L00002196 = *L00002080;
    ax = 1;
    goto L00001191;
L00000fca:
    (save)0x2844;
    (save)0x2198;
    L00000855();
    (save)0x2198;
    L00000855();
    (save)0x2198;
    L00000855();
    ax = *L00001AC0;
    L00000855();
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0xc) = L00000855();
    L00000855();
    bx = 0x285c;
    L00000855();
    L00000855();
    < ? L0000101a : ;
    goto L0000104b;
    (save)0x2860;
    (save)0x219c;
    L00000855();
    (save)0x219c;
    L00000855();
    (save)0x219c;
    L00000855();
    *L000021A0 = 5;
    (save)0x21a0;
    L00000855();
    goto L0000118a;
L0000104b:
    ax = *L000021A2;
    L00000855();
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0xc) = L00000855();
    L00000855();
    bx = 0x2870;
    L00000855();
    bx = 0x2874;
    L00000855();
    L00000855();
    *L0000216E = L00000855();
    bx = 0x2878;
    L00000855();
    ax = *L00001ACC;
    L00000855();
    L00000855();
    (save)dx;
    (save)L00000855();
    bx = 0x2878;
    L00000855();
    ax = 0xa;
    asm("imul word [0x1aec]");
    cx = 0;
    if(*L00001AEC > 0) {
        ecx = -1 & 65535;
    }
    bx = ax;
    ax = cx;
    dx = 0x50;
    asm("imul dx");
    ax = ax + bx + 0x1e;
    L00000855();
    L00000855();
    (save)dx;
    (save)L00000855();
    ax = *L0000216E;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save)dx;
    (save)L00000855();
    ax = L00000855() + 3;
    asm("adc dx,+0x0");
    *L0000216E = ax;
    *L00001ADA = *L00001ADA - *L0000216E;
    (save)0x287c;
    (save) *L0000216E;
    (save)L00000855();
    (save)L00000855();
    (save)0x288a;
    (save)L00000855();
    (save)0x21a4;
    L00000855();
    (save)0x21a4;
    L00000855();
    (save)0x21a4;
    L00000855();
    *L000021A8 = 3;
    (save)0x21a8;
    L00000855();
    L000003EF();
    if(*L00001ADA > 0) {
    } else {
        *L00001ADA = 0;
        (save)0x2894;
        (save)0x21aa;
        L00000855();
        (save)0x21aa;
        L00000855();
        (save)0x21aa;
        L00000855();
        *L000021AE = 0x14;
        (save)0x21ae;
        L00000855();
        goto L00000872;
    }
L0000118a:
    L0000014B();
    ax = *L000020D0 + 1;
L00001191:
    *L000020D0 = ax;
    if(ax <= *L00002196) {
        goto L00000fca;
    }
    return;
    (save)0x28a4;
    (save)0x21b0;
    L00000855();
    (save)0x21b0;
    L00000855();
    (save)0x21b0;
    L00000855();
    (save)0x1b00;
    (save)0x1b04;
    L00000715();
    if(*L00001F02 < 0xc8) {
    } else {
        ax = 0;
        if(*L00001F02 == 0xd2) {
            eax = -1 & 65535;
        }
        cx = 0;
        if(*L00001F2A > 0) {
            ecx = -1 & 65535;
        }
        cx = cx | ax;
        ax = 0;
        if(*L000020B0 > 0) {
            eax = -1 & 65535;
        }
        if((ax | cx) == 0) {
        } else {
            (save)0x28ae;
            (save)0x21b4;
            L00000855();
            (save)0x21b4;
            L00000855();
            (save)0x21b4;
            L00000855();
            goto L00000118;
        }
        ax = 0;
        if(*L00001F02 == 0xd6) {
            eax = -1 & 65535;
        }
        cx = 0;
        if(*L00001F02 == 0xd8) {
            ecx = -1 & 65535;
        }
        if((cx | ax) != 0) {
            goto L0000358d;
        }
        ax = 0;
        if(*L000021B8 > 0) {
            eax = -1 & 65535;
        }
        cx = 0;
        if(*L00001F02 != 0xcc) {
            ecx = -1 & 65535;
        }
        cx = cx & ax;
        ax = 0;
        if(*L00001F02 != 0xd0) {
            eax = -1 & 65535;
        }
        ax = ax & cx;
        cx = 0;
        if(*L00001F02 != 0xcf) {
            ecx = -1 & 65535;
        }
        cx = cx & ax;
        ax = 0;
        if(*L00001F02 != 0xd7) {
            eax = -1 & 65535;
        }
        if((ax & cx) != 0) {
            goto L000013a0;
        }
        if(*L00001F02 == 0xca) {
            goto L00002c68;
        }
        if(*L00001F02 == 0xd4) {
            goto L000052c5;
        }
        if(*L00001F02 == 0xd5) {
            goto L00003683;
        }
        if(*L00001F02 == 0xd7) {
            goto L0000560b;
        }
        if(*L00001F02 >= 0xd1) {
        } else {
            L00000855();
            bx = *L00001F02 + 65337;
            ax = L00000855();
            *(bp + si + 0x1a) = *(bp + si + 0x1a) | sp;
            asm("sbb byte [bp+di],0x13");
            dx = dx + ax;
            asm("adc si,[bp+di+0x4a3e]");
            bh = bh & ah;
            asm("das");
            si = si - 1;
            asm("daa");
            asm("loopne 0x1335");
        }
    }
    (save)0x1b00;
    (save)0x1b04;
    L00000715();
    if(*L00001F04 != 0) {
    } else {
        *L000021BA = 0xfa;
        (save)0x21ba;
        L00000855();
        (save)0x28c2;
        (save)0x21bc;
        L00000855();
        (save)0x21bc;
        L00000855();
        (save)0x21bc;
        L00000855();
        goto L00000118;
    }
    (save)0x28d2;
    (save)0x21c0;
    L00000855();
    (save)0x21c0;
    L00000855();
    (save)0x21c0;
    L00000855();
    if(*L00001F2A != 0) {
    } else {
        (save)0x28e2;
        (save)0x21c4;
        L00000855();
        (save)0x21c4;
        L00000855();
        (save)0x21c4;
        L00000855();
        goto L00000139;
    }
    (save)0x28ee;
    (save)0x21c8;
    L00000855();
    (save)0x21c8;
    L00000855();
    (save)0x21c8;
    L00000855();
    goto L00000118;
L000013a0:
    (save)0x28fa;
    (save)0x21cc;
    L00000855();
    (save)0x21cc;
    L00000855();
    (save)0x21cc;
    L00000855();
    goto L00000118;
    *L0000209E = 1;
    (save) *L00001F36 & 65535;
    (save)0x21d0;
    L00000855();
    L000037C8();
    bx = 0xe + *L00001BA0;
    es = *L00001B98;
    cx = 0;
    if(*%es:bx] != *L00001F22) {
        ecx = -1 & 65535;
    }
    ax = 0;
    if(*L00001E20 == 0xc) {
        eax = -1 & 65535;
    }
    if((ax | cx) != 0) {
    } else {
        *L000021D4 = 0x13;
        (save)0x21d4;
        L00000855();
        (save)0x291c;
        (save)0x21d6;
        L00000855();
        (save)0x21d6;
        L00000855();
        (save)0x21d6;
        L00000855();
        (save) *L0000278E;
        (save) *L0000278C;
        *(bp - 0xc) = L00000855();
        L00000855();
        bx = 0x2940;
        L00000855();
        L00000855();
        bx = 0x2944;
        L00000855();
        bx = 0x2948;
        L00000855();
        ax = L00000855();
        *L0000209E = ax;
        asm("cwd");
        ax = ax + *L00001AD2;
        asm("adc dx,[0x1ad4]");
        *L00001AD2 = ax;
        *L00001AD4 = dx;
        bx = 0xe + *L00001BA0;
        es = *L00001B98;
        *%es:bx] = 65535;
        es = *L00001BC6;
        *%es:bx] = 0;
        (save)0x294c;
        (save) *L0000209E;
        (save)L00000855();
        (save)L00000855();
        (save)0x2958;
        (save)L00000855();
        (save)0x21da;
        L00000855();
        (save)0x21da;
        L00000855();
        (save)0x21da;
        L00000855();
        *L0000209E = 0x5dc;
        L00000855();
        L00003AAA();
        goto L00003A79;
    }
    (save)0x2962;
    (save)0xd;
    (save)L00000855();
    (save)L00000855();
    (save)0x296a;
    (save)L00000855();
    (save)0x21de;
    L00000855();
    (save)0x21de;
    L00000855();
    (save)0x21de;
    L00000855();
    (save)0x297a;
    (save)0x21e2;
    L00000855();
    (save)0x21e2;
    L00000855();
    (save)0x21e2;
    L00000855();
    (save)0x29a0;
    (save)0x21e6;
    L00000855();
    (save)0x21e6;
    L00000855();
    (save)0x21e6;
    L00000855();
    (save)0x29c2;
    (save)0x21ea;
    L00000855();
    (save)0x21ea;
    L00000855();
    (save)0x21ea;
    L00000855();
    (save)0x29e6;
    (save)0x21ee;
    L00000855();
    (save)0x21ee;
    L00000855();
    (save)0x21ee;
    L00000855();
    bx = 0x2a06;
    L00000855();
    ax = *L00001ADE;
    L00000855();
    bx = 0x2a0a;
    L00000855();
    L00000855();
    L00000855();
    bx = 0x2a0e;
    L00000855();
    bx = 0x21f2;
    L00000855();
    (save)0x2a12;
    (save) *L000021F4;
    (save) *L000021F2;
    (save)L00000855();
    (save)L00000855();
    (save)0x2a28;
    (save)L00000855();
    (save)0x21f6;
    L00000855();
    (save)0x21f6;
    L00000855();
    (save)0x21f6;
    L00000855();
    ax = *L00001AD2;
    dx = *L00001AD4;
    L00000855();
    bx = 0x21f2;
    L00000855();
    L00000855();
    *L000021FA = L00000855();
    *L000021FC = dx;
    (save) *L000021FC;
    (save) *L000021FA;
    ax = 0x3e8;
    asm("cwd");
    (save)dx;
    (save)ax;
    L00000855();
    if(!(bx = 0x12 + *L00001BCE)) {
    } else {
        *L00001F04 = 0x3e8;
        goto L00001660;
    }
    *L00001F04 = *L000021FA;
L00001660:
    if(*L00001E20 != 0xd) {
    } else {
        (save)0x2a3c;
        (save) *L00001F04;
        (save)L00000855();
        (save)L00000855();
        (save)0x2a5c;
        (save)L00000855();
        (save)0x21fe;
        L00000855();
        (save)0x21fe;
        L00000855();
        (save)0x21fe;
        L00000855();
    }
    if(*L00001E20 == 0xd) {
    } else {
        L00000000();
        if(*L00002202 > 1) {
            goto L00003e5c;
        }
        L00003E0B();
        ax = *L00002204;
        if(ax == 0) {
        } else {
            return;
        }
        (save) *L0000278E;
        (save) *L0000278C;
        *(bp - 0xc) = L00000855();
        L00000855();
        bx = 0x2a66;
        L00000855();
        L00000855();
        bx = 0x2a66;
        L00000855();
        *L00001F02 = L00000855();
        (save)0x2a6a;
        (save)0x21d0;
        L00000855();
        ax = *L00002202;
        L00000855();
        (save) *L0000278E;
        (save) *L0000278C;
        *(bp - 0xe) = L00000855();
        L00000855();
        *L00002202 = L00000855();
        L00000118();
        bx = 0x2a74;
        L00000855();
        bx = 0x21f2;
        L00000855();
        goto L000017b0;
    }
    L000048E7();
    if(*L00001F04 <= 0) {
    } else {
        (save)0x1f04;
        *L00002206 = L00000855();
        *L00001F02 = *L00002206;
        (save)0x2a78;
        (save)0x21d0;
        L00000855();
        goto L0000177f;
    }
    L00000855();
    goto L0000395f;
L0000177f:
    ax = *L00001F04;
    cx = 0;
    if(ax < *L00001F02) {
        ecx = -1 & 65535;
    }
    dx = 0;
    if(ax == 0x3e8) {
        edx = -1 & 65535;
    }
    if((dx & cx) == 0) {
    } else {
        L00003D7D();
        goto L00003A79;
    }
    if(*L00001F04 < *L00001F02) {
        goto L0000395f;
    }
L000017b0:
    ax = *L00001AD2;
    dx = *L00001AD4;
    L00000855();
    ax = *L00001F02;
    L00000855();
    bx = 0x21f2;
    L00000855();
    L00000855();
    *L00001AD2 = L00000855();
    *L00001AD4 = dx;
    ax = *L00001F02;
    L00000855();
    bx = 0x1ace;
    L00000855();
    bx = 0x1ace;
    L00000855();
    (save)0x2a82;
    (save) *L00001F02;
    (save)L00000855();
    (save)L00000855();
    (save)0x2a8a;
    (save)L00000855();
    (save)0x21d0;
    (save)L00000855();
    (save)0x2208;
    L00000855();
    (save)0x2208;
    L00000855();
    (save)0x2208;
    L00000855();
    L00000118();
    ax = 0;
    if(*L00001F02 < 1) {
        eax = -1 & 65535;
    }
    *L0000220C = ~(ax - 0x10);
    (save)0x220c;
    L00000855();
    es = *L00001B98;
    si = 0xe + *L00001BA0;
    ax = 0;
    if(*%es:bx] >= 0) {
        eax = -1 & 65535;
    }
    cx = 0;
    if(*L00001F02 == 0) {
        ecx = -1 & 65535;
    }
    cx = cx | ax;
    ax = 0;
    if(*L0000220E >= 0) {
        eax = -1 & 65535;
    }
    ax = ax | cx;
    cx = 0;
    if(*L00001F22 > 0xa) {
        ecx = -1 & 65535;
    }
    cx = cx | ax;
    ax = 0;
    if(*L00001E20 == 0xc) {
        eax = -1 & 65535;
    }
    if((ax | cx) != 0) {
    } else {
        (save)0x2a9c;
        (save)0x2210;
        L00000855();
        (save)0x2210;
        L00000855();
        (save)0x2210;
        L00000855();
        L00000855();
        *L00002214 = 0;
        *L00002216 = 2;
        *L00002218 = 3;
        *L0000221A = 0;
        (save)0x2214;
        (save)0x2216;
        (save)0x2218;
        (save)0x221a;
        L00000855();
        if(*L00001E22 == 1) {
        } else {
L00001905:
            ax = *L00001F22 - 1;
            L00000855();
            (save) *L0000278E;
            (save) *L0000278C;
            *(bp - 0xc) = L00000855();
            L00000855();
            bx = 0x2940;
            L00000855();
            L00000855();
            L00000855();
            ax = L00000855();
            *L0000209E = ax;
            cx = 0;
            if(ax < 0) {
                ecx = -1 & 65535;
            }
            dx = 0;
            if(ax > 0xa) {
                edx = -1 & 65535;
            }
            dx = dx | cx;
            cx = 0;
            if(ax == *L00001F22) {
                ecx = -1 & 65535;
            }
            if((cx | dx) != 0) {
                goto L00001905;
            }
            (save)0x2ac4;
            (save)0x221c;
            L00000855();
            (save)0x221c;
            L00000855();
            (save)0x221c;
            L00000855();
            (save)0x2ade;
            (save)( *L0000209E << 1 << 1) + *L00001DFA;
            (save)L00000855();
            (save)0x2aee;
            (save)L00000855();
            (save)0x2220;
            L00000855();
            (save)0x2220;
            L00000855();
            (save)0x2220;
            L00000855();
            bx = 0xe + *L00001BA0;
            es = *L00001B98;
            *%es:bx] = *L0000209E;
            bx = 0x12 + *L00001BCE;
            es = *L00001BC6;
            *%es:bx] = 1;
            L00000855();
            L00003AAA();
            bx = *L0000209E << 1 << 1;
            dx = bx;
            (save)bx + *L00001DFA;
            (save)0x2af4;
            *(bp - 0xc) = dx;
            (save)L00000855();
            (save)0x24 + *L00001D70;
            L00000855();
            si = 0x1df0;
            bx = *(bp - 0xc);
            dx = bx;
            (save)bx + *L00001DFA;
            if(L00000855() <= 9) {
            } else {
                (save) *(bp - 0xc) + *(si + 0xa);
                (save)0xb;
                (save)L00000855();
                (save)0x2afe;
                (save)L00000855();
                (save)0x24 + *L00001D70;
                L00000855();
            }
        }
    }
    L00000855();
    goto L00003A79;
    *L0000209E = 1;
    (save)4 + *L00001F36;
    (save)0x21d0;
    L00000855();
    L000037C8();
    (save)0x2b06;
    (save)0xd;
    (save)L00000855();
    (save)L00000855();
    (save)0x2b0c;
    (save)L00000855();
    (save)0x2224;
    L00000855();
    (save)0x2224;
    L00000855();
    (save)0x2224;
    L00000855();
    if(*L00001E20 == 0xc) {
    } else {
        L00003C6C();
        if(*L00001E22 == 2) {
        } else {
            if(*L00001E22 == 4) {
                goto L00003A79;
            }
            (save)0x2b18;
            (save)0x21d0;
            L00000855();
            L00000855();
            *L00001E22 = 1;
            L00001FFA();
            ax = *L00002228;
            if(ax == 0) {
            } else {
                return;
            }
            goto L00003cb3;
        }
    }
    (save)0x2962;
    (save)0x222a;
    L00000855();
    (save)0x222a;
    L00000855();
    (save)0x222a;
    L00000855();
    L000038EC();
    ax = 0x258;
    asm("cwd");
    (save)dx;
    (save)ax;
    bx = 0x1af8;
    L00000855();
    (save)dx;
    (save)L00000855();
    ax = L00000855() + 0xa;
    asm("adc dx,+0x0");
    *L0000209E = ax;
    if(ax <= 0x2c) {
    } else {
        *L0000209E = 0x2c;
    }
    cx = 5;
    ax = *L0000209E;
    asm("cwd");
    dx = cx / cx % cx / cx;
    *L00001F08 = ax;
    asm("imul cx");
    *L00001F0A = ~(ax - *L0000209E);
    *L00001F0C = 0;
    *L00001F0E = 0;
    *L00001F10 = 4;
    goto L00001c9b;
    *L0000209E = 1;
    (save)8 + *L00001F36;
    (save)0x21d0;
    L00000855();
    L000037C8();
    (save)0x2b06;
    (save)0xd;
    (save)L00000855();
    (save)L00000855();
    (save)0x2b1c;
    (save)L00000855();
    (save)0x222e;
    L00000855();
    (save)0x222e;
    L00000855();
    (save)0x222e;
    L00000855();
    if(*L00001E20 == 0xc) {
    } else {
        L00003C6C();
        if(*L00001E22 == 2) {
        } else {
            if(*L00001E22 == 4) {
                goto L00003A79;
            }
            (save)0x2b18;
            (save)0x21d0;
            L00000855();
            L00000855();
            *L00001E22 = 2;
            L00001FFA();
            ax = *L00002228;
            if(ax == 0) {
            } else {
                return;
            }
            goto L00003cb3;
        }
    }
    (save)0x2962;
    (save)0x2232;
    L00000855();
    (save)0x2232;
    L00000855();
    (save)0x2232;
    L00000855();
    L000038EC();
    bx = 0x1af8;
    L00000855();
    bx = 0x2b26;
    L00000855();
    bx = 0x2b2a;
    L00000855();
    ax = L00000855();
    *L0000209E = ax;
    if(*L0000209E <= 0x18) {
    } else {
        *L0000209E = 0x18;
    }
    cx = 5;
    ax = *L0000209E;
    asm("cwd");
    cx = cx / cx;
    dx = cx % cx;
    *L00001F08 = ax;
    asm("imul cx");
    *L00001F0A = ~(ax - *L0000209E);
    *L00001F08 = *L00001F08 + 9;
    *L00001F0C = 8;
    *L00001F0E = cx;
    *L00001F10 = 7;
L00001c9b:
    (save)0x1f0c;
    (save)0x1f08;
    (save)0x1f0a;
    L00000000();
    ax = 0;
    goto L00001d2a;
L00001cb2:
    L00000000();
    if(*L00001F04 != 0) {
    } else {
        bx = ( *L000020D0 << 1) + 0x4a + *L00001C86;
        es = *L00001C7E;
        *%es:bx] = 0;
        goto L00001d32;
    }
    ax = *L000020D0 << 1;
    bx = ax;
    ax = ax + 0x4a;
    dx = bx;
    bx = ax;
    bx = bx + *L00001C86;
    es = *L00001C7E;
    *%es:bx] = *L00001F04;
    bx = dx + 0x5c + *L00001C86;
    es = *L00001C7E;
    *%es:bx] = *L00001F06;
    L00001F51();
    bx = ( *L000020D0 << 1) + 0x6e + *L00001C86;
    es = *L00001C7E;
    *%es:bx] = *L0000209E;
    ax = *L000020D0 + 1;
L00001d2a:
    *L000020D0 = ax;
    if(ax <= 8) {
        goto L00001cb2;
    }
L00001d32:
    L00000855();
    ax = 0;
    goto L00001e68;
L00001d3c:
    bx = (ax << 1) + 0x4a;
    es = *L00001C7E;
    si = bx + *L00001C86;
    if(*%es:bx] == 0) {
    } else {
        (save) *L000020D0 + 1;
        (save)L00000855();
        (save)0x2b2e;
        (save)L00000855();
        bx = ( *L000020D0 << 1) + 0x5c + *L00001C86;
        es = *L00001C7E;
        (save)( *%es:bx] << 1 << 1) + *L00001CE6;
        (save)L00000855();
        (save)0x2236;
        L00000855();
        (save)0x2236;
        L00000855();
        (save)0x2236;
        L00000855();
        *L0000223A = 0xe;
        (save)0x223a;
        L00000715();
        ax = ( *L000020D0 << 1) + 0x4a;
        bx = ax;
        bx = bx + *L00001C86;
        es = *L00001C7E;
        (save)( *%es:bx] << 1 << 1) + *L00001D14;
        bx = ax;
        (save)0x223c;
        *(bp - 0xc) = bx;
        L00000855();
        (save)0x223c;
        L00000855();
        (save)0x223c;
        bx = *(bp - 0xc) + *L00001C86;
        es = *L00001C7E;
        (save)( *%es:bx] << 1 << 1) + *L00001D14;
        L00000855();
        *L00002240 = 0x1c;
        (save)0x2240;
        L00000715();
        bx = ( *L000020D0 << 1) + 0x6e + *L00001C86;
        es = *L00001C7E;
        (save) *%es:bx];
        (save)L00000855();
        (save)0x2242;
        L00000855();
        (save)0x2242;
        L00000855();
        (save)0x2242;
        L00000855();
        ax = *L000020D0 + 1;
L00001e68:
        *L000020D0 = ax;
        if(ax <= 8) {
            goto L00001d3c;
        }
    }
    if(*L00001E20 != 0xc) {
    } else {
        *L00002246 = 9;
        *L00002248 = 0x11;
        (save)0x2246;
        (save)0x2248;
        L00000855();
        (save)0x2b34;
        (save)0x224a;
        L00000855();
        (save)0x224a;
        L00000855();
        (save)0x224a;
        L00000855();
    }
    if(*L00001E20 != 0xc) {
    } else {
        L00003E0B();
        ax = *L00002204;
        if(ax == 0) {
        } else {
            return;
        }
    }
    L00003926();
    *L0000224E = 0x64;
    *L00002250 = *L000020D0 + 1;
    *L00002252 = 1;
    *L00002254 = 0;
    (save)0x224e;
    (save)0x2250;
    (save)0x2252;
    (save)0x2254;
    L00000855();
    if(*L00001E22 == 0) {
        goto L00003AF8;
    }
    *L00002256 = *L00001F10;
    ax = *L00001F0E;
    goto L00001f30;
L00001f14:
    bx = ax << 1;
    es = *L00001B0E;
    si = bx + *L00001B16;
    if(*%es:bx] == 0) {
        goto L000020a6;
    }
    ax = *L00002258 + 1;
L00001f30:
    *L00002258 = ax;
    if(ax <= *L00002256) {
        goto L00001f14;
    }
    if(*L00001E20 == 0xd) {
        goto L00003b90;
    }
    *L00002258 = *L00001F0E;
    L00000855();
    goto L000020a6;
}

/* DEST BLOCK NOT FOUND: 00001faf -> 00001ff9 */
/*	Procedure: 0x00001F51 - 0x00001FF9
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00001F51()
{



    bx = 0x2b4e;
    L00000855();
    bx = 0x2b52;
    L00000855();
    ax = *L00001F04;
    L00000855();
    L00000855();
    ax = *L00001F06;
    L00000855();
    bx = 0x2b56;
    L00000855();
    L00000855();
    bx = 0x2b5a;
    L00000855();
    L00000855();
    bx = 0x2b5e;
    L00000855();
    bx = 0x2b62;
    L00000855();
    ax = L00000855();
    *L0000209E = ax;
    if(*L00001F04 <= 8) {
    } else {
        bx = 0x2b66;
        L00000855();
        bx = 0x2b6a;
        L00000855();
        ax = *L00001F04;
        L00000855();
        L00000855();
        ax = *L00001F06;
        L00000855();
        bx = 0x2b6e;
        L00000855();
        bx = 0x2b72;
        L00000855();
        L00000855();
        L00000855();
        ax = L00000855();
        *L0000209E = ax;
    }
}

/* DEST BLOCK NOT FOUND: 000020e4 -> 00003e5c */
/* DEST BLOCK NOT FOUND: 000020fc -> 00003e5c */
/* DEST BLOCK NOT FOUND: 00003aa2 -> 0000591b */
stack space not deallocated on return
/*	Procedure: 0x00001FFA - 0x00002672
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00001FFA()
{



    L00004997();
    ax = *L00002228;
    if(ax == 0) {
    } else {
        return;
    }
    L00001F51();
    ax = *L0000209E;
    L00000855();
    bx = 0x2b76;
    L00000855();
    ax = *L00001ADE;
    L00000855();
    L00000855();
    L00000855();
    bx = 0x2b7a;
    L00000855();
    L00000855();
    ax = L00000855();
    *L00001F12 = ax;
    if(*L00001F12 <= *L0000209E) {
    } else {
        *L00001F12 = *L0000209E;
    }
    ax = *L00001F12;
    L00000855();
    bx = 0x2878;
    L00000855();
    L00000855();
    *L00001F12 = L00000855();
    return(L00000855(0x21d0, L00000855(), ( *L00001F04 << 1 << 1) + *L00001D14, L00000855(), 0x2b7e, ( *L00001F06 << 1 << 1) + *L00001CE6));
    bx = ( *L00001E22 << 1) + 0x6c + *L00001C86;
    es = *L00001C7E;
    *L00001F02 = *%es:bx];
    if(*L00001E20 == 0xd) {
    } else {
        *L00001F02 = 0;
        if(*L00002258 >= 5) {
        } else {
            *L0000225A = *L0000225A + 1;
            if(*L0000225A > 2) {
                goto L00003e5c;
            }
        }
        if(*L00002258 <= 4) {
        } else {
            *L0000225C = *L0000225C + 1;
            if(*L0000225C > 2) {
                goto L00003e5c;
            }
        }
    }
    ax = *L00001E22 << 1;
    bx = ax;
    ax = ax + 0x48;
    dx = bx;
    bx = ax;
    bx = bx + *L00001C86;
    es = *L00001C7E;
    *L0000209E = *%es:bx];
    bx = dx + 0x5a + *L00001C86;
    es = *L00001C7E;
    ax = *%es:bx];
    *L00001F04 = ax;
    (save)( *L00001F04 << 1 << 1) + *L00001CE6;
    (save)0x2b7e;
    (save)L00000855();
    (save)( *L0000209E << 1 << 1) + *L00001D14;
    (save)L00000855();
    (save)0x21d0;
    L00000855();
    ax = 0;
    if(*L00001E20 == 0xc) {
    }
    bx = 0x2b84;
    *(bp - 0xc) = ax;
    L00000855();
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0xe) = L00000855();
    L00000855();
    L00000855();
    ax = 0;
    if(!(eax = -1 & 65535)) {
        eax = -1 & 65535;
    }
    if((ax & *(bp - 0xc)) == 0) {
    } else {
        (save)0x2b88;
        (save)( *L0000209E << 1 << 1) + *L00001D14;
        (save)L00000855();
        (save)0x2aee;
        (save)L00000855();
        (save)0x225e;
        L00000855();
        (save)0x225e;
        L00000855();
        (save)0x225e;
        L00000855();
        L00000118();
        goto L00003A79;
    }
    ax = *L00001F02;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L00001AD4;
    (save) *L00001AD2;
    L00000855();
    <= ? L00002200 : ;
    goto L0000395f;
    ax = *L00001F02;
    asm("cwd");
    ax = ax - *L00001AD2;
    asm("sbb dx,[0x1ad4]");
    ax = ~ax;
    asm("adc dx,+0x0");
    *L00001AD2 = ax;
    *L00001AD4 = ~dx;
    bx = *L00002258 << 1;
    dx = bx;
    bx = bx + *L00001B16;
    es = *L00001B0E;
    *%es:bx] = *L0000209E;
    bx = dx;
    bx = bx + *L00001B72;
    es = *L00001B6A;
    *%es:bx] = *L00001F04;
    L00000855();
    goto L00003BD4;
    *L0000209E = 2;
    (save)0xc + *L00001F36;
    (save)0x21d0;
    L00000855();
    L000037C8();
    (save)0x2ba4;
    (save)0x2262;
    L00000855();
    (save)0x2262;
    L00000855();
    (save)0x2262;
    L00000855();
    si = 0x1c7c;
    bx = 0x74 + *L00001C86;
    es = *L00001C7E;
    *%es:bx] = 0x19;
    bx = 0x76 + *L00001C86;
    es = *L00001C7E;
    *%es:bx] = 0x32;
    bx = 0x78 + *L00001C86;
    es = *L00001C7E;
    *%es:bx] = 0x78;
    bx = 0x7a + *L00001C86;
    es = *L00001C7E;
    *%es:bx] = 0x96;
    bx = 0x7c + *L00001C86;
    es = *L00001C7E;
    *%es:bx] = 0x12c;
    ax = 0x1e;
    asm("imul word [0x1ae0]");
    ax = ax + 0xa;
    bx = 0x7e + *(si + 0xa);
    es = *(si + 2);
    *%es:bx] = ax;
    ax = 0x3a;
    goto L00002324;
L000022ea:
    ax = ax << 1;
    bx = ax;
    si = 0x1c7c;
    bx = bx + *L00001C86;
    es = *L00001C7E;
    dx = ax;
    ax = *%es:bx];
    *(bp - 0xc) = dx;
    *(bp - 0xe) = bx;
    L00000855();
    bx = 0x2266;
    L00000855();
    bx = *(bp - 0xc) + *(si + 0xa);
    es = *(si + 2);
    *%es:bx] = L00000855();
    ax = *L000020D0 + 1;
L00002324:
    *L000020D0 = ax;
    if(ax <= 0x3f) {
        goto L000022ea;
    }
    ax = 0x18;
    goto L0000242b;
L00002332:
    (save)3;
    (save)L00000855();
    (save) *L000020D0 + 0x19;
    (save)L00000855();
    (save)L00000855();
    (save)0x2b2e;
    (save)L00000855();
    (save)( *L000020D0 << 1 << 1) + *L00001D70;
    (save)L00000855();
    (save)0x226a;
    L00000855();
    (save)0x226a;
    L00000855();
    (save)0x226a;
    L00000855();
    *L0000226E = 0x1d;
    (save)0x226e;
    L00000715();
    bx = ( *L000020D0 << 1) + 0x44 + *L00001C86;
    es = *L00001C7E;
    (save) *%es:bx];
    (save)L00000855();
    (save)0x2270;
    L00000855();
    (save)0x2270;
    L00000855();
    (save)0x2270;
    L00000855();
    if(*L000020D0 != 0x19) {
    } else {
        (save)0x2bce;
        (save)0x2274;
        L00000855();
        (save)0x2274;
        L00000855();
        (save)0x2274;
        L00000855();
        L00002673();
    }
    if(*L000020D0 != 0x1c) {
    } else {
        (save)0x2be0;
        (save)0x2278;
        L00000855();
        (save)0x2278;
        L00000855();
        (save)0x2278;
        L00000855();
        L00002673();
    }
    ax = *L000020D0 + 1;
L0000242b:
    *L000020D0 = ax;
    if(ax <= 0x1d) {
        goto L00002332;
    }
    L00003926();
    *L0000227C = 0x64;
    *L0000227E = 7;
    *L00002280 = 1;
    *L00002282 = 0;
    (save)0x227c;
    (save)0x227e;
    (save)0x2280;
    (save)0x2282;
    L00000855();
    if(*L00001E22 == 0) {
        goto L00003AF8;
    }
    es = *L00001C7E;
    ax = *%es:bx];
    *L00001F02 = ax;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L00001AD4;
    (save) *L00001AD2;
    L00000855();
    if(!(bx = ( *L00001E22 << 1) + 0x72 + *L00001C86)) {
        goto L0000395f;
    }
    *L00001F06 = *L00001F02;
    (save)( *L00001E22 << 1 << 1) + *L00001D70;
    (save)L00000855();
    (save)0x21d0;
    L00000855();
    ax = *L00001F06;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L00001AD4;
    (save) *L00001AD2;
    L00000855();
    L00000855();
    bx = 0x21f2;
    L00000855();
    bx = 0x2bf2;
    L00000855();
    bx = 0x21f2;
    L00000855();
    L00000855();
    if(!( *L00001E22 = *L00001E22 + 0x17)) {
    } else {
        bx = 0x21f2;
        L00000855();
        *L0000209E = L00000855();
        goto L0000251a;
    }
    *L0000209E = 0x63;
L0000251a:
    if(*L0000209E >= 2) {
    } else {
        *L00001F02 = 1;
        ax = *L00001F06;
        asm("cwd");
        ax = ax - *L00001AD2;
        asm("sbb dx,[0x1ad4]");
        ax = ~ax;
        asm("adc dx,+0x0");
        *L00001AD2 = ax;
        *L00001AD4 = ~dx;
        goto L0000264d;
    }
    ax = *L00001E22 + 65516;
    *L000020D0 = ax;
    *L00002284 = 8;
    cx = 0;
    if(*L000020D0 > 5) {
        ecx = -1 & 65535;
    }
    ax = cx;
    dx = 3;
    asm("imul dx");
    cx = *L000020D0 - ax;
    ax = 0;
    if(*L000020D0 > 8) {
        eax = -1 & 65535;
    }
    dx = 3;
    asm("imul dx");
    *L00002286 = cx - ax;
    (save)0x2284;
    (save)0x2286;
    L00000855();
    (save)0x21d0;
    L00000855();
    L00003996();
    ax = *L00002288;
    if(ax == 0) {
    } else {
        return;
    }
    (save) *L00001F02;
    (save)L00000855();
    (save)0x2b7e;
    (save)L00000855();
    (save)0x21d0;
    (save)L00000855();
    (save)0x21d0;
    L00000855();
    if(*L00001F02 <= 1) {
    } else {
        (save)0x21d0;
        (save)0x2bf6;
        (save)L00000855();
        (save)0x21d0;
        L00000855();
    }
    bx = ( *L00001E22 << 1) + *L00001BCE;
    es = *L00001BC6;
    ax = *%es:bx] + *L00001F02;
    *L000020D0 = ax;
    cx = 0;
    if(*L00001E22 == 0x1c) {
        ecx = -1 & 65535;
    }
    dx = 0;
    if(ax > 0x14) {
        edx = -1 & 65535;
    }
    dx = dx & cx;
    cx = 0;
    if(ax > 0x63) {
        ecx = -1 & 65535;
    }
    if((cx | dx) == 0) {
    } else {
        L00003D7D();
        ax = *L00001F06;
        asm("imul word [0x1f02]");
        asm("cwd");
        ax = ax + *L00001AD2;
        asm("adc dx,[0x1ad4]");
        *L00001AD2 = ax;
        *L00001AD4 = dx;
        goto L00003A79;
    }
L0000264d:
    bx = *L00001E22 << 1;
    dx = bx;
    bx = bx + *L00001BCE;
    es = *L00001BC6;
    bx = dx + *L00001BCE;
    es = *L00001BC6;
    *%es:bx] = *%es:bx] + *L00001F02;
    goto L00003BD4;
}

/* DEST BLOCK NOT FOUND: 000026c0 -> 00000118 */
/* DEST BLOCK NOT FOUND: 0000274b -> 00000118 */
/* DEST BLOCK NOT FOUND: 00002ff9 -> 00003bda */
/* DEST BLOCK NOT FOUND: 000034f0 -> 00000121 */
/* DEST BLOCK NOT FOUND: 0000354b -> 00000121 */
/* DEST BLOCK NOT FOUND: 00003584 -> 00000121 */
/* DEST BLOCK NOT FOUND: 00003aa2 -> 0000591b */
stack space not deallocated on return
/*	Procedure: 0x00002673 - 0x000037C7
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00002673()
{



    (save)0x2bfc;
    (save)0x228a;
    L00000855();
    (save)0x228a;
    L00000855();
    return(L00000855(0x228a));
    *L0000228E = *L0000228E + 1;
    if(*L0000228E <= 1) {
    } else {
        (save)0x2c16;
        (save)0x2290;
        L00000855();
        (save)0x2290;
        L00000855();
        (save)0x2290;
        L00000855();
        goto L00000118;
    }
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0xc) = L00000855();
    L00000855();
    bx = 0x2c26;
    L00000855();
    L00000855();
    bx = 0x2c26;
    L00000855();
    bx = 0x2c2a;
    L00000855();
    ax = L00000855();
    *L0000209E = ax;
    asm("cwd");
    asm("adc dx,[0x1ad4]");
    *L00001AD2 = ax;
    *L00001AD4 = dx;
    (save)0x2c2e;
    (save) *L0000209E;
    (save)L00000855();
    (save)L00000855();
    (save)0x2958;
    (save)L00000855();
    (save)0x2294;
    L00000855();
    (save)0x2294;
    L00000855();
    (save)0x2294;
    L00000855();
    L000003EF();
    goto L00000118;
    dx = *L00001AC4;
    *L00002298 = *L00001AC2;
    *L0000229A = dx;
    (save) *L0000229A;
    (save) *L00002298;
    ax = 0x1388;
    asm("cwd");
    (save)dx;
    (save)ax;
    ax = L00000855();
    if(!(ax = ax + *L00001AD2)) {
    } else {
        *L00002298 = ax;
        *L0000229A = dx;
    }
    ax = *L00002298;
    dx = *L0000229A;
    L00000855();
    bx = 0x1af4;
    L00000855();
    es = *L00001B98;
    ax = *%es:bx];
    L00000855();
    L00000855();
    L00000855();
    bx = 0x2c3c;
    L00000855();
    L00000855();
    *L00002298 = L00000855();
    *L0000229A = dx;
    (save) *L0000229A;
    (save) *L00002298;
    ax = 0x5dc;
    asm("cwd");
    (save)dx;
    (save)ax;
    ax = L00000855();
    if(!( *(bp - 0xc) = 0x48 + *L00001BA0)) {
    } else {
        *L00002298 = ax;
        *L0000229A = dx;
    }
    dx = *L0000229A;
    ax = *L00002298 + *L00001AC2;
    asm("adc dx,[0x1ac4]");
    L00000855();
    L00000855();
    *L00001AC2 = L00000855();
    *L00001AC4 = dx;
    *L0000209E = 2;
    (save)0x2c44;
    (save)0x21d0;
    L00000855();
    L000037C8();
    (save)0x2c58;
    (save)0xe;
    (save)L00000855();
    (save)L00000855();
    (save)0x2c60;
    (save)L00000855();
    (save)0x229c;
    L00000855();
    (save)0x229c;
    L00000855();
    (save)0x229c;
    L00000855();
    (save)0xc;
    (save)L00000855();
    (save)0x2c70;
    (save)L00000855();
    (save)0x22a0;
    L00000855();
    (save)0x22a0;
    L00000855();
    (save)0x22a0;
    L00000855();
    (save)0x2c82;
    (save)8;
    (save)L00000855();
    (save)L00000855();
    (save)0x2c88;
    (save)L00000855();
    (save)0x22a4;
    L00000855();
    (save)0x22a4;
    L00000855();
    (save)0x22a4;
    L00000855();
    (save)0x2b06;
    (save)8;
    (save)L00000855();
    (save)L00000855();
    (save)0x2c9e;
    (save)L00000855();
    (save)0x22a8;
    L00000855();
    (save)0x22a8;
    L00000855();
    (save)0x22a8;
    L00000855();
    (save)0x2b06;
    (save)8;
    (save)L00000855();
    (save)L00000855();
    (save)0x2cb4;
    (save)L00000855();
    (save)0x22ac;
    L00000855();
    (save)0x22ac;
    L00000855();
    (save)0x22ac;
    L00000855();
    L000048E7();
    L00003926();
    *L000022B0 = 0x64;
    *L000022B2 = 4;
    *L000022B4 = 2;
    *L000022B6 = 0;
    (save)0x22b0;
    (save)0x22b2;
    (save)0x22b4;
    (save)0x22b6;
    L00000855();
    if(*L00001E22 != 0) {
    } else {
        (save)0x2ccc;
        (save)0x22b8;
        L00000855();
        (save)0x22b8;
        L00000855();
        (save)0x22b8;
        L00000855();
        goto L00003A79;
    }
    *L00001F02 = 0;
    bx = *L00001E22;
    ah = L00000855() + *(bx + di);
    bl = bl - *(bp + di);
    ax = ax - *(bp + di + 0x23e);
L000029a9:
    (restore)ds;
    *(bx + 3) = *(bx + 3) + bh;
    goto L000029c2;
    *L000022BC = 0x10;
    (save)0x22bc;
    L00000855();
L000029c2:
    bx = 0x1af4;
    L00000855();
    es = *L00001B98;
    *%es:bx] = L00000855();
    (save)0x2ce2;
    (save) *L00001AC4;
    (save) *L00001AC2;
    (save)L00000855();
    (save)L00000855();
    (save)0x2958;
    (save)L00000855();
    (save)0x22be;
    L00000855();
    (save)0x22be;
    L00000855();
    (save)0x22be;
    L00000855();
    L00000118();
    goto L00003A79;
    (save) *L00001AD4;
    (save) *L00001AD2;
    ax = 1;
    asm("cwd");
    (save)dx;
    (save)ax;
    L00000855();
    if(!(bx = 0x48 + *L00001BA0)) {
    } else {
        (save)0x2cfa;
        (save)0x22c2;
        L00000855();
        (save)0x22c2;
        L00000855();
        (save)0x22c2;
        L00000855();
        L00000118();
        goto L00003A79;
    }
    L00000855();
    L00000855();
    *L000022C6 = 0x15;
    (save)0x22c6;
    L00000855();
    (save)0x2d1a;
    (save)0x22c8;
    L00000855();
    (save)0x22c8;
    L00000855();
    (save)0x22c8;
    L00000855();
    (save) *L00001AD4;
    (save) *L00001AD2;
    ax = 0x7530;
    asm("cwd");
    (save)dx;
    (save)ax;
    L00000855();
    > ? L00002aae : ;
    goto L00002ab7;
    *L000022CC = 0x7530;
    goto L00002abd;
L00002ab7:
    *L000022CC = *L00001AD2;
L00002abd:
    (save)0x22cc;
    *L000022CE = L00000855();
    ax = *L000022CE;
    *L00001F02 = ax;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L00001AD4;
    (save) *L00001AD2;
    L00000855();
    <= ? L00002ae4 : ;
    goto L0000395f;
    ax = *L00001F02;
    asm("cwd");
    *(bp - 0xc) = dx;
    *(bp - 0xe) = ax;
    ax = ax - *L00001AD2;
    asm("sbb dx,[0x1ad4]");
    ax = ~ax;
    asm("adc dx,+0x0");
    *L00001AD2 = ax;
    *L00001AD4 = ~dx;
    dx = *L00001AC4;
    asm("adc dx,[bp-0xc]");
    *L00001AC2 = ax;
    *L00001AC4 = dx;
    goto L000029a9;
    (save) *L00001AC4;
    (save) *L00001AC2;
    ax = 1;
    asm("cwd");
    (save)dx;
    (save)ax;
    L00000855();
    if(!(ax = *L00001AC2 + *(bp - 0xe))) {
    } else {
        (save)0x2d30;
        (save)0x22d0;
        L00000855();
        (save)0x22d0;
        L00000855();
        (save)0x22d0;
        L00000855();
        L00000118();
        goto L00003A79;
    }
    L00000855();
    L00000855();
    *L000022D4 = 0x15;
    (save)0x22d4;
    L00000855();
    (save)0x2d4a;
    (save) *L00001AC4;
    (save) *L00001AC2;
    (save)L00000855();
    (save)L00000855();
    (save)0x2d64;
    (save)L00000855();
    (save)0x22d6;
    L00000855();
    (save)0x22d6;
    L00000855();
    (save)0x22d6;
    L00000855();
    (save) *L00001AC4;
    (save) *L00001AC2;
    ax = 0x7530;
    asm("cwd");
    (save)dx;
    (save)ax;
    L00000855();
    > ? L00002bc6 : ;
    goto L00002bcf;
    *L000022CC = 0x7530;
    goto L00002bd5;
L00002bcf:
    *L000022CC = *L00001AC2;
L00002bd5:
    (save)0x22cc;
    *L000022DA = L00000855();
    *L00001F02 = *L000022DA;
    ax = *L00001F02;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L00001AC4;
    (save) *L00001AC2;
    L00000855();
    <= ? L00002bff : ;
    goto L0000395f;
    ax = *L00001F02;
    asm("cwd");
    *(bp - 0xc) = dx;
    *(bp - 0xe) = ax;
    ax = ax + *L00001AD2;
    asm("adc dx,[0x1ad4]");
    *L00001AD2 = ax;
    *L00001AD4 = dx;
    dx = *L00001AC4;
    ax = *L00001AC2 - *(bp - 0xe);
    asm("sbb dx,[bp-0xc]");
    *L00001AC2 = ax;
    *L00001AC4 = dx;
    (save)0x2d6e;
    (save) *L00001F02;
    (save)L00000855();
    (save)L00000855();
    (save)0x2958;
    (save)L00000855();
    (save)0x22dc;
    L00000855();
    (save)0x22dc;
    L00000855();
    (save)0x22dc;
    L00000855();
    goto L000029a9;
    *L000022E0 = L00000000();
    si = 0x1b96;
    bx = 0x1a + *L00001BA0;
    es = *L00001B98;
    *%es:bx] = *L000022E0;
    ax = 0;
    if(*L00001F22 < 0xb) {
        eax = -1 & 65535;
    }
    es = *(si + 2);
    si = 0x1a + *(si + 0xa);
    cx = 0;
    if(*%es:bx] > 3) {
        ecx = -1 & 65535;
    }
    cx = cx & ax;
    ax = 0;
    if(*L00001F22 != 2) {
        eax = -1 & 65535;
    }
    if((ax & cx) != 0) {
    } else {
        bx = 0x2266;
        L00000855();
        bx = 0x2d7c;
        L00000855();
        bx = 0x2944;
        L00000855();
        L00000855();
        L00000855();
        bx = 0x2d80;
        L00000855();
        L00000855();
        *L00001F02 = L00000855();
        (save)0x2d84;
        (save)0x10 + *L00001F36;
        (save)L00000855();
        (save)0x2d8e;
        (save)L00000855();
        (save)0x22e2;
        L00000855();
        (save)0x22e2;
        L00000855();
        (save)0x22e2;
        L00000855();
        (save)0x2d9a;
        (save) *L00001F02;
        (save)L00000855();
        (save)L00000855();
        (save)0x2db6;
        (save)L00000855();
        (save)0x22e6;
        L00000855();
        (save)0x22e6;
        L00000855();
        (save)0x22e6;
        L00000855();
        *L000022EA = 0;
        *L000022EC = 2;
        *L000022EE = 3;
        *L000022F0 = 1;
        (save)0x22ea;
        (save)0x22ec;
        (save)0x22ee;
        (save)0x22f0;
        L00000855();
        L00000855();
        L00000855();
        if(*L00001E22 == 1) {
        } else {
            ax = 0;
            if(*L00001F22 == 2) {
                eax = -1 & 65535;
            }
            si = 0x1b96;
            es = *L00001B98;
            di = 0x1a + *L00001BA0;
            cx = 0;
            if(*%es:bx] > 3) {
                ecx = -1 & 65535;
            }
            if((cx & ax) == 0) {
            } else {
                bx = 0x3a + *(si + 0xa);
                es = *(si + 2);
                *%es:bx] = 0x7fff;
                es = *(si + 2);
                *%es:bx] = 3;
            }
            ax = *L00001F02;
            asm("cwd");
            (save)dx;
            (save)ax;
            (save) *L00001AD4;
            (save) *L00001AD2;
            L00000855();
            if(!(bx = 0x1a + *(si + 0xa))) {
                goto L0000395f;
            }
            ax = *L00001F02;
            asm("cwd");
            ax = ax - *L00001AD2;
            asm("sbb dx,[0x1ad4]");
            ax = ~ax;
            asm("adc dx,+0x0");
            *L00001AD2 = ax;
            *L00001AD4 = ~dx;
            ax = 0;
            if(*L00001F22 == 4) {
                eax = -1 & 65535;
            }
            cx = *L00001B06 - ax;
            ax = 0;
            if(*L00001F22 == 2) {
                eax = -1 & 65535;
            }
            dx = 0;
            if(*L00001F22 == 5) {
                edx = -1 & 65535;
            }
            dx = dx | ax;
            ax = 0;
            if(*L00001F22 == 0xa) {
                eax = -1 & 65535;
            }
            *L00001F04 = (ax | dx) + cx;
            ax = 0;
            if(*L00001F22 == 0) {
                eax = -1 & 65535;
            }
            cx = 0;
            if(*L00001F22 == 0xb) {
                ecx = -1 & 65535;
            }
            cx = cx | ax;
            *L0000209E = *L00001B02 - cx;
            (save)0x209e;
            (save)0x1f04;
            L00000000();
            (save)0x2dc0;
            (save)0x21d0;
            L00000855();
            si = 0x1b96;
            bx = 0x1a + *L00001BA0;
            es = *L00001B98;
            ax = *%es:bx];
            cx = 0;
            if(*L00001F22 < 0xb) {
                ecx = -1 & 65535;
            }
            ax = ax - cx;
            bx = 0x1a + *(si + 0xa);
            es = *(si + 2);
            *%es:bx] = ax;
            L00003BDA();
            (save)0x2dc8;
            (save)0x22f2;
            L00000855();
            (save)0x22f2;
            L00000855();
            return(L00000855(0x22f2));
        }
    }
    bx = 0x2a66;
    L00000855();
    bx = 0x2266;
    L00000855();
    L00000855();
    *L00001F02 = L00000855();
    (save)0x2de0;
    (save)8 + *L00001D70;
    (save)L00000855();
    (save)0x22f6;
    L00000855();
    (save)0x22f6;
    L00000855();
    (save)0x22f6;
    L00000855();
    (save)0x2df6;
    (save) *L00001F02;
    (save)L00000855();
    (save)L00000855();
    (save)0x2db6;
    (save)L00000855();
    (save)0x22fa;
    L00000855();
    (save)0x22fa;
    L00000855();
    (save)0x22fa;
    L00000855();
    *L000022FE = 0;
    *L00002300 = 2;
    *L00002302 = 3;
    *L00002304 = 1;
    (save)0x22fe;
    (save)0x2300;
    (save)0x2302;
    (save)0x2304;
    L00000855();
    if(*L00001E22 == 1) {
        goto L00003afe;
    }
    ax = *L00001F02;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L00001AD4;
    (save) *L00001AD2;
    L00000855();
    <= ? L00002fb0 : ;
    goto L0000395f;
    ax = *L00001F02;
    asm("cwd");
    ax = ax - *L00001AD2;
    asm("sbb dx,[0x1ad4]");
    ax = ~ax;
    asm("adc dx,+0x0");
    *L00001AD2 = ax;
    *L00001AD4 = ~dx;
    bx = 4 + *L00001BCE;
    es = *L00001BC6;
    bx = 4 + *L00001BCE;
    es = *L00001BC6;
    *%es:bx] = *%es:bx] + 1;
    (save)8 + *L00001D70;
    (save)0x21d0;
    L00000855();
    goto L00003BDA;
    *L0000209E = 1;
    (save)0x14 + *L00001F36;
    (save)0x21d0;
    L00000855();
    L000037C8();
    (save)0x2dfe;
    (save)0x2306;
    L00000855();
    (save)0x2306;
    L00000855();
    (save)0x2306;
    L00000855();
    (save)8;
    (save)L00000855();
    (save)0x2e26;
    (save)L00000855();
    (save)0x230a;
    L00000855();
    (save)0x230a;
    L00000855();
    (save)0x230a;
    L00000855();
    bx = 0x2b5a;
    L00000855();
    bx = 0x2266;
    L00000855();
    (save)dx;
    (save)L00000855();
    si = 0x1b96;
    bx = 0x26 + *L00001BA0;
    es = *L00001B98;
    ax = *%es:bx] - *L00001ADA;
    asm("cwd");
    (save)dx;
    (save)ax;
    L00000855();
    L00000855();
    bx = 0x2e40;
    L00000855();
    L00000855();
    *L00001F06 = L00000855();
    bx = 0x26 + *(si + 0xa);
    es = *(si + 2);
    ax = *%es:bx];
    *(bp - 0xc) = bx;
    L00000855();
    bx = 0x2266;
    L00000855();
    bx = 0x2940;
    L00000855();
    L00000855();
    bx = 0x2a66;
    L00000855();
    *L00001F08 = L00000855();
    (save)0x2e48;
    (save) *L00001F06;
    (save)L00000855();
    (save)L00000855();
    (save)0x2e62;
    (save)L00000855();
    (save)0x230e;
    L00000855();
    (save)0x230e;
    L00000855();
    (save)0x230e;
    L00000855();
    bx = 0x26 + *L00001BA0;
    es = *L00001B98;
    if(*%es:bx] > *L00001ADA) {
    } else {
        *L00002312 = 0x13;
        (save)0x2312;
        L00000715();
        (save)0x2e6c;
        (save)0x2314;
        L00000855();
        (save)0x2314;
        L00000855();
        (save)0x2314;
        L00000855();
    }
    (save)0x2e7a;
    (save) *L00001F08;
    (save)L00000855();
    (save)L00000855();
    (save)0x2e96;
    (save)L00000855();
    (save)0x2318;
    L00000855();
    (save)0x2318;
    L00000855();
    (save)0x2318;
    L00000855();
    es = *L00001B3C;
    si = 8 + *L00001B44;
    if(*%es:bx] == 0) {
    } else {
        si = 0x1b3a;
        es = *L00001B3C;
        ax = *%es:bx];
        dx = 8 + *L00001B44;
        es = *L00001B3C;
        di = 8 + *L00001B44;
        cx = 0;
        if(*%es:bx] > 0x63) {
            ecx = -1 & 65535;
        }
        cx = cx + ax + 1;
        bx = 8 + *(si + 0xa);
        es = *(si + 2);
        *%es:bx] = cx;
        si = 0x1b3a;
        es = *L00001B3C;
        di = 8 + *L00001B44;
        ax = 0;
        if(*%es:bx] > 6) {
            eax = -1 & 65535;
        }
        es = *(si + 2);
        si = 8 + *(si + 0xa);
        cx = 0;
        if(*%es:bx] < 0x63) {
            ecx = -1 & 65535;
        }
        if((cx & ax) == 0) {
        } else {
            *L0000231C = 0x1b;
            (save)0x231c;
            L00000855();
            *L0000231E = 7;
            *L00002320 = 0xe;
            (save)0x231e;
            (save)0x2320;
            L00000855();
            (save)0x2ea0;
            (save)0x2322;
            L00000855();
            (save)0x2322;
            L00000855();
            (save)0x2322;
            L00000855();
        }
    }
    L00003926();
    *L00002326 = 0x64;
    *L00002328 = 3;
    *L0000232A = 2;
    *L0000232C = 0;
    (save)0x2326;
    (save)0x2328;
    (save)0x232a;
    (save)0x232c;
    L00000855();
    L00000855();
    if(*L00001E22 != 0) {
    } else {
        ax = L00003AF8();
        goto L0000348d;
    }
    if(*L00001E22 != 1) {
    } else {
        ax = *L00001F06;
        *L00001F02 = ax;
        asm("cwd");
        (save)dx;
        (save)ax;
        (save) *L00001AD4;
        (save) *L00001AD2;
        L00000855();
        <= ? L000032d6 : ;
        goto L0000395f;
    }
    *L00001F06 = *L00001F08;
    (save)0xc + *L00001D70;
    (save)0x21d0;
    L00000855();
    es = *L00001B3C;
    si = 8 + *L00001B44;
    if(*%es:bx] != 0) {
    } else {
        (save)0x2ebc;
        (save)0x21d0;
        (save)L00000855();
        (save)0x232e;
        L00000855();
        (save)0x232e;
        L00000855();
        (save)0x232e;
        L00000855();
        goto L00003AF8;
    }
    ax = *L00001F06;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L00001AD4;
    (save) *L00001AD2;
    L00000855();
    L00000855();
    bx = 0x21f2;
    L00000855();
    bx = 0x2eda;
    L00000855();
    bx = 0x21f2;
    L00000855();
    L00000855();
    < ? L0000336f : ;
    goto L00003382;
    bx = 0x21f2;
    L00000855();
    *L0000209E = L00000855();
    goto L00003388;
L00003382:
    *L0000209E = 0x7d00;
L00003388:
    (save)0x2ede;
    (save)0x21d0;
    L00000855();
    L00003996();
    ax = *L00002288;
    if(ax == 0) {
    } else {
        return;
    }
    bx = 6 + *L00001BCE;
    es = *L00001BC6;
    if(*%es:bx] + *L00001F02 <= 0x28) {
    } else {
        L00003D7D();
        ax = *L00001F06;
        asm("imul word [0x1f02]");
        asm("cwd");
        ax = ax + *L00001AD2;
        asm("adc dx,[0x1ad4]");
        *L00001AD2 = ax;
        *L00001AD4 = dx;
        ax = L00003A79();
        goto L0000348d;
    }
    bx = 6 + *L00001BCE;
    es = *L00001BC6;
    bx = 6 + *L00001BCE;
    es = *L00001BC6;
    *%es:bx] = *%es:bx] + *L00001F02;
    bx = 8 + *L00001B44;
    es = *L00001B3C;
    *%es:bx] = 0x63;
    L00000139();
    ax = L00003BD4();
    goto L0000348d;
    if(*L00001F06 <= 0) {
    } else {
        bx = 0x26 + *L00001BA0;
        es = *L00001B98;
        *L00001ADA = *%es:bx];
        (save)0x2eee;
        (save)0x2332;
        L00000855();
        (save)0x2332;
        L00000855();
        (save)0x2332;
        L00000855();
        *L00002336 = 0x1b;
        (save)0x2336;
        L00000855();
        *L00002338 = 0xc8;
        (save)0x2338;
        L00000855();
        ax = *L00001F06;
        asm("cwd");
        ax = ax - *L00001AD2;
        asm("sbb dx,[0x1ad4]");
        ax = ~ax;
        asm("adc dx,+0x0");
        *L00001AD2 = ax;
        *L00001AD4 = ~dx;
    }
    ax = L00003A79();
L0000348d:
    es = *L00001B98;
    si = 0x24 + *L00001BA0;
    if(*%es:bx] != 0) {
    } else {
        return;
    }
    es = *L00001B98;
    si = 0x24 + *L00001BA0;
    ax = 0;
    if(*%es:bx] == 1) {
        eax = -1 & 65535;
    }
    cx = 0;
    if(*L00001F22 != 0xb) {
        ecx = -1 & 65535;
    }
    if((cx & ax) == 0) {
    } else {
        (save)0x2f06;
        (save)0x233a;
        L00000855();
        (save)0x233a;
        L00000855();
        (save)0x233a;
        L00000855();
        goto L00000121;
    }
    es = *L00001B98;
    si = 0x24 + *L00001BA0;
    ax = 0;
    if(*%es:bx] != 1) {
        eax = -1 & 65535;
    }
    es = *L00001BC6;
    si = 0x1c + *L00001BCE;
    cx = 0;
    if(*%es:bx] < 4) {
        ecx = -1 & 65535;
    }
    if((cx & ax) == 0) {
    } else {
        (save)0x2f28;
        (save)0x233e;
        L00000855();
        (save)0x233e;
        L00000855();
        (save)0x233e;
        L00000855();
        goto L00000121;
    }
    es = *L00001B98;
    si = 0x24 + *L00001BA0;
    if(*%es:bx] != 3) {
    } else {
        (save)0x2f4e;
        (save)0x2342;
        L00000855();
        (save)0x2342;
        L00000855();
        (save)0x2342;
        L00000855();
        goto L00000121;
    }
    return(L00000000());
    (save)0x2f70;
    (save)0x21d0;
    L00000855();
    if(*L00001F02 != 0xd8) {
    } else {
        (save)0x2f7e;
        (save)0x21d0;
        L00000855();
    }
    (save)0x2658;
    (save)0x24 + *L00001F36;
    (save)L00000855();
    (save)0x2f8c;
    (save)L00000855();
    (save)0x2346;
    L00000855();
    (save)0x2346;
    L00000855();
    (save)0x2346;
    L00000855();
    (save)0x2fa2;
    (save)0x21d0;
    (save)L00000855();
    (save)0x2fb4;
    (save)L00000855();
    (save)0x234a;
    L00000855();
    (save)0x234a;
    L00000855();
    (save)0x234a;
    L00000855();
    ax = L00003E85();
    if(*L00001E22 != 1) {
    } else {
        return;
    }
    L00000855();
    L00000855();
    *L00001F20 = *L0000234E;
    (save)0x2fba;
    ax = 0;
    if(*L00001F02 == 0xd8) {
        eax = -1 & 65535;
    }
    (save)0x31 - ax;
    (save)L00000855();
    (save)L00000855();
    (save)0x2fc2;
    (save)L00000855();
    (save)0x21d0;
    L00000855();
    (save)0x21d0;
    L00000855();
    (save)0x21d0;
    L00000855();
    *L00001AEE = 0;
    (save)0x2b1c;
    (save)0x21d0;
    L00000855();
    ax = 0;
    if(*L00001F22 == 2) {
        eax = -1 & 65535;
    }
    cx = 0;
    if(*L00001F22 == 9) {
        ecx = -1 & 65535;
    }
    if((cx | ax) == 0) {
    } else {
        (save)0x2b0c;
        (save)0x21d0;
        L00000855();
        *L00001AEE = 1;
    }
    (save)0x2fca;
    (save)0x20 + *L00001F36;
    (save)L00000855();
    (save)0x2fd4;
    (save)L00000855();
    (save)0x2350;
    L00000855();
    (save)0x2350;
    L00000855();
    (save)0x2350;
    L00000855();
    (save)0x21d0;
    (save)0x2fdc;
    (save)L00000855();
    (save)0x2354;
    L00000855();
    (save)0x2354;
    L00000855();
    (save)0x2354;
    L00000855();
    (save)0x2ff2;
    (save)0x2358;
    L00000855();
    (save)0x2358;
    L00000855();
    (save)0x2358;
    L00000855();
    L00000855();
    ax = L00003E85();
    if(*L00001E22 != 1) {
    } else {
        return;
    }
    *L00001F02 = 0x32;
    ax = *L00001F02;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L00001AD4;
    (save) *L00001AD2;
    L00000855();
    <= ? L0000377a : ;
    goto L0000395f;
    L00000855();
    L00000855();
    *L00001F20 = *L0000234E;
    (save)0x300c;
    (save)0x235c;
    L00000855();
    (save)0x235c;
    L00000855();
    (save)0x235c;
    L00000855();
    (save)0x301c;
    (save)0x2360;
    L00000855();
    (save)0x2360;
    L00000855();
    (save)0x2360;
    L00000855();
}

/*	Procedure: 0x000037C8 - 0x00003864
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L000037C8()
{



    *L00002364 = 0x17;
    *L00002366 = 0;
    *L00002368 = 0x12;
    (save)0x209e;
    (save)0x2364;
    (save)0x2366;
    (save)0x2368;
    L00000855();
    (save) *L00001AD4;
    (save) *L00001AD2;
    (save)L00000855();
    (save)0x236a;
    L00000855();
    cx = 2;
    (save)0x236a;
    ax = L00000855();
    asm("cwd");
    *L00003028 = *L00003028 / *L00003028;
    dx = *L00003028 % *L00003028;
    *L0000236E = ~(ax - 0xf);
    *L00002370 = 0x12;
    (save)0x236e;
    (save)0x2370;
    L00000855();
    (save)0x302a;
    (save)0x236a;
    (save)L00000855();
    (save)0x2b7e;
    (save)L00000855();
    (save)0x2372;
    L00000855();
    (save)0x2372;
    L00000855();
    (save)0x2372;
    L00000855();
}

/* DEST BLOCK NOT FOUND: 00003874 -> 000038ec */
stack space not deallocated on return
/*	Procedure: 0x00003865 - 0x000038EB
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003865()
{



    (save)0x21d0;
    (save)0x2b18;
    ax = L00000855();
    != ? 0x3877 : ;
    goto L000038EC;
    (save)0x3036;
    (save)0x2376;
    L00000855();
    (save)0x2376;
    L00000855();
    (save)0x2376;
    L00000855();
    cx = 2;
    (save)0x21d0;
    ax = L00000855();
    asm("cwd");
    *L00003028 = *L00003028 / *L00003028;
    dx = *L00003028 % *L00003028;
    *L0000237A = ~(ax - 0x13);
    (save)0x237a;
    L00000715();
    (save)0x2b7e;
    (save)0x21d0;
    (save)L00000855();
    (save)0x2b7e;
    (save)L00000855();
    (save)0x237c;
    L00000855();
    (save)0x237c;
    L00000855();
    return(L00000855(0x237c));
}

stack space not deallocated on return
/*	Procedure: 0x000038EC - 0x00003925
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L000038EC()
{



    (save)0x303c;
    (save)0xe;
    (save)L00000855();
    (save)L00000855();
    (save)0x304c;
    (save)L00000855();
    (save)0x2380;
    L00000855();
    (save)0x2380;
    L00000855();
    return(L00000855(0x2380));
}

/* DEST BLOCK NOT FOUND: 00003962 -> 00003a79 */
/* DEST BLOCK NOT FOUND: 00003993 -> 00000118 */
stack space not deallocated on return
/*	Procedure: 0x00003926 - 0x00003964
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003926()
{



    (save)0x3056;
    (save)0x2384;
    L00000855();
    (save)0x2384;
    L00000855();
    return(L00000855(0x2384));
    ax = *L00001F02;
    asm("cwd");
    ax = L00000855( *L00001AD2, *L00001AD4, ax, dx);
    <= ? L0000395e : ;
    goto L0000395f;
    return;
L0000395f:
    L00003965();
    goto L00003A79;
}

/* DEST BLOCK NOT FOUND: 00003993 -> 00000118 */
/*	Procedure: 0x00003965 - 0x00003995
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003965()
{



    (save)0x307a;
    (save)0x2388;
    L00000855();
    (save)0x2388;
    L00000855();
    (save)0x2388;
    L00000855();
    *L0000238C = 0x11;
    (save)0x238c;
    L00000855();
    goto L00000118;
}

/* DEST BLOCK NOT FOUND: 000039a1 -> 0000395f */
/* DEST BLOCK NOT FOUND: 00003a35 -> 00003af8 */
/* DEST BLOCK NOT FOUND: 00003a51 -> 0000395f */
/* DEST BLOCK NOT FOUND: 00003aa2 -> 0000591b */
stack space not deallocated on return
/*	Procedure: 0x00003996 - 0x00003A78
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003996()
{



    *L00002288 = 1;
    if(*L0000209E < 1) {
        goto L0000395f;
    }
    (save)0x3096;
    (save)0x21d0;
    (save)L00000855();
    (save)0x30ae;
    (save)L00000855();
    (save)0x238e;
    L00000855();
    (save)0x238e;
    L00000855();
    (save)0x238e;
    L00000855();
    (save)0x30b4;
    (save)0x2392;
    L00000855();
    (save)0x2392;
    L00000855();
    (save)0x2392;
    L00000855();
    (save)0x30c8;
    (save)0x2396;
    L00000855();
    (save)0x2396;
    L00000855();
    (save)0x2396;
    L00000855();
    *L0000239A = ~( *L0000209E);
    (save)0x239a;
    *L0000239C = L00000855();
    ax = *L0000239C;
    *L00001F02 = ax;
    if(*L00001F02 == 0) {
        goto L00003AF8;
    }
    ax = *L00001F06;
    asm("imul word [0x1f02]");
    asm("cwd");
    ax = L00000855( *L00001AD2, *L00001AD4, ax, dx);
    <= ? L00003a54 : ;
    goto L0000395f;
    ax = *L00001F06;
    asm("imul word [0x1f02]");
    asm("cwd");
    ax = ax - *L00001AD2;
    asm("sbb dx,[0x1ad4]");
    ax = ~ax;
    asm("adc dx,+0x0");
    *L00001AD2 = ax;
    *L00001AD4 = ~dx;
    *L00002288 = 0;
}

/* DEST BLOCK NOT FOUND: 00003aa2 -> 0000591b */
/*	Procedure: 0x00003A79 - 0x00003AA9
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003A79()
{



L00003a79:
    L00000855();
    L00000593();
    *L0000239E = 0;
    *L000023A0 = 0;
    (save)0x239e;
    (save)0x23a0;
    L00000715();
    L000003EF();
    L00000855();
    goto L0000591b;
    L00000118();
    goto L00003A79;
}

stack space not deallocated on return
/*	Procedure: 0x00003AAA - 0x00003AF7
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003AAA()
{



    (save)8;
    (save)L00000855();
    (save)0x30e0;
    (save)L00000855();
    (save)0x23a2;
    L00000855();
    (save)0x23a2;
    L00000855();
    (save)0x23a2;
    L00000855();
    *L000023A6 = 1;
    *L000023A8 = 1;
    (save)0x23a6;
    (save)0x23a8;
    L00000855();
    return(L00000855());
}

/* DEST BLOCK NOT FOUND: 00003b8a -> 00003a79 */
/* DEST BLOCK NOT FOUND: 00003b8d -> 00003a9a */
/* DEST BLOCK NOT FOUND: 00003bd1 -> 00003a79 */
/*	Procedure: 0x00003AF8 - 0x00003BD3
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003AF8()
{



    *L000020D0 = 65527;
    (save)0x30fa;
    (save)0x23aa;
    L00000855();
    (save)0x23aa;
    L00000855();
    (save)0x23aa;
    L00000855();
    if(*L00001E20 != 0xc) {
    } else {
        (save)0x3108;
        (save)0x23ae;
        L00000855();
        (save)0x23ae;
        L00000855();
        (save)0x23ae;
        L00000855();
        goto L00003b68;
    }
    (save)0x3112;
    (save)0x23b2;
    L00000855();
    (save)0x23b2;
    L00000855();
    (save)0x23b2;
    L00000855();
L00003b68:
    *L000023B6 = 0x11;
    (save)0x23b6;
    L00000855();
    L00000118();
    if(*L000020D0 != -9) {
    } else {
        *L000020D0 = 0;
        goto L00003A79;
    }
    goto L00003a9a;
    (save)0x3120;
    (save)0x23b8;
    L00000855();
    (save)0x23b8;
    L00000855();
    (save)0x23b8;
    L00000855();
    (save)0x313a;
    (save)0x23bc;
    L00000855();
    (save)0x23bc;
    L00000855();
    (save)0x23bc;
    L00000855();
    L00000118();
    goto L00003A79;
}

/*	Procedure: 0x00003BD4 - 0x00003BD9
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003BD4()
{



    *L000020D0 = 65527;
}

/* DEST BLOCK NOT FOUND: 00003c66 -> 00003a79 */
/* DEST BLOCK NOT FOUND: 00003c69 -> 00003a9a */
/*	Procedure: 0x00003BDA - 0x00003C6B
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003BDA()
{



    L00000855();
    L00000855();
    (save)0x21d0;
    L00000855();
    if(*L00001E20 != 0xd) {
    } else {
        (save)0x3150;
        (save)0x23c0;
        L00000855();
        (save)0x23c0;
        L00000855();
        (save)0x23c0;
        L00000855();
        *L000023C4 = 0x10;
        (save)0x23c4;
        L00000855();
    }
    if(*L00001E20 != 0xc) {
    } else {
        (save)0x3160;
        (save)0x23c6;
        L00000855();
        (save)0x23c6;
        L00000855();
        (save)0x23c6;
        L00000855();
    }
    L00000139();
    L00000855();
    if(*L000020D0 != -9) {
    } else {
        *L000020D0 = 0;
        goto L00003A79;
    }
    goto L00003a9a;
}

/* DEST BLOCK NOT FOUND: 00003d7a -> 00004740 */
stack space not deallocated on return
/*	Procedure: 0x00003C6C - 0x00003D7C
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003C6C()
{



    *L000023CA = 2;
    *L000023CC = 0x16;
    (save)0x23ca;
    (save)0x23cc;
    L00000855();
    *L000023CE = 2;
    *L000023D0 = 3;
    *L000023D2 = 2;
    *L000023D4 = 0;
    return(L00000855(0x23d4, 0x23d2, 0x23d0, 0x23ce));
    L00000855();
    (save)0x316c;
    (save) *L00001F12;
    (save)L00000855();
    (save)L00000855();
    (save)0x2e62;
    (save)L00000855();
    (save)0x23d6;
    L00000855();
    (save)0x23d6;
    L00000855();
    (save)0x23d6;
    L00000855();
    (save)0x3182;
    (save)0x21d0;
    (save)L00000855();
    (save)0x2aee;
    (save)L00000855();
    (save)0x23da;
    L00000855();
    (save)0x23da;
    L00000855();
    (save)0x23da;
    L00000855();
    L00000855();
    *L000023DE = 0;
    *L000023E0 = 2;
    *L000023E2 = 3;
    *L000023E4 = 1;
    (save)0x23de;
    (save)0x23e0;
    (save)0x23e2;
    (save)0x23e4;
    L00000855();
    if(*L00001E22 != 1) {
    } else {
        *L00001F16 = 0x63;
        L00004A56();
        ax = *L00002228;
        if(ax == 0) {
        } else {
            return;
        }
    }
    *L00001F02 = *L00001F12;
    goto L00004740;
}

stack space not deallocated on return
/*	Procedure: 0x00003D7D - 0x00003DAB
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003D7D()
{



    (save)0x3190;
    (save)0x23e6;
    L00000855();
    (save)0x23e6;
    L00000855();
    (save)0x23e6;
    L00000855();
    *L000023EA = 0x11;
    return(L00000855(0x23ea));
}

/*	Procedure: 0x00003DAC - 0x00003E0A
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003DAC()
{



    *L000023EC = *L0000209E << 1;
    for(ax = 0; 1; ax = *L000020D0 + 1) {
        *L000020D0 = ax;
        if(ax > *L000023EC) {
            break;
        }
        cx = 2;
        asm("cwd");
        dx = cx / cx % cx / cx;
        *(bp - 0xc) = ax;
        L00000855();
        L00000855();
        ax = *(bp - 0xc);
        L00000855();
        L00000855();
        ax = 0;
        != ? 0x3de2 : ;
        eax = -1 & 65535;
        *L000023EE = ax;
        (save)0x23ee;
        L00000855();
        *L000023F0 = 0x63;
        L00000855(0x23f0);
    }
}

/* DEST BLOCK NOT FOUND: 00003e59 -> 00003a9a */
/* DEST BLOCK NOT FOUND: 00003e62 -> 00003a79 */
/*	Procedure: 0x00003E0B - 0x00003E64
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003E0B()
{



    ax = 0;
    if(*L00001F2A > 0) {
        eax = -1 & 65535;
    }
    cx = 0;
    if(*L000020B0 > 0) {
        ecx = -1 & 65535;
    }
    if((cx | ax) == 0) {
    } else {
        *L00002204 = 0;
        return;
    }
    *L00002204 = 1;
    (save)0x31b2;
    (save)0x23f2;
    L00000855();
    (save)0x23f2;
    L00000855();
    (save)0x23f2;
    L00000855();
    L00000118();
    goto L00003a9a;
    L00003E65();
    L00000118();
    goto L00003A79;
}

stack space not deallocated on return
/*	Procedure: 0x00003E65 - 0x00003E84
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003E65()
{



    (save)0x31d6;
    (save)0x23f6;
    L00000855();
    (save)0x23f6;
    L00000855();
    return(L00000855(0x23f6));
}

/* DEST BLOCK NOT FOUND: 000041dd -> 00004828 */
/* DEST BLOCK NOT FOUND: 000042d6 -> 00004828 */
/* DEST BLOCK NOT FOUND: 00004355 -> 00004828 */
stack space not deallocated on return
/*	Procedure: 0x00003E85 - 0x0000446A
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00003E85()
{



    *L000023FA = 0;
    *L000023FC = 2;
    *L000023FE = 3;
    *L00002400 = 0;
    return(L00000855(0x2400, 0x23fe, 0x23fc, 0x23fa));
    L00000855();
    *L0000209E = 2;
    (save)0x18 + *L00001F36;
    (save)0x31f6;
    (save)L00000855();
    (save)0x21d0;
    L00000855();
    L000037C8();
    *L00001E22 = 0;
    L00004900();
    (save)8;
    (save)L00000855();
    (save)0x3208;
    (save)L00000855();
    (save)0x2402;
    L00000855();
    (save)0x2402;
    L00000855();
    (save)0x2402;
    L00000855();
    (save)8;
    (save)L00000855();
    (save)0x3218;
    (save)L00000855();
    (save)0x2406;
    L00000855();
    (save)0x2406;
    L00000855();
    (save)0x2406;
    L00000855();
    (save)0x3226;
    (save)0x240a;
    L00000855();
    (save)0x240a;
    L00000855();
    (save)0x240a;
    L00000855();
    *L0000240E = 0x64;
    *L00002410 = 3;
    *L00002412 = 3;
    *L00002414 = 0;
    (save)0x240e;
    (save)0x2410;
    (save)0x2412;
    (save)0x2414;
    L00000855();
    if(*L00001E22 == 0) {
        goto L0000481e;
    }
    *L00002416 = 2;
    *L00002418 = 0x17;
    *L0000241A = 0;
    *L0000241C = 0xb;
    (save)0x2416;
    (save)0x2418;
    (save)0x241a;
    (save)0x241c;
    L00000855();
    *L0000241E = 0;
    *L00002420 = 0xd;
    (save)0x241e;
    (save)0x2420;
    L00000855();
    (save)0x3242;
    (save)0x21d0;
    L00000855();
    if(*L00001E22 != 2) {
    } else {
        (save)0x2b1c;
        (save)0x21d0;
        L00000855();
    }
    L00004997();
    ax = *L00002228;
    if(ax == 0) {
    } else {
        return;
    }
    *L00002422 = 2;
    *L00002424 = 0x17;
    *L00002426 = 0;
    *L00002428 = 0xe;
    (save)0x2422;
    (save)0x2424;
    (save)0x2426;
    (save)0x2428;
    L00000855();
    L00000855();
    *L0000242A = 0;
    *L0000242C = 6;
    (save)0x242a;
    (save)0x242c;
    L00000855();
    L00000855();
    L0000491F();
    (save)0x324c;
    (save)0x21d0;
    L00000855();
    L00003865();
    (save)( *L00001F06 << 1 << 1) + *L00001CE6;
    (save)0x2b7e;
    (save)L00000855();
    (save)( *L00001F04 << 1 << 1) + *L00001D14;
    (save)L00000855();
    (save)0x21d0;
    L00000855();
    L00001F51();
    ax = *L0000209E;
    L00000855();
    bx = 0x2b76;
    L00000855();
    ax = *L00001ADE;
    L00000855();
    L00000855();
    L00000855();
    bx = 0x2b7a;
    L00000855();
    L00000855();
    ax = L00000855();
    *L00001F12 = ax;
    if(*L00001F12 <= *L0000209E) {
    } else {
        *L00001F12 = *L0000209E;
    }
    ax = 0x8c;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0xc) = L00000855();
    L00000855();
    bx = 0x2c26;
    L00000855();
    bx = 0x325e;
    L00000855();
    ax = *L00001F12;
    L00000855();
    L00000855();
    (save)dx;
    (save)L00000855();
    L00000855();
    L00000855();
    L00000855();
    *L00001F0C = L00000855();
    *L00001F08 = 0;
    *L00001F0E = 0;
    ax = *L00001F12;
    L00000855();
    bx = 0x3262;
    L00000855();
    *L00001F12 = L00000855();
    *L0000242E = 0;
    L0000446B();
    if(*L00002228 != 0) {
        goto L0000481e;
    }
    ax = *L0000242E;
    if(ax == 0) {
    } else {
        return;
    }
    ax = *L00001F12;
    L00000855();
    bx = 0x3262;
    L00000855();
    *L00001F12 = L00000855();
    ax = *L00001F0C;
    L00000855();
    bx = 0x3262;
    L00000855();
    ax = *L00001F02;
    L00000855();
    L00000855();
    >= ? L000041ca : ;
    goto L00004740;
    ax = *L00001F02 - *L00001F12;
    cx = *L00001F12 - *L00001F0C;
    if(ax > cx) {
        goto L00004828;
    }
    *L00001F0A = *L00001F02 - *L00001F0C;
    *L00001F0E = *L00001F02;
    ax = *L00001F12;
    asm("cwd");
    *L00001F0A = *L00001F0A / *L00001F0A;
    dx = *L00001F0A % *L00001F0A;
    *L00001F1A = ax;
    if(ax <= 2) {
    } else {
        *L00001F1A = 2;
    }
    ax = *L00001F0C;
    L00000855();
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0xc) = L00000855();
    L00000855();
    bx = 0x3266;
    L00000855();
    bx = 0x278c;
    L00000855();
    ax = *L00001F1A;
    L00000855();
    L00000855();
    L00000855();
    L00000855();
    *L00001F0C = L00000855();
    *L00001F12 = *L00001F0A;
    ax = *L00001F0E;
    if(ax > *L00001F0C) {
    } else {
        *L00001F0C = ax - 1;
    }
L0000426d:
    L0000446B();
    if(*L00002228 != 0) {
        goto L0000481e;
    }
    ax = *L0000242E;
    if(ax == 0) {
    } else {
        return;
    }
    ax = *L00001F0E;
    cx = 0;
    if(ax == *L00001F02) {
        ecx = -1 & 65535;
    }
    dx = 0;
    if(ax < *L00001F02) {
    }
    bx = 0x326a;
    *(bp - 0xc) = cx;
    *(bp - 0xe) = dx;
    L00000855();
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0x10) = L00000855();
    L00000855();
    L00000855();
    ax = 0;
    if(!(edx = -1 & 65535)) {
        eax = -1 & 65535;
    }
    if((ax & *(bp - 0xe) | *(bp - 0xc)) != 0) {
        goto L00004828;
    }
    *L00001F10 = *L00001F0E - *L00001F02;
    if(*L00001F0E != 0) {
    } else {
        (save) *L0000278E;
        (save) *L0000278C;
        *(bp - 0xc) = L00000855();
        L00000855();
        bx = 0x2940;
        L00000855();
        *L00001F10 = L00000855();
    }
    cx = 0;
    if(*L00001F02 == *L00001F0E) {
    }
    bx = 0x326e;
    *(bp - 0xc) = cx;
    L00000855();
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0xe) = L00000855();
    L00000855();
    L00000855();
    ax = 0;
    if(!(ecx = -1 & 65535)) {
        eax = -1 & 65535;
    }
    if((ax & *(bp - 0xc)) != 0) {
        goto L00004828;
    }
    ax = *L00001F12;
    L00000855();
    bx = 0x264a;
    L00000855();
    ax = *L00001F10;
    L00000855();
    L00000855();
    < ? L0000437a : ;
    goto L00004392;
    ax = *L00001F10;
    L00000855();
    bx = 0x3272;
    L00000855();
    *L00001F10 = L00000855();
L00004392:
    *L00001F0E = *L00001F02;
    ax = *L00001F0C;
    L00000855();
    ax = *L00001F10;
    L00000855();
    bx = 0x3276;
    L00000855();
    L00000855();
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0xc) = L00000855();
    L00000855();
    ax = *L00001F10;
    L00000855();
    L00000855();
    bx = 0x327a;
    L00000855();
    L00000855();
    L00000855();
    ax = L00000855();
    *L00001F0A = ax;
    dx = 0;
    if(*L00001F0A >= *L00001F0E + -2) {
    }
    bx = 0x326a;
    *(bp - 0xe) = dx;
    L00000855();
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0x10) = L00000855();
    L00000855();
    L00000855();
    ax = 0;
    if(!(edx = -1 & 65535)) {
        eax = -1 & 65535;
    }
    if((ax & *(bp - 0xe)) != 0) {
        goto L00004740;
    }
    if(*L00001F0E > *L00001F0A) {
    } else {
        *L00001F08 = 1;
        goto L0000426d;
    }
    ax = *L00001F0A;
    *L00001F0C = ax;
    if(*L00001F0E - *L00001F0C >= 3) {
    } else {
        *L00001F08 = 1;
    }
    goto L0000426d;
}

stack space not deallocated on return
/*	Procedure: 0x0000446B - 0x00004886
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0000446B()
{



    L00004887();
    (save)0x2b18;
    (save)0x236a;
    L00000855();
    ax = 0xa;
    asm("imul word [0x1f0e]");
    bx = ax;
    asm("cwd");
    *L00001F12 = *L00001F12 / *L00001F12;
    dx = *L00001F12 % *L00001F12;
    cx = 0;
    if(ax > 0xd) {
        ecx = -1 & 65535;
    }
    ax = bx;
    asm("cwd");
    *L00001F0C = *L00001F0C / *L00001F0C;
    dx = *L00001F0C % *L00001F0C;
    dx = 0;
    if(ax > 0xe) {
        edx = -1 & 65535;
    }
    if((dx & cx) == 0) {
    } else {
        (save)0x327e;
        (save)0x236a;
        L00000855();
    }
    if(*L00001F0E <= 0) {
    } else {
        (save) *L00001F0E;
        (save)L00000855();
        (save)0x3286;
        (save)L00000855();
        (save)0x236a;
        (save)L00000855();
        (save)0x328e;
        (save)L00000855();
        (save)0x2430;
        L00000855();
        (save)0x2430;
        L00000855();
        (save)0x2430;
        L00000855();
    }
    (save)0x329c;
    (save) *L00001F0C;
    (save)L00000855();
    (save)L00000855();
    (save)0x32aa;
    (save)L00000855();
    (save)0x2434;
    L00000855();
    (save)0x2434;
    L00000855();
    (save)0x2434;
    L00000855();
    (save)0x32bc;
    (save)0x21d0;
    (save)L00000855();
    (save)0x2438;
    L00000855();
    (save)0x2438;
    L00000855();
    (save)0x2438;
    L00000855();
    if(*L00001F08 != 1) {
    } else {
        (save)0x32c2;
        (save)0x243c;
        L00000855();
        (save)0x243c;
        L00000855();
        (save)0x243c;
        L00000855();
    }
    L00000855();
    L00000855();
    *L00002440 = 1;
    *L00002442 = 2;
    (save)0x2440;
    (save)0x2442;
    L00000855();
    *L00002444 = 0;
    *L00002446 = 2;
    *L00002448 = 3;
    *L0000244A = 1;
    (save)0x2444;
    (save)0x2446;
    (save)0x2448;
    (save)0x244a;
    L00000855();
    if(*L00001E22 != 0) {
    } else {
        *L00001F02 = *L00001F0C;
        goto L00004740;
    }
    if(*L00001F08 == 1) {
    } else {
        L00004887();
        (save)0x32d6;
        (save) *L00001F0C;
        (save)L00000855();
        (save)L00000855();
        (save)0x244c;
        L00000855();
        (save)0x244c;
        L00000855();
        (save)0x244c;
        L00000855();
        if(*L00001F0E <= 0) {
        } else {
            (save)0x32ec;
            (save) *L00001F0E;
            (save)L00000855();
            (save)L00000855();
            (save)0x2450;
            L00000855();
            (save)0x2450;
            L00000855();
            (save)0x2450;
            L00000855();
        }
        *L00002454 = 2;
        *L00002456 = 0x11;
        (save)0x2454;
        (save)0x2456;
        L00000855();
        (save)0x3300;
        (save)0x2458;
        L00000855();
        (save)0x2458;
        L00000855();
        (save)0x2458;
        L00000855();
        *L0000245C = 0;
        (save)0x245c;
        *L0000245E = L00000855();
        *L00001F02 = *L0000245E;
        if(*L00001F02 != 0) {
        } else {
            (save)0x3328;
            (save)0x2460;
            L00000855();
            (save)0x2460;
            L00000855();
            (save)0x2460;
            L00000855();
            *L00002228 = 1;
            return(L00000118());
        }
        ax = *L00001F12;
        cx = 0;
        if(ax == *L00001F02) {
            ecx = -1 & 65535;
        }
        dx = 0;
        if(ax > *L00001F02) {
        }
        bx = 0x326a;
        *(bp - 0xc) = cx;
        *(bp - 0xe) = dx;
        L00000855();
        (save) *L0000278E;
        (save) *L0000278C;
        *(bp - 0x10) = L00000855();
        L00000855();
        L00000855();
        ax = 0;
        if(!(edx = -1 & 65535)) {
            eax = -1 & 65535;
        }
        ax = ax & *(bp - 0xe) | *(bp - 0xc);
        if(ax != 0) {
        } else {
            return;
        }
L00004740:
        L000048B4();
        *L00002464 = 0x10;
        (save)0x2464;
        L00000855();
        (save)0x333e;
        (save)0x2466;
        L00000855();
        (save)0x2466;
        L00000855();
        (save)0x2466;
        L00000855();
        (save)( *L00001F04 << 1 << 1) + *L00001D14;
        (save)0x3352;
        (save)L00000855();
        (save) *L00001F02;
        (save)L00000855();
        (save)L00000855();
        (save)0x3360;
        (save)L00000855();
        (save)0x246a;
        L00000855();
        (save)0x246a;
        L00000855();
        (save)0x246a;
        L00000855();
        L00000118();
        ax = *L00001F02;
        asm("cwd");
        ax = ax + *L00001AD2;
        asm("adc dx,[0x1ad4]");
        *L00001AD2 = ax;
        *L00001AD4 = dx;
        bx = ( *L00001F16 << 1) + *L00001B16;
        es = *L00001B0E;
        *%es:bx] = 0;
        if(*L00001AFC != *L00001F16) {
        } else {
            *L00001AFC = 0x63;
            *L00001AFE = 0;
        }
        if(*L00001AEA != *L00001F16) {
        } else {
            *L00001AEA = 0x63;
            *L00001AEC = 0;
        }
        L00000855();
L0000481e:
        *L0000242E = 1;
        return(L00003A79());
    }
    L00000855();
    L00000855();
    L00000855();
    if(*L00001F08 != 1) {
    } else {
        (save)0x336a;
        (save)0x246e;
        L00000855();
        (save)0x246e;
        L00000855();
        (save)0x246e;
        L00000855();
        goto L00004882;
    }
    (save)0x3386;
    (save)0x2472;
    L00000855();
    (save)0x2472;
    L00000855();
    (save)0x2472;
    L00000855();
L00004882:
    L00000118();
    goto L0000481e;
}

/*	Procedure: 0x00004887 - 0x000048B3
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00004887()
{



    *L00002476 = 1;
    *L00002478 = 0x26;
    *L0000247A = 0xf;
    *L0000247C = 0x17;
    (save)0x2476;
    (save)0x2478;
    (save)0x247a;
    (save)0x247c;
    L00000855();
}

stack space not deallocated on return
/*	Procedure: 0x000048B4 - 0x000048E6
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L000048B4()
{



    L00000855();
    *L0000247E = 2;
    *L00002480 = 0x25;
    *L00002482 = 0x13;
    *L00002484 = 0x17;
    return(L00000855(0x2484, 0x2482, 0x2480, 0x247e));
}

/*	Procedure: 0x000048E7 - 0x000048FF
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L000048E7()
{



    for(ax = 1; 1; ax = *L00002486 + 1) {
        *L00002486 = ax;
        if(ax > 0xf) {
            break;
        }
        L00000855();
    }
}

/*	Procedure: 0x00004900 - 0x0000491E
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00004900()
{



    (save)0x2c58;
    (save)0x2488;
    L00000855();
    (save)0x2488;
    L00000855();
    (save)0x2488;
    L00000855();
}

/* DEST BLOCK NOT FOUND: 00004974 -> 00004996 */
stack space not deallocated on return
/*	Procedure: 0x0000491F - 0x00004996
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0000491F()
{



    (save)7;
    (save)L00000855();
    (save)0x33a8;
    (save)L00000855();
    (save)0x248c;
    L00000855();
    (save)0x248c;
    L00000855();
    (save)0x248c;
    L00000855();
    (save)0x33c4;
    (save)0x2490;
    L00000855();
    (save)0x2490;
    L00000855();
    (save)0x2490;
    ax = L00000855();
    if(*L00001E22 != 0) {
    } else {
        (save)0x33e8;
        (save)0x2494;
        L00000855();
        (save)0x2494;
        L00000855();
        ax = L00000855(0x2494);
    }
}

/* DEST BLOCK NOT FOUND: 00004a1a -> 00004a56 */
/*	Procedure: 0x00004997 - 0x00004A55
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00004997()
{



    *L00001F16 = 0;
    (save)0x340c;
    (save)0x21d0;
    (save)L00000855();
    (save)0x341c;
    (save)L00000855();
    (save)0x2498;
    L00000855();
    (save)0x2498;
    L00000855();
    (save)0x2498;
    L00000855();
    if(*L00001E22 != 1) {
    } else {
        *L00001F0C = *L00001AFC;
        *L00001F0E = *L00001AFE;
        *L00001AFC = 0x63;
        *L0000249C = 1;
        (save)0x249c;
        L00000855();
        *L00001F04 = *L00001AFE;
        *L00001F16 = *L00001AFC;
        *L00001AFC = *L00001F0C;
        *L00001AFE = *L00001F0E;
    }
    if(*L00001E22 != 2) {
        goto L00004A56;
    }
    *L00001F0C = *L00001AEA;
    *L00001F0E = *L00001AEC;
    *L00001AEA = 0x63;
    *L0000249E = 2;
    (save)0x249e;
    L00000855();
    *L00001F04 = *L00001AEC;
    *L00001F16 = *L00001AEA;
    *L00001AEA = *L00001F0C;
    *L00001AEC = *L00001F0E;
}

/* DEST BLOCK NOT FOUND: 00004b68 -> 000050b7 */
/* DEST BLOCK NOT FOUND: 00004d0f -> 00003a79 */
/* DEST BLOCK NOT FOUND: 00004e52 -> 0000395f */
/* DEST BLOCK NOT FOUND: 00004f06 -> 00003a79 */
/* DEST BLOCK NOT FOUND: 00005012 -> 00003a79 */
/* DEST BLOCK NOT FOUND: 0000506a -> 00003a79 */
stack space not deallocated on return
/*	Procedure: 0x00004A56 - 0x0000506C
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00004A56()
{



    *L00002228 = 0;
    if(*L00001F16 >= 0x14) {
    } else {
        bx = ( *L00001F16 << 1) + *L00001B72;
        es = *L00001B6A;
        ax = *%es:bx];
        *L00001F06 = ax;
        return(*L00001F06);
    }
    *L00002228 = 1;
    *L000024A0 = 0x3e7;
    (save)0x24a0;
    L00000855();
    *L000024A2 = 0x11;
    (save)0x24a2;
    L00000855();
    (save)0x3432;
    (save)0xb;
    (save)L00000855();
    (save)L00000855();
    (save)0x343a;
    (save)L00000855();
    (save)0x24a4;
    L00000855();
    (save)0x24a4;
    L00000855();
    (save)0x24a4;
    L00000855();
    L00000118();
    return(L00003A79());
    *L0000209E = 1;
    (save)0x344e;
    (save)0x21d0;
    L00000855();
    L000037C8();
    (save)0x2b06;
    (save)0xa;
    (save)L00000855();
    (save)L00000855();
    (save)0x345a;
    (save)L00000855();
    (save)0x24a8;
    L00000855();
    (save)0x24a8;
    L00000855();
    (save)0x24a8;
    L00000855();
    si = 0x1b96;
    es = *L00001B98;
    di = 0xc + *L00001BA0;
    if(*%es:bx] >= 0) {
    } else {
        bx = 0xa + *(si + 0xa);
        es = *(si + 2);
        *%es:bx] = 0;
    }
    bx = 0xa + *L00001BA0;
    es = *L00001B98;
    si = bx;
    if(*%es:bx] == 0) {
        goto L000050b7;
    }
    (save)0x3472;
    (save)9;
    (save)L00000855();
    (save)L00000855();
    (save)0x347a;
    (save)L00000855();
    bx = 0xa + *L00001BA0;
    es = *L00001B98;
    (save) *%es:bx];
    (save)L00000855();
    (save)L00000855();
    (save)0x3488;
    (save)L00000855();
    (save)0x24ac;
    L00000855();
    (save)0x24ac;
    L00000855();
    (save)0x24ac;
    L00000855();
    bx = 0x1af4;
    L00000855();
    L00000855();
    bx = 0x1af4;
    L00000855();
    (save)0x2c82;
    (save)9;
    (save)L00000855();
    (save)L00000855();
    (save)0x3492;
    (save)L00000855();
    (save)0x24b0;
    L00000855();
    (save)0x24b0;
    L00000855();
    (save)0x24b0;
    L00000855();
    bx = 0x1af4;
    L00000855();
    es = *L00001B98;
    ax = *%es:bx];
    L00000855();
    L00000855();
    if(!( *(bp - 0xc) = 0xc + *L00001BA0)) {
    } else {
        (save)0x34a0;
        (save)0x24b4;
        L00000855();
        (save)0x24b4;
        L00000855();
        (save)0x24b4;
        L00000855();
    }
    bx = 0x1af4;
    L00000855();
    si = 0x1b96;
    es = *L00001B98;
    ax = *%es:bx];
    L00000855();
    L00000855();
    if(!( *(bp - 0xc) = 0xc + *L00001BA0)) {
    } else {
        bx = 0xc + *(si + 0xa);
        es = *(si + 2);
        ax = *%es:bx];
        *(bp - 0xe) = bx;
        L00000855();
        bx = 0x1af4;
        L00000855();
        L00000855();
        bx = sp;
        L00000855();
        (save)L00000855();
        (save)0x2a5c;
        (save)L00000855();
        (save)0x24b8;
        L00000855();
        (save)0x24b8;
        L00000855();
        (save)0x24b8;
        L00000855();
        L000048E7();
        goto L00004d89;
    }
    L000048E7();
    (save) *L00001AD4;
    (save) *L00001AD2;
    ax = 1;
    asm("cwd");
    (save)dx;
    (save)ax;
    L00000855();
    if(!(sp = sp - 4)) {
    } else {
        L00000855();
        L0000506D();
        L00000855();
        L00003AAA();
        goto L00003A79;
    }
    es = *L00001B98;
    ax = *%es:bx];
    L00000855();
    bx = 0x2b84;
    L00000855();
    L00000855();
    bx = 0x278c;
    L00000855();
    ax = L00000855();
    *L00001F16 = ax;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L00001AD4;
    (save) *L00001AD2;
    L00000855();
    if(!( *(bp - 0xc) = 0xa + *L00001BA0)) {
    } else {
        *L00001F16 = *L00001AD2;
        (save) *L00001AD4;
        (save) *L00001AD2;
        ax = 0x1e;
        asm("cwd");
        (save)dx;
        (save)ax;
        L00000855();
        > ? L00004d79 : ;
        goto L00004d89;
        dx = *L00001AD4;
        ax = *L00001AD2 + 65526;
        asm("adc dx,-0x1");
        *L00001F16 = ax;
    }
L00004d89:
    (save)0x34aa;
    (save)0x24bc;
    L00000855();
    (save)0x24bc;
    L00000855();
    (save)0x24bc;
    L00000855();
    bx = 0x1af4;
    L00000855();
    es = *L00001B98;
    ax = *%es:bx];
    L00000855();
    L00000855();
    if(!( *(bp - 0xc) = 0xc + *L00001BA0)) {
    } else {
        (save)0x34c4;
        (save) *L00001F16;
        (save)L00000855();
        (save)L00000855();
        (save)0x2d64;
        (save)L00000855();
        (save)0x24c0;
        L00000855();
        (save)0x24c0;
        L00000855();
        (save)0x24c0;
        L00000855();
    }
    bx = 0xa + *L00001BA0;
    es = *L00001B98;
    *L000024C4 = *%es:bx];
    (save)0x24c4;
    *L000024C6 = L00000855();
    si = 0x1b96;
    es = *L00001B98;
    *%es:bx] = *L000024C4;
    ax = *L000024C6;
    *L00001F02 = ax;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L00001AD4;
    (save) *L00001AD2;
    ax = L00000855();
    if(!(bx = 0xa + *L00001BA0)) {
        goto L0000395f;
    }
    si = 0x1b96;
    bx = 0xa + *L00001BA0;
    es = *L00001B98;
    if(*%es:bx] >= *L00001F02) {
    } else {
        bx = 0xa + *(si + 0xa);
        es = *(si + 2);
        *L00001F02 = *%es:bx];
    }
    ax = *L00001F02;
    asm("cwd");
    ax = ax - *L00001AD2;
    asm("sbb dx,[0x1ad4]");
    ax = ~ax;
    asm("adc dx,+0x0");
    *L00001AD2 = ax;
    *L00001AD4 = ~dx;
    bx = 0xa + *L00001BA0;
    es = *L00001B98;
    if(*%es:bx] - *L00001F02 > 0) {
    } else {
        bx = 0xa + *L00001BA0;
        es = *L00001B98;
        *%es:bx] = 0;
        bx = 0xc + *L00001BA0;
        es = *L00001B98;
        *%es:bx] = 65535;
        *L000024C8 = 0x10;
        (save)0x24c8;
        L00000855();
        (save)0x34d8;
        (save)0x24ca;
        L00000855();
        (save)0x24ca;
        L00000855();
        (save)0x24ca;
        L00000855();
        *L000021B8 = 0;
        L00000118();
        goto L00003A79;
    }
    si = 0x1b96;
    es = *L00001B98;
    ax = *%es:bx];
    *(bp - 0xc) = 0xa + *L00001BA0;
    L00000855();
    ax = *L00001F02;
    L00000855();
    bx = 0x2878;
    L00000855();
    L00000855();
    bx = 0xa + *(si + 0xa);
    es = *(si + 2);
    *%es:bx] = L00000855();
    bx = 0x1af4;
    L00000855();
    es = *(si + 2);
    ax = *%es:bx];
    *(bp - 0xe) = bx;
    L00000855();
    L00000855();
    if(!(bx = 0xc + *(si + 0xa))) {
    } else {
        *L000024CE = 0x10;
        (save)0x24ce;
        L00000855();
        (save)0x34ea;
        bx = 0xa + *L00001BA0;
        es = *L00001B98;
        (save) *%es:bx];
        (save)L00000855();
        (save)L00000855();
        (save)0x34f8;
        (save)L00000855();
        (save)0x24d0;
        L00000855();
        (save)0x24d0;
        L00000855();
        (save)0x24d0;
        L00000855();
        bx = 0x2944;
        L00000855();
        es = *L00001B98;
        ax = *%es:bx];
        L00000855();
        bx = 0x1af4;
        L00000855();
        L00000855();
        if(!( *(bp - 0xc) = 0xc + *L00001BA0)) {
        } else {
            (save)0x3504;
            (save)0x24d4;
            L00000855();
            (save)0x24d4;
            L00000855();
            (save)0x24d4;
            L00000855();
        }
        L00000118();
        goto L00003A79;
    }
    if(*L00001F16 > *L00001F02) {
    } else {
        *L000024D8 = 0x10;
        (save)0x24d8;
        L00000855();
        L0000506D();
        goto L00005067;
    }
    (save)0x3518;
    (save)0x24da;
    L00000855();
    (save)0x24da;
    L00000855();
    (save)0x24da;
    L00000855();
    *L000024DE = 0x14;
    (save)0x24de;
    L00000855();
L00005067:
    L00000118();
    goto L00003A79;
}

/* DEST BLOCK NOT FOUND: 000051c1 -> 00003a79 */
/* DEST BLOCK NOT FOUND: 000052c2 -> 00003a79 */
/* DEST BLOCK NOT FOUND: 00005362 -> 00000118 */
/* DEST BLOCK NOT FOUND: 000053f4 -> 0000395f */
/* DEST BLOCK NOT FOUND: 00005608 -> 00003dac */
/* DEST BLOCK NOT FOUND: 0000590c -> 00000179 */
stack space not deallocated on return
/*	Procedure: 0x0000506D - 0x0000590E
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0000506D()
{



    (save)0x352c;
    (save)0x24e0;
    L00000855();
    (save)0x24e0;
    L00000855();
    (save)0x24e0;
    L00000855();
    bx = 0x1af4;
    L00000855();
    bx = 0x3554;
    L00000855();
    ax = L00000855();
    si = 0x1b96;
    bx = 0xc + *L00001BA0;
    es = *L00001B98;
    *%es:bx] = ax;
    *L000021B8 = 0;
    return(*%es:bx]);
    (save)0x3558;
    (save)0x24e4;
    L00000855();
    (save)0x24e4;
    L00000855();
    (save)0x24e4;
    L00000855();
    (save)0x3580;
    (save)0x24e8;
    L00000855();
    (save)0x24e8;
    L00000855();
    (save)0x24e8;
    L00000855();
    ax = 0xc8;
    asm("imul word [0x1ae0]");
    *L00001F16 = ax;
    (save)0x35a4;
    (save) *L00001F16;
    (save)L00000855();
    (save)L00000855();
    (save)0x2e62;
    (save)L00000855();
    (save)0x24ec;
    L00000855();
    (save)0x24ec;
    L00000855();
    (save)0x24ec;
    L00000855();
    (save)0x35c6;
    (save)0x24f0;
    L00000855();
    (save)0x24f0;
    L00000855();
    (save)0x24f0;
    L00000855();
    *L000024F4 = 2;
    *L000024F6 = 0x25;
    *L000024F8 = 0x13;
    *L000024FA = 0x17;
    (save)0x24f4;
    (save)0x24f6;
    (save)0x24f8;
    (save)0x24fa;
    L00000855();
    (save)0x1f16;
    *L000024FC = L00000855();
    ax = *L000024FC;
    *L00001F02 = ax;
    if(*L00001F02 <= *L00001F16) {
    } else {
        (save)0x35e2;
        (save)0x24fe;
        L00000855();
        (save)0x24fe;
        L00000855();
        (save)0x24fe;
        L00000855();
        L00000118();
        goto L00003A79;
    }
    if(*L00001F02 <= 0) {
    } else {
        ax = *L00001F02;
        L00000855();
        bx = 0x3262;
        L00000855();
        si = 0x1b96;
        bx = 0xa + *L00001BA0;
        es = *L00001B98;
        *%es:bx] = L00000855();
        bx = 0x1af4;
        L00000855();
        bx = 0x35f0;
        L00000855();
        bx = 0xc + *(si + 0xa);
        es = *(si + 2);
        *%es:bx] = L00000855();
        ax = *L00001F02;
        asm("cwd");
        ax = ax + *L00001AD2;
        asm("adc dx,[0x1ad4]");
        *L00001AD2 = ax;
        *L00001AD4 = dx;
    }
    (save)0x2c82;
    (save) *L00001F02;
    (save)L00000855();
    (save)L00000855();
    (save)0x35f4;
    (save)L00000855();
    (save)0x2502;
    L00000855();
    (save)0x2502;
    L00000855();
    (save)0x2502;
    L00000855();
    ax = L00000118();
    if(*L00001F02 <= 0) {
    } else {
        *L00002506 = 0x14;
        (save)0x2506;
        L00000855();
        (save)0x3608;
        si = 0x1b96;
        bx = 0xa + *L00001BA0;
        es = *L00001B98;
        (save) *%es:bx];
        (save)L00000855();
        (save)L00000855();
        (save)0x3618;
        (save)L00000855();
        (save)0x2508;
        L00000855();
        (save)0x2508;
        L00000855();
        (save)0x2508;
        L00000855();
        ax = L00000118();
    }
    goto L00003A79;
    (save)0x2b06;
    (save)0x1c + *L00001F36;
    (save)L00000855();
    (save)0x250c;
    L00000855();
    (save)0x250c;
    L00000855();
    (save)0x250c;
    L00000855();
    ax = 9;
    asm("cwd");
    (save)dx;
    (save)ax;
    bx = 0x3630;
    L00000855();
    ax = *L00001AD2;
    dx = *L00001AD4;
    L00000855();
    L00000855();
    (save)dx;
    (save)L00000855();
    L00000855();
    L00000855();
    L00000855();
    bx = 0x3638;
    L00000855();
    *L00001F02 = L00000855();
    if(*L00002510 <= 3) {
    } else {
        (save)0x3640;
        (save)0x2512;
        L00000855();
        (save)0x2512;
        L00000855();
        (save)0x2512;
        L00000855();
        goto L00000118;
    }
    (save)0x3654;
    (save) *L00001F02;
    (save)L00000855();
    (save)L00000855();
    (save)0x2db6;
    (save)L00000855();
    (save)0x2516;
    L00000855();
    (save)0x2516;
    L00000855();
    (save)0x2516;
    L00000855();
    L00000855();
    *L0000251A = 0;
    *L0000251C = 2;
    *L0000251E = 3;
    *L00002520 = 0;
    ax = L00000855(0x2520, 0x251e, 0x251c, 0x251a);
    if(*L00001E22 != 1) {
    } else {
        return;
    }
    ax = *L00001F02;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L00001AD4;
    (save) *L00001AD2;
    ax = L00000855();
    if(!( *L00002510 = *L00002510 + 1)) {
        goto L0000395f;
    }
    L00000855();
    ax = *L00001F02;
    asm("cwd");
    ax = ax - *L00001AD2;
    asm("sbb dx,[0x1ad4]");
    ax = ~ax;
    asm("adc dx,+0x0");
    *L00001AD2 = ax;
    *L00001AD4 = ~dx;
    L000003EF();
    L00000855();
    bx = 0x10 + *L00001BA0;
    es = *L00001B98;
    *L00002522 = *%es:bx];
    (save)0x2522;
    L00000000();
    bx = 0x10 + *L00001BA0;
    es = *L00001B98;
    *%es:bx] = *L00002522;
    L00000855();
    L00000000();
    si = 0x1b96;
    bx = 0x10 + *L00001BA0;
    es = *L00001B98;
    bx = 0x10 + *L00001BA0;
    es = *L00001B98;
    *%es:bx] = *%es:bx] + 1;
    es = *L00001B98;
    di = 0x10 + *L00001BA0;
    if(*%es:bx] <= 0x24) {
    } else {
        bx = 0x10 + *(si + 0xa);
        es = *(si + 2);
        *%es:bx] = 1;
    }
    L0000042D();
    *L00002524 = 0x23;
    *L00002526 = 0x68;
    return(L00000855(0x2526, 0x2524));
    ax = 0;
    goto L000054d8;
L000054b6:
    *L00002528 = 3;
    (save)0x2528;
    L00000855();
    *L0000252A = 0x50;
    (save)0x252a;
    L00000855();
    ax = *L000020D0 + 1;
L000054d8:
    *L000020D0 = ax;
    if(ax <= 5) {
        goto L000054b6;
    }
    (save)0x3672;
    (save)0x252c;
    L00000855();
    (save)0x252c;
    L00000855();
    (save)0x252c;
    L00000855();
    *L0000209E = 0xa;
    L00003DAC();
    L00000855();
    goto L00005557;
L00005510:
    cx = 0x50;
    ax = *L00002194;
    asm("cwd");
    cx = cx / cx;
    dx = cx % cx;
    *L00001B04 = ax;
    ax = *L00002194;
    asm("cwd");
    *L00001B00 = cx / cx % cx / cx;
    *L00002530 = 0;
    (save)0x2530;
    L00000000();
    *L00002532 = 0;
    *L00002534 = 0;
    (save)0x1b00;
    (save)0x1b04;
    (save)0x2532;
    (save)0x2534;
    L00000715();
L00005557:
    ebx = *L00001E34 & 65535;
    *L00002536 = *L00001E2C;
    es = *L00001E2C;
    *L00002538 = *L00001E34 & 65535;
    *L0000253A = 0xc80;
    *L0000253C = 0xd7;
    (save)0x2536;
    (save)0x2538;
    (save)0x253a;
    (save)0x253c;
    *L0000253E = L00000855();
    ax = *L0000253E;
    *L00001F02 = ax;
    if(*L00001F02 == 65535) {
        goto L00005510;
    }
    cx = 0x50;
    ax = *L00001F02;
    asm("cwd");
    cx = cx / cx;
    dx = cx % cx;
    *L00001B04 = ax;
    ax = *L00001F02;
    asm("cwd");
    *L00001B00 = cx / cx % cx / cx;
    L00000571();
    (save)0x3692;
    (save)0x2540;
    L00000855();
    (save)0x2540;
    L00000855();
    (save)0x2540;
    L00000855();
    *L0000209E = 8;
    *L00001F2A = 0;
    *L000020BC = 1;
    L00000715();
    L0000042D();
    *L00002544 = 0x1a;
    (save)0x2544;
    L00000855();
    goto L00003DAC;
    if(*L00002194 == 0) {
    } else {
        (save)0x36b0;
        (save)0x2546;
        L00000855();
        (save)0x2546;
        L00000855();
        (save)0x2546;
        L00000855();
        *L0000254A = 0;
        *L0000254C = 2;
        *L0000254E = 3;
        *L00002550 = 0;
        ax = L00000855(0x2550, 0x254e, 0x254c, 0x254a);
        if(*L00001E22 != 1) {
        } else {
            return;
        }
        L00000855();
        L00000855();
        L00000855();
        (save) *L00001AD4;
        (save) *L00001AD2;
        ax = 0x95;
        asm("cwd");
        (save)dx;
        (save)ax;
        L00000855();
        > ? L00005693 : ;
        goto L000056fb;
        ax = 2;
        asm("cwd");
        (save)dx;
        (save)ax;
        (save) *L00001AD4;
        (save) *L00001AD2;
        *L00002552 = L00000855();
        *L00002554 = dx;
        (save)0x36d4;
        (save) *L00002554;
        (save) *L00002552;
        (save)L00000855();
        (save)L00000855();
        (save)0x36e4;
        (save)L00000855();
        (save)0x2556;
        L00000855();
        (save)0x2556;
        L00000855();
        (save)0x2556;
        L00000855();
        *L00001AD2 = *L00002552;
        *L00001AD4 = *L00002554;
        goto L0000586e;
L000056fb:
        (save) *L00001AD4;
        (save) *L00001AD2;
        ax = 0;
        asm("cwd");
        (save)dx;
        (save)ax;
        L00000855();
        > ? L00005712 : ;
        goto L00005740;
        (save)0x36fa;
        (save)0x255a;
        L00000855();
        (save)0x255a;
        L00000855();
        (save)0x255a;
        L00000855();
        *L00001AD2 = 0;
        *L00001AD4 = 0;
        L0000590F();
L00005740:
        L00000855();
        ax = 7;
        goto L00005768;
L0000574c:
        bx = ax << 1;
        es = *L00001B0E;
        si = bx + *L00001B16;
        if(*%es:bx] > 0) {
        } else {
            ax = *L000020D0 - 1;
L00005768:
            *L000020D0 = ax;
            if(ax >= 0) {
                goto L0000574c;
            }
            (save)0x3718;
            (save)0x255e;
            L00000855();
            (save)0x255e;
            L00000855();
            (save)0x255e;
            L00000855();
            (save)0x373a;
            (save)0x2562;
            L00000855();
            (save)0x2562;
            L00000855();
            (save)0x2562;
            L00000855();
            si = 0x1b96;
            bx = 0xa + *L00001BA0;
            es = *L00001B98;
            bx = 0xa + *L00001BA0;
            es = *L00001B98;
            *%es:bx] = *%es:bx] + 0x64;
            bx = 0x1af4;
            L00000855();
            bx = 0x35f0;
            L00000855();
            bx = 0xc + *(si + 0xa);
            es = *(si + 2);
            *%es:bx] = L00000855();
            goto L0000586e;
        }
        (save)0x3754;
        bx = ( *L000020D0 << 1) + *L00001B16;
        es = *L00001B0E;
        (save)( *%es:bx] << 1 << 1) + *L00001D14;
        (save)L00000855();
        (save)0x2aee;
        (save)L00000855();
        (save)0x2566;
        L00000855();
        (save)0x2566;
        L00000855();
        (save)0x2566;
        L00000855();
        bx = ( *L000020D0 << 1) + *L00001B16;
        es = *L00001B0E;
        *%es:bx] = 0;
        *L00001AFC = 0x63;
        *L00001AFE = 0;
        *L00001AEA = 0x63;
        *L00001AEC = 0;
        L00000855();
L0000586e:
        *L00002194 = 0;
        ebx = *L00001E34 & 65535;
        *L00002536 = *L00001E2C;
        es = *L00001E2C;
        *L00002538 = *L00001E34 & 65535;
        ax = 0;
        goto L000058c5;
L00005896:
        *L0000256A = 0xc80;
        *L0000256C = ax + 0x9a;
        *L0000256E = 0;
        (save)0x2536;
        (save)0x2538;
        (save)0x256a;
        (save)0x256c;
        (save)0x256e;
        L00000855();
        ax = *L000020D0 + 1;
L000058c5:
        *L000020D0 = ax;
        if(ax <= 1) {
            goto L00005896;
        }
        si = 0x1b96;
        bx = 0x3e + *L00001BA0;
        es = *L00001B98;
        *%es:bx] = *L00001F22;
        L0000590F();
    }
    (save)0x3768;
    (save)0x2570;
    L00000855();
    (save)0x2570;
    L00000855();
    (save)0x2570;
    L00000855();
    L00000715();
    *L0000209E = 0x3e7;
    goto L00000179;
}

/* DEST BLOCK NOT FOUND: 00005918 -> 00000179 */
/* DEST BLOCK NOT FOUND: 00005b60 -> 000003ef */
/* DEST BLOCK NOT FOUND: 00005bdc -> 00000118 */
/* DEST BLOCK NOT FOUND: 00005c00 -> 00002693 */
/* DEST BLOCK NOT FOUND: 00005c72 -> 00000118 */
/* DEST BLOCK NOT FOUND: 00005c8e -> 00003e65 */
/* DEST BLOCK NOT FOUND: 00005c91 -> 000026c3 */
/* DEST BLOCK NOT FOUND: 00005ca2 -> 000012c6 */
/* DEST BLOCK NOT FOUND: 00005cce -> 00000118 */
/* DEST BLOCK NOT FOUND: 00005d95 -> 00000118 */
/* DEST BLOCK NOT FOUND: 00005ec1 -> 00000118 */
stack space not deallocated on return
/*	Procedure: 0x0000590F - 0x00005EC3
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0000590F()
{



    L000003EF();
    *L0000209E = 0x8fc;
    goto L00000179;
    bx = 0x3784;
    L00000855();
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0xc) = L00000855();
    L00000855();
    L00000855();
    ax = 0;
    <= ? L00005945 : ;
    eax = -1 & 65535;
    cx = 0;
    if(*L00001F2A > 0) {
        ecx = -1 & 65535;
    }
    cx = cx | ax;
    ax = 0;
    if(*L000020B0 > 0) {
        eax = -1 & 65535;
    }
    ax = ax | cx;
    if(ax == 0) {
    } else {
        return;
    }
    (save) *L0000278E;
    (save) *L0000278C;
    *(bp - 0xc) = L00000855();
    L00000855();
    ax = *L00001AE0;
    L00000855();
    L00000855();
    bx = 0x3788;
    L00000855();
    bx = 0x378c;
    L00000855();
    ax = L00000855();
    *L0000216E = ax;
    asm("cwd");
    (save)dx;
    (save)ax;
    (save) *L00001AD4;
    (save) *L00001AD2;
    L00000855();
    ax = 0;
    <= ? L000059b9 : ;
    eax = -1 & 65535;
    cx = 1 - ax;
    ax = *L0000216E;
    asm("cwd");
    dx = cx / cx % cx / cx;
    *L0000216E = ax;
    *L00002574 = 0;
    ax = L00000855(0x2576, 0x2574);
    if(*L00001AEE != 0) {
    } else {
        return;
    }
    (save)0x3790;
    (save) *L0000216E;
    (save)L00000855();
    (save)L00000855();
    (save)0x2db6;
    (save)L00000855();
    (save)0x2578;
    L00000855();
    (save)0x2578;
    L00000855();
    (save)0x2578;
    L00000855();
    *L0000257C = 0xc;
    (save)0x257c;
    L00000855();
    *L0000257E = 0;
    *L00002580 = 2;
    *L00002582 = 3;
    *L00002584 = 0;
    (save)0x257e;
    (save)0x2580;
    (save)0x2582;
    (save)0x2584;
    L00000855();
    if(*L00001E22 == 1) {
    } else {
        ax = *L0000216E;
        asm("cwd");
        (save)dx;
        (save)ax;
        (save) *L00001AD4;
        (save) *L00001AD2;
        L00000855();
        > ? L00005a7c : ;
        goto L00005a82;
        L00003965();
        goto L00005b63;
L00005a82:
        (save)0x37ae;
        (save)0x2586;
        L00000855();
        (save)0x2586;
        L00000855();
        (save)0x2586;
        L00000855();
        if(*L00001AEE != 0x13) {
        } else {
            (save)0x37bc;
            (save)0x258a;
            L00000855();
            (save)0x258a;
            L00000855();
            (save)0x258a;
            L00000855();
        }
        (save)0x2b7e;
        (save)( *L00001AEE << 1 << 1) + *L00001D70;
        (save)L00000855();
        (save)0x37c2;
        (save)L00000855();
        (save)0x258e;
        L00000855();
        (save)0x258e;
        L00000855();
        (save)0x258e;
        L00000855();
        bx = *L00001AEE << 1;
        dx = bx;
        bx = bx + *L00001BCE;
        es = *L00001BC6;
        bx = dx + *L00001BCE;
        es = *L00001BC6;
        *%es:bx] = *%es:bx] + 1;
        *L00002592 = 0x10;
        (save)0x2592;
        L00000855();
        ax = *L0000216E;
        asm("cwd");
        ax = ax - *L00001AD2;
        asm("sbb dx,[0x1ad4]");
        ax = ~ax;
        asm("adc dx,+0x0");
        *L00001AD2 = ax;
        *L00001AD4 = ~dx;
        *L00002594 = 0x2bc;
        (save)0x2594;
        L00000855();
        goto L000003EF;
    }
L00005b63:
    *L00002596 = 1;
    return(L00000855(0x1aee, 0x2596));
    (save)0x37c8;
    (save)0x2598;
    L00000855();
    (save)0x2598;
    L00000855();
    (save)0x2598;
    L00000855();
    (save)0x1b00;
    (save)0x1b04;
    L00000715();
    if(*L00001F02 >= 0xc8) {
    } else {
        *L0000259C = 0x1f4;
        (save)0x259c;
        L00000855();
        (save)0x37d0;
        (save)0x259e;
        L00000855();
        (save)0x259e;
        L00000855();
        (save)0x259e;
        L00000855();
        goto L00000118;
    }
    if(*L00001F02 == 0xd2) {
    } else {
        if(*L00001F02 != 0xcf) {
        } else {
            *L00001F2A = 1;
            L00000000();
            goto L00002693;
        }
        ax = 0;
        if(*L00001F02 == 0xc8) {
            eax = -1 & 65535;
        }
        cx = 0;
        if(*L00001F02 == 0xc9) {
            ecx = -1 & 65535;
        }
        cx = cx | ax;
        ax = 0;
        if(*L00001F02 == 0xcb) {
            eax = -1 & 65535;
        }
        if((ax | cx) != 0) {
        } else {
            ax = 0;
            if(*L00001F02 != 0xcc) {
                eax = -1 & 65535;
            }
            cx = 0;
            if(*L00001F02 != 0xd0) {
                ecx = -1 & 65535;
            }
            if((cx & ax) == 0) {
            } else {
                (save)0x37e4;
                (save)0x25a2;
                L00000855();
                (save)0x25a2;
                L00000855();
                (save)0x25a2;
                L00000855();
                goto L00000118;
            }
            L00003E0B();
            ax = *L00002204;
            if(ax == 0) {
            } else {
                return;
            }
            *L000025A6 = *L000025A6 + 1;
            if(*L000025A6 > 1) {
                goto L00003E65;
            }
            goto L000026c3;
        }
        L00003E0B();
        ax = *L00002204;
        if(ax == 0) {
        } else {
            return;
        }
        goto L000012c6;
    }
    if(*L000025A8 != 1) {
    } else {
        (save)0x380e;
        (save)0x25aa;
        L00000855();
        (save)0x25aa;
        L00000855();
        (save)0x25aa;
        L00000855();
        goto L00000118;
    }
    (save)0x3824;
    cx = 0x63;
    ebx = *L00001BA0 & 65535;
    es = *L00001B98;
    ax = *%es:bx];
    asm("cwd");
    dx = cx / cx % cx / cx;
    (save)ax + 1;
    (save)L00000855();
    (save)L00000855();
    (save)0x3832;
    (save)L00000855();
    (save)0x25ae;
    L00000855();
    (save)0x25ae;
    L00000855();
    (save)0x25ae;
    L00000855();
    *L000025B2 = 0x1b;
    (save)0x25b2;
    L00000855();
    ebx = *L00001BA0 & 65535;
    es = *L00001B98;
    ax = *%es:bx];
    asm("cwd");
    ax = ax + *L00001AD2;
    asm("adc dx,[0x1ad4]");
    *L00001AD2 = ax;
    *L00001AD4 = dx;
    *L000025B4 = 8;
    (save)0x25b4;
    L00000855();
    si = 0x1b96;
    es = *L00001B98;
    ax = *%es:bx];
    *(bp - 0xc) = *L00001BA0 & 65535;
    L00000855();
    bx = 0x2878;
    L00000855();
    ebx = *(si + 0xa) & 65535;
    es = *(si + 2);
    *%es:bx] = L00000855();
    L000003EF();
    *L000025A8 = 1;
    *L00001F2A = 1;
    goto L00000118;
    bx = *L00001ADC << 1 << 1;
    dx = bx;
    (save)bx + *L00001D42;
    (save)0x2b7e;
    *(bp - 0xc) = dx;
    (save)L00000855();
    (save) *(bp - 0xc) + *L00001D70;
    (save)L00000855();
    (save)0x2aee;
    (save)L00000855();
    (save)0x25b6;
    L00000855();
    (save)0x25b6;
    L00000855();
    (save)0x25b6;
    L00000855();
    if(*L00001ADC != 3) {
    } else {
        cx = 2;
        si = 0x1b96;
        bx = 0x26 + *L00001BA0;
        es = *L00001B98;
        ax = *%es:bx];
        asm("cwd");
        dx = cx / cx % cx / cx;
        ax = ax + *L00001ADA;
        L00000855();
        L00000855();
        ax = L00000855();
        *L00001ADA = ax;
        es = *(si + 2);
        di = 0x26 + *(si + 0xa);
        if(*L00001ADA <= *%es:bx]) {
        } else {
            bx = 0x26 + *(si + 0xa);
            es = *(si + 2);
            *L00001ADA = *%es:bx];
        }
        *L000025BA = 0x13;
        (save)0x25ba;
        L00000855();
        *L000025BC = 8;
        L00000855(0x25bc);
        bx = 6 + *L00001BCE;
        es = *L00001BC6;
        ax = *%es:bx];
        *L000020D0 = ax;
        bx = 6 + *L00001BCE;
        es = *L00001BC6;
        *%es:bx] = *L000020D0 - 1;
        ax = 0;
        if(*L000020D0 > 1) {
            eax = -1 & 65535;
        }
        cx = 65533;
        asm("imul cx");
        *L00001ADC = ax;
        return;
    }
    *L000025BE = 0x1f4;
    (save)0x25be;
    L00000855();
    (save)0x3844;
    (save)0x25c0;
    L00000855();
    (save)0x25c0;
    L00000855();
    (save)0x25c0;
    L00000855();
    goto L00000118;
}

/* DEST BLOCK NOT FOUND: 00006172 -> 00000179 */
stack space not deallocated on return
/*	Procedure: 0x00005EC4 - 0x0000624D
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00005EC4()
{



    L0000624E();
    es = *L00001B98;
    si = 0x44 + *L00001BA0;
    if(*%es:bx] == 1) {
    } else {
        *L00001F2A = 0;
    }
    *L000025C4 = 0;
    (save)0x25c4;
    L00000715();
    *L000025C6 = 0;
    bx = 0x12c0 + *L00001E34;
    es = *L00001E2C;
    *L000025C8 = *%es:bx];
    (save)0x25c6;
    (save)0x25c8;
    L00000715();
    bx = 0x12c0 + *L00001E34;
    es = *L00001E2C;
    *%es:bx] = *L000025C8;
    L00000715();
    *L00002178 = *L00001F02;
    ax = 0;
    goto L00005f51;
L00005f3a:
    bx = ax << 1;
    bx = bx + *L00001C86;
    es = *L00001C7E;
    *%es:bx] = *L000025CA;
    ax = *L000020D0 + 1;
L00005f51:
    *L000020D0 = ax;
    if(ax <= 0x1f) {
        goto L00005f3a;
    }
    *L000022CC = 0x974;
    ax = 0;
    goto L00005fee;
L00005f64:
    bx = ( *L000022CC << 1) + *L00001E34;
    es = *L00001E2C;
    *L000025CC = *%es:bx];
    (save)0x2b18;
    (save)0x236a;
    L00000855();
    *L000022CC = *L000022CC + 1;
    *L000025CE = *L000025CC;
    ax = 1;
    goto L00005fc9;
L00005f96:
    (save)0x236a;
    bx = ( *L000022CC << 1) + *L00001E34;
    es = *L00001E2C;
    (save) *%es:bx];
    (save)L00000855();
    (save)L00000855();
    (save)0x236a;
    L00000855();
    *L000022CC = *L000022CC + 1;
    ax = *L00002258 + 1;
L00005fc9:
    *L00002258 = ax;
    if(ax <= *L000025CE) {
        goto L00005f96;
    }
    (save)0x236a;
    (save)( *L000020D0 << 1 << 1) + *L00001F36;
    L00000855();
    ax = *L000020D0 + 1;
L00005fee:
    *L000020D0 = ax;
    if(ax <= 9) {
        goto L00005f64;
    }
    (save)0x3860;
    (save)0x1e8a;
    L00000855();
    ebx = *L00001E34 & 65535;
    *L00002536 = *L00001E2C;
    es = *L00001E2C;
    *L00002538 = *L00001E34 & 65535;
    *L000025D0 = 0xc80;
    *L000025D2 = 0xd3;
    (save)0x2536;
    (save)0x2538;
    (save)0x25d0;
    (save)0x25d2;
    *L000025D4 = L00000855();
    ax = *L000025D4;
    *L00001F02 = ax;
    *L00002194 = 0;
    if(ax == 65535) {
    } else {
        *L00002194 = ax;
    }
    es = *L00001B98;
    si = 0x44 + *L00001BA0;
    if(*%es:bx] != 1) {
    } else {
        *L0000234E = *L00001F20;
        (save)0x1f20;
        L00000000();
        *L000020BC = 1;
        bx = 0x3e + *L00001BA0;
        es = *L00001B98;
        *%es:bx] = 65535;
    }
    *L000025D6 = 0;
    *L000025D8 = 0;
    (save)0x1b00;
    (save)0x1b04;
    (save)0x25d6;
    (save)0x25d8;
    L00000715();
    L0000042D();
    L00000593();
    bx = 0x46 + *L00001BA0;
    es = *L00001B98;
    *L000025DA = *%es:bx];
    ax = *L00001F22;
    L00000855();
    bx = 0x2b5a;
    L00000855();
    L00000855();
    *L000025DC = L00000855();
    *L000025DE = 1;
    (save)0x25da;
    (save)0x25dc;
    (save)0x25de;
    L00000000();
    bx = 0x46 + *L00001BA0;
    es = *L00001B98;
    *%es:bx] = *L000025DA;
    if(*L000025E0 <= 0) {
    } else {
        L0000048C();
    }
    L00000855();
    bx = 0x3e + *L00001BA0;
    es = *L00001B98;
    if(*%es:bx] != *L00001F22) {
    } else {
        *L00001F2A = 1;
        L0000046A();
        (save)0x3878;
        (save)0x25e2;
        L00000855();
        (save)0x25e2;
        L00000855();
        (save)0x25e2;
        L00000855();
        *L0000209E = 0x7d0;
        goto L00000179;
    }
    *L000021B8 = 1;
    (save)0x3898;
    (save) *L00001F22 + 0x30;
    (save)L00000855();
    ax = L00000855();
    *L000025E6 = ax;
    cx = 0;
    if(*L000025E6 != 0) {
        ecx = -1 & 65535;
    }
    bx = 0x1af4;
    *(bp - 0xc) = cx;
    L00000855();
    si = 0x1b96;
    es = *L00001B98;
    ax = *%es:bx];
    L00000855();
    L00000855();
    ax = 0;
    if(!( *(bp - 0xe) = 0xc + *L00001BA0)) {
        eax = -1 & 65535;
    }
    ax = ax | *(bp - 0xc);
    es = *(si + 2);
    si = 0xa + *(si + 0xa);
    cx = 0;
    if(*%es:bx] == 0) {
        ecx = -1 & 65535;
    }
    if((cx | ax) == 0) {
    } else {
        *L000021B8 = 0;
        return;
    }
    (save)0x38a2;
    (save)0x25e8;
    L00000855();
    (save)0x25e8;
    L00000855();
    (save)0x25e8;
    L00000855();
    *L000025EC = 0x14;
    (save)0x25ec;
    L00000855();
    (save)0x38c8;
    (save)0x25ee;
    L00000855();
    (save)0x25ee;
    L00000855();
    (save)0x25ee;
    L00000855();
    *L000025F2 = 0x4b0;
    return(L00000855(0x25f2));
}

/* DEST BLOCK NOT FOUND: 00006af5 -> 00007007 */
stack space not deallocated on return
/*	Procedure: 0x0000624E - 0x00006F7B
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L0000624E()
{



    ebx = *L00001E34 & 65535;
    (save) *L00001E2C;
    L00000855();
    (save)0x38de;
    ax = *L00001F22;
    asm("cwd");
    ax = ax & 65535;
    (save)0;
    (save)ax;
    (save)L00000855();
    (save)L00000855();
    (save)0x38e6;
    (save)L00000855();
    (save)0x21d0;
    L00000855();
    (save)0x21d0;
    L00000855();
    es = *L00001E2C;
    *L000025F4 = *L00001E34 & 65535;
    (save)0x21d0;
    (save)0x25f4;
    L00000855();
    bx = 0x12e6 + *L00001E34;
    es = *L00001E2C;
    (save) *%es:bx];
    (save)L00000855();
    (save)0x21d0;
    L00000855();
    L00000000();
    L00000000();
    (save)0x21d0;
    (save)0x38e6;
    (save)L00000855();
    (save)0x25f6;
    L00000855();
    (save)0x25f6;
    L00000855();
    (save)0x25f6;
    L00000855();
    (save)0x21d0;
    (save)0x38ee;
    (save)L00000855();
    (save)0x25fa;
    L00000855();
    es = *L00001E2C;
    *L000025FE = 0x14a0 + *L00001E34;
    (save)0x25fa;
    (save)0x25fe;
    L00000855();
    (save)0x25fa;
    L00000855();
    ebx = *L00001E62 & 65535;
    (save) *L00001E5A;
    L00000855();
    (save)0x38f6;
    (save)0x2600;
    L00000855();
    (save)0x2600;
    L00000855();
    (save)0x2600;
    L00000855();
    (save)0x3906;
    (save)0x2604;
    L00000855();
    es = *L00001E5A;
    *L00002608 = *L00001E62 & 65535;
    (save)0x2604;
    (save)0x2608;
    L00000855();
    (save)0x2604;
    L00000855();
    bx = 0x12de + *L00001E34;
    es = *L00001E2C;
    *L000025CA = *%es:bx];
    bx = 0x12e0 + *L00001E34;
    es = *L00001E2C;
    *L00002160 = *%es:bx];
    bx = 0x12e2 + *L00001E34;
    es = *L00001E2C;
    *L000021A2 = *%es:bx];
    es = *L00001E2C;
    ax = *%es:bx];
    *(bp - 0xc) = 0x12e4 + *L00001E34;
    L00000855();
    bx = 0x2bf2;
    L00000855();
    bx = 0x2266;
    L00000855();
    *L000025CA = 0x14;
    bx = 0xe + *L00001BA0;
    es = *L00001B98;
    *L0000220E = *%es:bx];
    *L000025A8 = 0;
    *L00002202 = 0;
    *L0000228E = 0;
    *L000020B0 = 0;
    *L0000225A = 0;
    *L0000225C = 0;
    *L00002510 = 0;
    *L00002080 = 0;
    *L000025A6 = 0;
    *L0000260A = 0x11;
    *L0000260C = 0xa;
    return(L00000855(0x260c, 0x260a));
    goto L00007007;
    cx = 0;
    L00000855();
    if(*( *(bp + 6)) != 1) {
    } else {
        ax = *( *(bp + 0xa));
        *L000025E0 = ax & *( *(bp + 8));
    }
    if(*( *(bp + 6)) != 2) {
    } else {
        ax = *( *(bp + 0xa));
        *L000025E0 = ax | *( *(bp + 8));
    }
    ax = L00000855();
    asm("retf 0x6");
    goto L00007007;
    cx = 0xc;
    L00000855();
    si = 0x1e2a;
    ebx = *L00001E34 & 65535;
    (save) *L00001E2C;
    L00000855();
    es = *(si + 2);
    ax = *(si + 0xa) & 65535;
    *(bp - 0xc) = ax;
    bx = ( *L00001B04 << 1) + *L00002000;
    es = *L00001FF8;
    *(bp - 0xc) = *%es:bx] + ax + *L00001B00;
    ax = 0;
    goto L00006554;
L000064f6:
    ax = 0;
    goto L00006542;
L000064fc:
    bx = ax + *(bp - 0xc);
    es = *L00000101;
    bl = *%es:bx];
    ax = 0xd3 & 65535;
    *(bp - 0xe) = ax;
    ax = *(bp - 0xe) & 0xff;
    *(bp - 0xe) = ax;
    if(ax <= 0xf2) {
    } else {
        if(ax <= 0xfa) {
        } else {
            *(bp - 0x10) = *(bp - 0x10) | 2;
            goto L0000653e;
        }
        *(bp - 0x10) = *(bp - 0x10) | 1;
    }
L0000653e:
    ax = *(bp - 0x12) + 1;
L00006542:
    *(bp - 0x12) = ax;
    if(ax <= 1) {
        goto L000064fc;
    }
    *(bp - 0xc) = *(bp - 0xc) + *L00001F26;
    ax = *(bp - 0x14) + 1;
L00006554:
    *(bp - 0x14) = ax;
    if(ax <= 1) {
        goto L000064f6;
    }
    *(bp - 0x16) = *(bp - 0x10);
    ax = *(bp - 0x16);
    ax = L00000855();
    asm("retf 0x0");
    goto L00007007;
    cx = 6;
    L00000855();
    *(bp - 0xc) = 0;
    ax = 0x1a;
    goto L000065a4;
L00006584:
    bx = ax << 1;
    es = *L00001B98;
    si = bx + *L00001BA0;
    if(*%es:bx] == 0x7fff) {
    } else {
        *(bp - 0xc) = *(bp - 0xc) + 1;
    }
    ax = *(bp - 0xe) + 1;
L000065a4:
    *(bp - 0xe) = ax;
    if(ax <= 0x1d) {
        goto L00006584;
    }
    *(bp - 0x10) = *(bp - 0xc);
    ax = *(bp - 0x10);
    ax = L00000855();
    asm("retf 0x0");
    goto L00007007;
    cx = 0x14;
    L00000855();
    ebx = *L00001E34 & 65535;
    *L00002536 = *L00001E2C;
    (save) *L00002536;
    L00000855();
    es = *(si + 2);
    *(bp - 0xc) = 0xcc2 + *(si + 0xa);
    *(bp - 0xe) = 0;
L000065f2:
    bx = *(bp - 0xc);
    es = *L00000101;
    bl = *%es:bx];
    *(bp - 0x10) = 0;
    if(0 > 0x4e) {
    } else {
        ax = *(bp - 0x10) - *L00001B00;
        *(bp - 0x14) = ax;
        if(ax > 3) {
        } else {
            if(ax < 65533) {
            } else {
                bx = *(bp - 0xc) + 1;
                es = *L00000101;
                bl = *%es:bx];
                ax = 0 - *L00001B04 & 65535;
                *(bp - 0x16) = ax;
                if(ax > 3) {
                } else {
                    if(ax < 65533) {
                    } else {
                        *(bp - 0xe) = 1;
                        (save) *L00002536;
                        (save) *(bp - 0xc) + 2;
                        *(bp - 0x12) = L00000855();
                        ax = *(bp - 0x12);
                        *(bp - 0x18) = ax;
                        ax = *(bp - 0x18) + 0xcc2;
                        *(bp - 0x1a) = ax;
                        *L0000234E = *(bp - 0x1a);
                        (save)bp - 0x1a;
                        L00000000();
                        if(*( *(bp + 6)) == 0) {
                        } else {
                            bx = *L0000234E;
                            es = *L00000101;
                            *%es:bx] = 0xff;
                        }
                    }
                }
            }
        }
        *(bp - 0xc) = *(bp - 0xc) + 4;
        if(*(bp - 0xe) == 0) {
            goto L000065f2;
        }
    }
    *(bp - 0x1c) = 0;
    *(bp - 0x1e) = 0;
    (save)0x1b00;
    (save)0x1b04;
    (save)bp - 0x1c;
    (save)bp - 0x1e;
    L00000715();
    L00000715();
    ax = L00000855();
    asm("retf 0x2");
    goto L00007007;
    cx = 4;
    L00000855();
    (save)0x3916;
    (save)bp - 0xe;
    L00000855();
    (save)bp - 0xe;
    L00000855();
    (save)bp - 0xe;
    L00000855();
    ax = L00000855();
    asm("retf 0x0");
    goto L00007007;
    cx = 0;
    L00000855();
    *L0000260E = *( *(bp + 0xa));
    *L00002610 = *( *(bp + 8));
    ax = *( *(bp + 6)) + 1;
    L00000855();
    bx = 0x2b5a;
    L00000855();
    L00000855();
    *L00002612 = L00000855();
    ax = L00000855();
    asm("retf 0x6");
    goto L00007007;
    cx = 0;
    L00000855();
    ebx = *L00001E34 & 65535;
    (save) *L00001E2C;
    L00000855();
    bx = *L0000234E;
    es = *L00000101;
    *%es:bx] = 0xff;
    ax = L00000855();
    asm("retf 0x0");
    goto L00007007;
    cx = 0xa;
    L00000855();
L00006784:
    bx = *( *(bp + 6));
    es = *L00000101;
    bl = *%es:bx];
    *(bp - 0xc) = 0;
    if(0 > 0x4f) {
    } else {
        bx = *( *(bp + 6));
        dx = bx;
        bx = bx + 1;
        es = *L00000101;
        bl = *%es:bx];
        *(bp - 0xe) = 0;
        bx = (0 << 1 & 65535 & 65535) + *L00002000;
        es = *L00001FF8;
        *(bp - 0x10) = *%es:bx] + *(bp - 0xc);
        bx = dx;
        dx = dx + 2;
        cx = bx;
        bx = dx;
        es = *L00000101;
        bl = *%es:bx];
        *(bp - 0x12) = 0;
        *( *(bp + 6)) = *( *(bp + 6)) + 3;
L000067e8:
        (save)0x2536;
        (save) *(bp + 6);
        (save)bp - 0x12;
        (save)0x2536;
        (save)bp - 0x10;
        L00000855();
        *(bp - 0x10) = *(bp - 0x10) + *L00001F26;
        ax = *(bp - 0x12);
        si = *(bp + 6);
        *si = *si + ax;
        bx = *si;
        dx = bx;
        es = *L00000101;
        bl = *%es:bx];
        ax = 0;
        *(bp - 0x14) = 0;
        if(0 < 0xfe) {
            goto L000067e8;
        }
        *si = *si + 1;
        if(0 != 0xff) {
            goto L00006784;
        }
    }
    ax = L00000855();
    asm("retf 0x2");
    goto L00007007;
    cx = 4;
    L00000855();
    *L00001F04 = 0;
    *L00001F06 = 0;
L00006850:
    cx = 2;
    ax = *L00002612;
    asm("cwd");
    dx = cx / cx % cx / cx;
    *L00002612 = ax;
    if(ax != 0) {
    } else {
        *L00002612 = 0x10;
        *L00002610 = *L00002610 - 1;
    }
    if(*L0000260E >= *L00002610) {
    } else {
        bx = ( *L00002610 << 1) + *L00002096;
        es = *L0000208E;
        if(( *%es:bx] & *L00002612) == 0) {
        } else {
            *L00001F04 = *L00002610;
        }
        if(*L00001F04 == 0) {
            goto L00006850;
        }
    }
    *(bp - 0xc) = 65535;
    *(bp - 0xe) = *L00002612;
L000068b0:
    if(*(bp - 0xe) <= 0) {
    } else {
        cx = 2;
        ax = *(bp - 0xe);
        asm("cwd");
        dx = cx / cx % cx / cx;
        *(bp - 0xe) = ax;
        *(bp - 0xc) = *(bp - 0xc) + 1;
        goto L000068b0;
    }
    *L00001F06 = *(bp - 0xc);
    ax = L00000855();
    asm("retf 0x0");
    goto L00007007;
    cx = 0xa;
    L00000855();
    (save) *(bp + 6);
    *(bp - 0xc) = L00000855();
    ax = 1;
    goto L0000692f;
L000068f4:
    (save) *(bp + 6);
    (save)ax;
    (save)1;
    (save)L00000855();
    (save)bp - 0x10;
    L00000855();
    (save)bp - 0x10;
    L00000855();
    (save)bp - 0x10;
    L00000855();
    *(bp - 0x12) = 0x32;
    (save)bp - 0x12;
    L00000855();
    ax = *(bp - 0x14) + 1;
L0000692f:
    *(bp - 0x14) = ax;
    if(ax <= *(bp - 0xc)) {
        goto L000068f4;
    }
    ax = L00000855();
    asm("retf 0x2");
    goto L00007007;
    cx = 4;
    L00000855();
    es = *L00001B98;
    si = 0x18 + *L00001BA0;
    if(*%es:bx] != 0) {
    } else {
        *(bp - 0xc) = 3;
        *(bp - 0xe) = 0x1a;
        goto L00006978;
    }
    *(bp - 0xc) = 0;
    *(bp - 0xe) = 0x19;
L00006978:
    ax = *(bp - 0xc);
    goto L0000699e;
L0000697e:
    bx = ax + *(bp - 0xe) << 1;
    es = *L00001B98;
    si = bx + *L00001BA0;
    if(*%es:bx] == 0x7fff) {
    } else {
        ax = *L00001F02 - 1;
L0000699e:
        *L00001F02 = ax;
        if(ax >= 1) {
            goto L0000697e;
        }
    }
    ax = *( *(bp + 8)) << 1 << 1 << 1 << 1 << 1 << 1 << 1;
    ax = ax + *( *(bp + 6));
    bx = *L00001F02 + *(bp - 0xe) << 1;
    bx = bx + *L00001BA0;
    es = *L00001B98;
    *%es:bx] = ax;
    ax = L00000855();
    asm("retf 0x4");
    goto L00007007;
    cx = 6;
    L00000855();
    (save)1;
    (save)1;
    L00000855();
    (save)0x391c;
    (save)bp - 0xe;
    L00000855();
    (save)bp - 0xe;
    L00000855();
    (save)bp - 0xe;
    L00000855();
    (save)0x391c;
    (save)1;
    (save)65535;
    (save)0x20;
    L00000855();
    (save)1;
    asm("cwd");
    (save)dx;
    (save)ax;
    L00000855();
    (save)1;
    (save)ds;
    (save)bp - 0x10;
    (save)2;
    L00000855();
    (save)1;
    ax = *(bp - 0x10);
    asm("cwd");
    (save)dx;
    (save)ax;
    L00000855();
    ax = L00000855();
    asm("retf 0x2");
    goto L00007007;
    cx = 6;
    L00000855();
    (save)0x2b7e;
    (save)bp - 0xe;
    L00000855();
L00006a7f:
    (save)1;
    (save)ds;
    (save)bp - 0xe;
    (save)0;
    L00000855();
    (save)bp - 0xe;
    (save)0x392a;
    L00000855();
    if(!(ax = ( *( *(bp + 6)) << 1) - 1)) {
    } else {
        L00000855();
        goto L00006a7f;
    }
    (save)0xd;
    (save)L00000855();
    (save)bp - 0xe;
    L00000855();
    != ? 0x6ac3 : ;
    goto L00006adc;
    *(bp - 0x10) = 0x1e;
    (save)bp - 0x10;
    L00000855();
    (save)bp - 0xe;
    L00000855();
    goto L00006a7f;
L00006adc:
    (save)0;
    L00000855();
    (save)bp - 0xe;
    L00000855();
    ax = L00000855();
    asm("retf 0x0");
    goto L00007007;
    cx = 0x88;
    L00000855();
    L00000855();
    es = *L00001B98;
    si = 0x24 + *L00001BA0;
    if(*%es:bx] == 1) {
    } else {
        es = *L00001B98;
        si = 0x24 + *L00001BA0;
        ax = 0;
        if(*%es:bx] == 2) {
            eax = -1 & 65535;
        }
        es = *L00001BC6;
        si = 0x1c + *L00001BCE;
        cx = 0;
        if(*%es:bx] == 4) {
            ecx = -1 & 65535;
        }
        if((cx & ax) != 0) {
            goto L00006e18;
        }
        (save)0x3930;
        (save)bp - 0xe;
        L00000855();
        (save)bp - 0xe;
        L00000000();
        (save)bp - 0xe;
        L00000855();
        *(bp - 0x10) = 0x1b;
        (save)bp - 0x10;
        L00000855();
        L00000855();
        es = *L00001BC6;
        si = 0x1e + *L00001BCE;
        if(*%es:bx] <= 0) {
        } else {
            (save)0x394a;
            (save)bp - 0x14;
            L00000855();
            (save)bp - 0x14;
            L00000000();
            (save)bp - 0x14;
            L00000855();
            L00000855();
            (save)0x3962;
            (save)bp - 0x18;
            L00000855();
            (save)bp - 0x18;
            L00000000();
            (save)bp - 0x18;
            L00000855();
            goto L00006fd8;
        }
        (save)0x3974;
        (save)bp - 0x1c;
        L00000855();
        (save)bp - 0x1c;
        L00000000();
        (save)bp - 0x1c;
        L00000855();
        L00000855();
        goto L00006fd8;
    }
    (save)0x3996;
    (save)bp - 0x20;
    L00000855();
    (save)bp - 0x20;
    L00000000();
    (save)bp - 0x20;
    L00000855();
    *(bp - 0x22) = 0x1b;
    (save)bp - 0x22;
    L00000855();
    L00000855();
    (save)0x39bc;
    (save)bp - 0x26;
    L00000855();
    (save)bp - 0x26;
    L00000000();
    (save)bp - 0x26;
    L00000855();
    L00000855();
    (save)0x39e2;
    (save)bp - 0x2a;
    L00000855();
    (save)bp - 0x2a;
    L00000000();
    (save)bp - 0x2a;
    L00000855();
    L00000855();
    (save)0x3a08;
    (save)bp - 0x2e;
    L00000855();
    (save)bp - 0x2e;
    L00000000();
    (save)bp - 0x2e;
    L00000855();
    L00000855();
    (save)0x3a1e;
    (save)bp - 0x32;
    L00000855();
    (save)bp - 0x32;
    L00000000();
    (save)bp - 0x32;
    L00000855();
    L00000855();
    *(bp - 0x34) = 0x1388;
    (save)bp - 0x34;
    L00000855();
    (save)0x3a34;
    (save)bp - 0x38;
    L00000855();
    (save)bp - 0x38;
    L00000000();
    (save)bp - 0x38;
    L00000855();
    L00000855();
    (save)0x3a5c;
    (save)bp - 0x3c;
    L00000855();
    (save)bp - 0x3c;
    L00000000();
    (save)bp - 0x3c;
    L00000855();
    *(bp - 0x3e) = 0x3e7;
    (save)bp - 0x3e;
    L00000855();
    (save)0x3a76;
    (save)bp - 0x42;
    L00000855();
    (save)bp - 0x42;
    L00000000();
    (save)bp - 0x42;
    L00000855();
    L00000855();
    (save)0x3a8a;
    (save)bp - 0x46;
    L00000855();
    (save)bp - 0x46;
    L00000000();
    (save)bp - 0x46;
    L00000855();
    *(bp - 0x48) = 0x7d0;
    (save)bp - 0x48;
    L00000855();
    *(bp - 0x4a) = 0xf;
    *(bp - 0x4c) = 2;
    *(bp - 0x4e) = 7;
    L00006F7C();
    *(bp - 0x50) = 0;
    (save)bp - 0x50;
    L00000855();
    L00000855();
    (save)0x3ab4;
    (save)bp - 0x54;
    L00000855();
    (save)bp - 0x54;
    L00000000();
    (save)bp - 0x54;
    L00000855();
    L00000855();
    (save)0x3ada;
    (save)bp - 0x58;
    L00000855();
    (save)bp - 0x58;
    L00000000();
    (save)bp - 0x58;
    L00000855();
    bx = 0x2c + *L00001BCE;
    es = *L00001BC6;
    *%es:bx] = 1;
    bx = 0x24 + *L00001BA0;
    es = *L00001B98;
    *%es:bx] = 2;
    *(bp - 0x5a) = 0x15;
    (save)bp - 0x5a;
    L00000855();
    goto L00006fd8;
L00006e18:
    (save)0x3b04;
    (save)bp - 0x5e;
    L00000855();
    (save)bp - 0x5e;
    L00000000();
    (save)bp - 0x5e;
    L00000855();
    *(bp - 0x60) = 0x1b;
    (save)bp - 0x60;
    L00000855();
    *(bp - 0x62) = 0x7d0;
    (save)bp - 0x62;
    L00000855();
    (save)0x3b2a;
    (save)bp - 0x66;
    L00000855();
    (save)bp - 0x66;
    L00000000();
    (save)bp - 0x66;
    L00000855();
    L00000855();
    (save)0x3b32;
    (save)bp - 0x6a;
    L00000855();
    (save)bp - 0x6a;
    L00000000();
    (save)bp - 0x6a;
    L00000855();
    L00000855();
    L00000855();
    (save)0x3b5a;
    (save)bp - 0x6e;
    L00000855();
    (save)bp - 0x6e;
    L00000000();
    (save)bp - 0x6e;
    L00000855();
    *(bp - 0x70) = 0x3e7;
    (save)bp - 0x70;
    L00000855();
    (save)0x3b76;
    (save)bp - 0x74;
    L00000855();
    (save)bp - 0x74;
    L00000000();
    (save)bp - 0x74;
    L00000855();
    L00000855();
    (save)0x3b82;
    (save)bp - 0x78;
    L00000855();
    (save)bp - 0x78;
    L00000000();
    (save)bp - 0x78;
    L00000855();
    L00000855();
    (save)0x3ba4;
    (save)bp - 0x7c;
    L00000855();
    (save)bp - 0x7c;
    L00000000();
    (save)bp - 0x7c;
    L00000855();
    bx = 0x24 + *L00001BA0;
    es = *L00001B98;
    *%es:bx] = 3;
    L00000855();
    (save)0x3bcc;
    (save)bp - 0x80;
    L00000855();
    (save)bp - 0x80;
    L00000000();
    (save)bp - 0x80;
    L00000855();
    *(bp + 65406) = 0x15;
    (save)bp + 65406;
    L00000855();
    goto L00006fd8;
}

stack space not deallocated on return
/*	Procedure: 0x00006F7C - 0x00008CD4
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00006F7C()
{



    *(bp + 65404) = *(bp - 0x4a);
    ax = 0;
    goto L00006fcd;
L00006f88:
    *(bp + 65402) = 0;
    (save)bp + 65402;
    L00000855();
    *(bp + 65400) = 0x63;
    (save)bp + 65400;
    L00000855();
    *(bp + 65398) = 1;
    (save)bp + 65398;
    L00000855();
    *(bp + 65396) = 0x63;
    L00000855(bp + 65396);
    ax = *(bp + 65394) + 1;
L00006fcd:
    *(bp + 65394) = ax;
    if(ax <= *(bp + 65404)) {
        goto L00006f88;
    }
    return;
    L00000855();
    (save)0x3916;
    (save)bp + 65390;
    L00000855();
    (save)bp + 65390;
    L00000855();
    (save)bp + 65390;
    L00000855();
    L00000855();
    asm("retf 0x0");
    goto L0000714b;
    cx = 6;
    L00000855();
    si = 0x1e2a;
    ebx = *L00001E34 & 65535;
    ax = *L00001E2C;
    *(bp - 0xc) = ax;
    (save) *(bp - 0xc);
    L00000855();
    es = *(si + 2);
    ax = 0xc80 + *(si + 0xa);
    *(bp - 0xe) = ax;
    bx = 0x44 + *L00001BA0;
    es = *L00001B98;
    si = bx;
    if(*%es:bx] == 1) {
    } else {
        bx = ax;
        es = *L00000101;
        bl = *%es:bx];
        *L00001B00 = 0;
        bx = ( *(bp - 0xe) & 65535) + 1;
        es = *L00000101;
        bl = *%es:bx];
        bh = 0;
        *L00001B04 = 0 & 65535;
        *(bp - 0x10) = 0;
    }
    L00000855();
    asm("retf 0x0");
    goto L0000714b;
    cx = 0xc;
    L00000855();
L0000708a:
    *(bp - 0xc) = 0;
    ax = 1;
    goto L0000712f;
L00007096:
    bx = (ax << 1) + 0x12c2;
    bx = bx + *L00001E34;
    es = *L00001E2C;
    *(bp - 0x12) = *%es:bx];
    ax = 0;
    if(*(bp - 0x14) != 9) {
        eax = -1 & 65535;
    }
    cx = 0;
    if(*(bp - 0x14) != 1) {
        ecx = -1 & 65535;
    }
    if((cx & ax) == 0) {
    } else {
        *(bp - 0xe) = L00000855();
        *(bp - 0x10) = L00000855();
        *(bp - 0x12) = ( *(bp - 0x10) | *(bp - 0xe)) & *(bp - 0x12);
    }
    bx = *(bp - 0x14) << 1;
    si = 0x208c;
    bx = bx + *L00002096;
    es = *L0000208E;
    *%es:bx] = *(bp - 0x12);
    if(*(bp - 0x14) >= 9) {
    } else {
        ax = 1;
        goto L00007123;
L00007108:
        *(bp - 0xc) = *(bp - 0xc) + ( *(bp - 0x12) & 1);
        cx = 2;
        ax = *(bp - 0x12);
        asm("cwd");
        dx = cx / cx % cx / cx;
        *(bp - 0x12) = ax;
        ax = *(bp - 0x16) + 1;
L00007123:
        *(bp - 0x16) = ax;
        if(ax <= 5) {
            goto L00007108;
        }
    }
    ax = *(bp - 0x14) + 1;
L0000712f:
    *(bp - 0x14) = ax;
    if(ax <= 0xd) {
        goto L00007096;
    }
    if(*(bp - 0xc) >= 9) {
        goto L0000708a;
    }
    L00000855();
    asm("retf 0x0");
L0000714b:
    ax = L00000855();
    asm("bound bp,[di+0x54]");
    si = si - 1;
    bx = bx + 1;
    cx = cx + 1;
    sp = sp - 1;
    dx = dx + 1;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) + al;
    asm("repne cmp dx,[si]");
    ah :: *%es:0x0];
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    asm("rcr byte [bp+si],0x30");
    *(bx + si) = *(bx + si) + al;
    asm("loopne 0x71ad");
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    asm("Unknown opcode 0xff");
    *(bx + si + 59648) = *(bx + si + 59648) - 1;
    ax & 47360;
    *(bx + si) = *(bx + si) | al;
    L00000855();
    *(bp - 0xc) = *( *(bp + 8));
    if(*(bp - 0xc) != 0) {
    } else {
        *(bp - 0xe) = 0x84;
        goto L000071cf;
    }
    if(*(bp - 0xc) != 1) {
    } else {
        *(bp - 0xe) = 0x82;
        goto L000071cf;
    }
    if(*(bp - 0xc) != 2) {
    } else {
        *(bp - 0xe) = 0x81;
        goto L000071cf;
    }
    (save)0x27;
    L00000855();
L000071cf:
    *(bp - 0x12) = L00000855();
    *(bp - 0x10) = dx;
    ax = *(bp - 0x12);
    *L00001EF2 = ax;
    *L00001EF4 = *(bp - 0x10);
    *L00001EFE = 0x14a;
    bx = 0x78 + *L00001E62;
    es = *L00001E5A;
    *%es:bx] = 0x46;
    bx = 0x21a + *L00001E62;
    es = *L00001E5A;
    *%es:bx] = *(bp - 0xe);
    L00000855();
    si = 0x1e58;
    bx = 0x21a + *L00001E62;
    es = *L00001E5A;
    *%es:bx] = *(bp - 0xe);
    L00000855();
    asm("retf 0x4");
    goto L00008548;
    cx = 0x1a;
    L00000855();
    ebx = *L00001E34 & 65535;
    *(bp - 0xc) = *L00001E2C;
    es = *L00001E2C;
    *(bp - 0xe) = ( *L00002082 << 1) + *L00001E34;
    (save) *(bp - 0xc);
    L00000855();
    ax = *L0000261A;
    if(ax > *L00001B04) {
    } else {
        *(bp - 0x10) = 0x11;
        bx = *L00001B04 - ax << 1;
        si = 0x1ff6;
        bx = bx + *L00002000;
        es = *L00001FF8;
        *(bp - 0x12) = *%es:bx];
        ax = *L0000261C;
        if(ax >= *L00001B04) {
        } else {
            *(bp - 0x10) = ax + 0x11 - *L00001B04;
        }
        goto L000072ff;
    }
    *(bp - 0x14) = *L0000261A - *L00001B04;
    ax = 1;
    goto L000072d8;
L000072b6:
    *(bp - 0x16) = 0x1a;
    (save)bp - 0xc;
    (save)bp - 0xe;
    (save)bp - 0x16;
    (save)0x261e;
    L00000855();
    *(bp - 0xe) = *(bp - 0xe) + 0x1a;
    ax = *(bp - 0x18) + 1;
L000072d8:
    *(bp - 0x18) = ax;
    if(ax <= *(bp - 0x14)) {
        goto L000072b6;
    }
    *(bp - 0x10) = 0x11 - *L0000261A + *L00001B04;
    si = 0x1ff6;
    ebx = *L00002000 & 65535;
    es = *L00001FF8;
    *(bp - 0x12) = *%es:bx];
L000072ff:
    *(bp - 0x1a) = 0;
    *(bp - 0x1c) = 0;
    ax = *L00002620;
    if(ax > *L00001B00) {
    } else {
        *(bp - 0x1e) = 0x1a;
        *(bp - 0x12) = *(bp - 0x12) - ax + *L00001B00;
        ax = *L00002622;
        if(ax >= *L00001B00) {
        } else {
            ax = ~(ax - *L00001B00);
            *(bp - 0x1c) = ax;
            *(bp - 0x1e) = ~( *(bp - 0x1c) - 0x1a);
        }
        goto L0000735a;
    }
    ax = *L00002620 - *L00001B00;
    *(bp - 0x1a) = ax;
    *(bp - 0x1e) = ~( *(bp - 0x1a) - 0x1a);
L0000735a:
    *(bp - 0x20) = *(bp - 0x10);
    ax = 1;
    goto L000073c5;
L00007366:
    (save)bp - 0xc;
    (save)bp - 0xe;
    (save)bp - 0x1a;
    (save)0x261e;
    L00000855();
    *(bp - 0xe) = *(bp - 0xe) + *(bp - 0x1a);
    (save)bp - 0xc;
    (save)bp - 0x12;
    (save)bp - 0x1e;
    (save)bp - 0xc;
    (save)bp - 0xe;
    L00000855();
    *(bp - 0xe) = *(bp - 0xe) + *(bp - 0x1e);
    *(bp - 0x12) = *(bp - 0x12) + *L00001F26;
    (save)bp - 0xc;
    (save)bp - 0xe;
    (save)bp - 0x1c;
    (save)0x261e;
    L00000855();
    *(bp - 0xe) = *(bp - 0xe) + *(bp - 0x1c);
    ax = *(bp - 0x18) + 1;
L000073c5:
    *(bp - 0x18) = ax;
    if(ax <= *(bp - 0x20)) {
        goto L00007366;
    }
    *(bp - 0x22) = *L00001B04 - *L0000261C;
    ax = 1;
    goto L00007400;
L000073de:
    *(bp - 0x24) = 0x1a;
    (save)bp - 0xc;
    (save)bp - 0xe;
    (save)bp - 0x24;
    (save)0x261e;
    L00000855();
    *(bp - 0xe) = *(bp - 0xe) + 0x1a;
    ax = *(bp - 0x18) + 1;
L00007400:
    *(bp - 0x18) = ax;
    if(ax <= *(bp - 0x22)) {
        goto L000073de;
    }
    L00000855();
    asm("retf 0x0");
    goto L00008548;
    cx = 0xc;
    L00000855();
    *(bp - 0xe) = 0x10;
    si = 0x1e2a;
    ebx = *L00001E34 & 65535;
    es = *L00001E2C;
    (save)es;
    L00000855();
    ax = 0xf5;
    asm("imul word [bp-0xe]");
    *(bp - 0x10) = ax + 0x22a0;
    ax = 5;
    asm("imul word [bp-0xe]");
    *(bp - 0xc) = ax + *(bp - 0x10) - 1;
    ax = *(bp - 0x10);
    goto L00007476;
L00007452:
    bx = ax;
    es = *L00000101;
    bl = *%es:bx];
    *(bp - 0x12) = 0;
    *(bp - 0x12) = 0x55 & 65535;
    ebx = *(bp - 0x14) & 65535;
    es = *L00000101;
    *%es:bx] = al;
    ax = *(bp - 0x14) + 1;
L00007476:
    *(bp - 0x14) = ax;
    if(ax <= *(bp - 0xc)) {
        goto L00007452;
    }
    ax = 0xa;
    asm("imul word [bp-0xe]");
    *(bp - 0x16) = ax + *(bp - 0x10) - 1;
    ax = 9;
    asm("imul word [bp-0xe]");
    ax = ax + *(bp - 0x10);
    goto L000074bc;
L00007498:
    bx = ax;
    es = *L00000101;
    bl = *%es:bx];
    *(bp - 0x12) = 0;
    *(bp - 0x12) = 0x55 & 65535;
    ebx = *(bp - 0x14) & 65535;
    es = *L00000101;
    *%es:bx] = al;
    ax = *(bp - 0x14) + 1;
L000074bc:
    *(bp - 0x14) = ax;
    if(ax <= *(bp - 0x16)) {
        goto L00007498;
    }
    L00000855();
    asm("retf 0x0");
    goto L00008548;
    cx = 0xc;
    L00000855();
    ax = *( *(bp + 8));
    *(bp - 0xe) = ax;
    si = *(bp + 0xa);
    bx = ax;
    *(bp - 0x10) = *si;
    *(bp - 0xc) = *( *(bp + 6));
    if(*(bp - 0xc) != 0) {
    } else {
        *(bp - 0xe) = bx - 1;
        *(bp - 0x12) = 1;
        goto L0000755f;
    }
    if(*(bp - 0xc) != 1) {
    } else {
        *(bp - 0x10) = *( *(bp + 0xa)) + 1;
        *(bp - 0x12) = 0xb;
        goto L0000755f;
    }
    if(*(bp - 0xc) != 2) {
    } else {
        *(bp - 0xe) = *( *(bp + 8)) + 1;
        *(bp - 0x12) = 1;
        goto L0000755f;
    }
    if(*(bp - 0xc) != 3) {
    } else {
        *(bp - 0x10) = *( *(bp + 0xa)) - 1;
        *(bp - 0x12) = 0x15;
        goto L0000755f;
    }
    (save)0x27;
    L00000855();
L0000755f:
    si = 0x1e58;
    bx = 0x7e + *L00001E62;
    es = *L00001E5A;
    *%es:bx] = 0;
    *L00001F24 = 1;
    if(*L00002624 == *(bp - 0x12)) {
    } else {
        bx = ( *(bp - 0x12) << 1) + *(si + 0xa);
        es = *(si + 2);
        dx = bx;
        bx = 0x8e + *(si + 0xa);
        es = *(si + 2);
        *%es:bx] = *%es:bx];
        *L00002624 = *(bp - 0x12);
    }
    si = 0x1e58;
    bx = 0x90 + *L00001E62;
    es = *L00001E5A;
    *%es:bx] = 0xdc;
    (save)bp - 0x10;
    (save)bp - 0xe;
    *(bp - 0x14) = L00000715();
    ax = *(bp - 0x14);
    *L00001F02 = ax;
    cx = 0;
    if(ax == 0) {
        ecx = -1 & 65535;
    }
    dx = 0;
    if(ax > 3) {
        edx = -1 & 65535;
    }
    if((dx | cx) == 0) {
    } else {
        ax = *(bp - 0x10);
        *( *(bp + 0xa)) = ax;
        ax = *(bp - 0xe);
        si = *(bp + 8);
        *si = ax;
        *(bp - 0x16) = 8;
        (save)bp - 0x16;
        L00000855();
    }
    L00000855();
    asm("retf 0x6");
    goto L00008548;
    cx = 0x10;
    L00000855();
    ebx = *L00001E34 & 65535;
    es = *L00001E2C;
    (save)es;
    L00000855();
    *(bp - 0xc) = *L00001F02;
    (save)0x1b00;
    (save)0x1b04;
    L00000715();
    *(bp - 0x10) = *L00001F02;
    *L00001F02 = *(bp - 0xc);
    si = *(bp + 6);
    ax = *si;
    bx = ax;
    *(bp - 0xe) = ax + 1;
    bx = bx - 1;
    ax = bx;
    goto L000076c9;
L00007658:
    ax = *L00001F26;
    *(bp - 0x12) = ax;
    *(bp - 0x14) = ax;
    ax = ~( *(bp - 0x14));
    goto L000076ac;
L00007666:
    ax = ax + *(bp - 0x16);
    bx = ax;
    es = *L00000101;
    bl = *%es:bx];
    bx = 0x4e;
    dx = ax;
    *(bp - 0x18) = 0x4e;
    if(0x4e > 4) {
    } else {
        bx = dx;
        ax = *(bp - 0x10);
        es = *L00000101;
        *%es:bx] = al;
    }
    if(*(bp - 0x18) != 0) {
    } else {
        *L00001F04 = 1;
    }
    ax = *(bp - 0x14) + *(bp - 0x1a);
L000076ac:
    *(bp - 0x1a) = ax;
    if(*(bp - 0x14) >= 0) {
    } else {
        if(ax >= *(bp - 0x12)) {
            goto L00007666;
        }
        goto L000076c5;
    }
    if(ax <= *(bp - 0x12)) {
        goto L00007666;
    }
L000076c5:
    ax = *(bp - 0x16) + 1;
L000076c9:
    *(bp - 0x16) = ax;
    if(ax <= *(bp - 0xe)) {
        goto L00007658;
    }
    L00000855();
    asm("retf 0x2");
    goto L00008548;
    cx = 2;
    L00000855();
    si = 0x1e2a;
    ebx = *L00001E34 & 65535;
    (save) *L00001E2C;
    L00000855();
    bx = ( *L00002626 << 1) + *(si + 0xa);
    es = *(si + 2);
    si = *(bp + 6);
    ax = bx + *si;
    *(bp - 0xc) = ax;
    bx = *(bp - 0xc);
    es = *L00000101;
    *%es:bx] = 0xff;
    L00000855();
    asm("retf 0x2");
    goto L00008548;
    cx = 0;
    L00000855();
    L00000855();
    asm("retf 0x0");
    goto L00008548;
    cx = 0x12;
    L00000855();
    ax = *( *(bp + 0xc));
    bx = ax;
    *(bp - 0xc) = ax - *L00001B00;
    *(bp - 0xe) = bx - 1;
    *(bp - 0x10) = 3;
    if(*(bp - 0xc) >= 0) {
    } else {
        *(bp - 0xc) = ~( *(bp - 0xc));
        *(bp - 0xe) = *(bp - 0xe) + 2;
        *(bp - 0x10) = 1;
    }
    si = *(bp + 0xa);
    ax = *si;
    bx = ax;
    *(bp - 0x12) = ax - *L00001B04;
    bx = bx - 1;
    *(bp - 0x14) = bx;
    if(*(bp - 0x12) >= 0) {
    } else {
        *(bp - 0x12) = ~( *(bp - 0x12));
        *(bp - 0x14) = *(bp - 0x14) + 2;
    }
    ax = 0;
    if(*(bp - 0xc) > 2) {
        eax = -1 & 65535;
    }
    cx = 0;
    if(*(bp - 0x12) > 2) {
        ecx = -1 & 65535;
    }
    if((cx | ax) == 0) {
    } else {
        if(*(bp - 0x12) >= *(bp - 0xc)) {
        } else {
            (save)bp - 0xe;
            (save) *(bp + 0xa);
            *(bp - 0x16) = L00000715();
            if(*(bp - 0x16) == 0) {
                goto L00007824;
            }
        }
        (save) *(bp + 0xc);
        (save)bp - 0x14;
        *(bp - 0x18) = L00000715();
        if(*(bp - 0x18) != 0) {
        } else {
            *( *(bp + 6)) = 2;
            ax = *(bp - 0x14);
            *( *(bp + 0xa)) = ax;
            *(bp - 0x12) = *(bp - 0x12) - 1;
            goto L00007837;
        }
        (save)bp - 0xe;
        (save) *(bp + 0xa);
        *(bp - 0x1a) = L00000715();
        if(*(bp - 0x1a) != 0) {
        } else {
L00007824:
            ax = *(bp - 0x10);
            *( *(bp + 6)) = ax;
            ax = *(bp - 0xe);
            *( *(bp + 0xc)) = ax;
            *(bp - 0xc) = *(bp - 0xc) - 1;
        }
L00007837:
        ax = 0;
        if(*(bp - 0xc) < 3) {
            eax = -1 & 65535;
        }
        cx = 0;
        if(*(bp - 0x12) < 3) {
            ecx = -1 & 65535;
        }
        cx = cx & ax;
        si = *(bp + 8);
        if((cx & *si) == 0) {
        } else {
            *(bp - 0x1c) = 1;
            goto L0000786e;
        }
        *(bp - 0x1c) = 0;
        goto L0000786e;
    }
    *(bp - 0x1c) = 1;
L0000786e:
    ax = *(bp - 0x1c);
    L00000855();
    asm("retf 0x8");
    goto L00008548;
    cx = 6;
    L00000855();
    *(bp - 0xc) = *( *(bp + 0xa)) - *L00001B00;
    si = *(bp + 8);
    ax = *si - *L00001B04;
    *(bp - 0xe) = ax;
    if(ax < 65528) {
    } else {
        if(ax > 7) {
        } else {
            if(*(bp - 0xc) < -12) {
            } else {
                if(*(bp - 0xc) > 0xc) {
                } else {
                    bx = 0x78 + *L00001E62;
                    es = *L00001E5A;
                    ax = *%es:bx] + 3;
                    *(bp - 0x10) = ax;
                    bx = ( *(bp - 0xe) << 1) + 0x10;
                    bx = bx + *L0000202E;
                    es = *L00002026;
                    cx = *%es:bx] + *(bp - 0xc) + *(bp - 0xc);
                    ax = ax << 1;
                    bx = ax;
                    bx = bx + *L00001E62;
                    es = *L00001E5A;
                    *%es:bx] = cx;
                    di = *(bp + 6);
                    bx = *di << 1;
                    bx = bx + *L0000205C;
                    es = *L00002054;
                    si = 0x1e58;
                    bx = ( *%es:bx] << 1) + 0x3c + *L00001E62;
                    es = *L00001E5A;
                    dx = ax;
                    bx = ax + 2 + *L00001E62;
                    es = *L00001E5A;
                    *%es:bx] = *%es:bx];
                    ax = 0x1a;
                    bx = dx;
                    asm("imul word [bp-0xe]");
                    ax = ax + *(bp - 0xc) + 0xdc;
                    bx = bx + 4 + *(si + 0xa);
                    es = *(si + 2);
                    *%es:bx] = ax;
                    bx = 0x78 + *(si + 0xa);
                    es = *(si + 2);
                    *%es:bx] = *(bp - 0x10);
                }
            }
        }
    }
    L00000855();
    asm("retf 0x6");
    goto L00008548;
    cx = 6;
    L00000855();
    ebx = *L00001E34 & 65535;
    *(bp - 0xc) = *L00001E2C;
    si = *(bp + 6);
    if(*si >= 0) {
    } else {
        *si = 0;
    }
    bx = *( *(bp + 6)) << 1;
    bx = bx + *L00002000;
    es = *L00001FF8;
    si = *(bp + 8);
    *(bp - 0xe) = *%es:bx] + *si;
    (save)bp - 0xc;
    (save)bp - 0xe;
    (save)0x1f26;
    *(bp - 0x10) = L00000855();
    *L00001F02 = *(bp - 0x10);
    L00000855();
    asm("retf 0x4");
    goto L00008548;
    cx = 6;
    L00000855();
    si = 0x1e2a;
    ebx = *L00001E34 & 65535;
    (save) *L00001E2C;
    L00000855();
    bx = ( *L00002626 << 1) + *(si + 0xa);
    es = *(si + 2);
    *(bp - 0xe) = bx;
    *(bp - 0xc) = *L00002628;
    ax = 1;
    goto L00007a2c;
L00007a0c:
    bx = *(bp - 0xe);
    es = *L00000101;
    bl = *%es:bx];
    bh = 0;
    if(0 >= 0xff) {
    } else {
        *L00001F02 = *L00001F02 + 1;
    }
    *(bp - 0xe) = *(bp - 0xe) + 1;
    ax = *(bp - 0x10) + 1;
L00007a2c:
    *(bp - 0x10) = ax;
    if(ax <= *(bp - 0xc)) {
        goto L00007a0c;
    }
    L00000855();
    asm("retf 0x0");
    goto L00008548;
    cx = 0x18;
    L00000855();
    si = 0x1e2a;
    ebx = *L00001E34 & 65535;
    ax = *L00001E2C;
    *(bp - 0xc) = ax;
    (save) *(bp - 0xc);
    L00000855();
    es = *(si + 2);
    ax = ( *L00002626 << 1) + *(si + 0xa);
    *(bp - 0xe) = ax;
    *(bp - 0x10) = *(bp - 0xe) + *L00002628;
    ax = *( *(bp + 8));
    bx = ax;
    *L0000262A = ax + *(bp - 0xe);
    if(bx != *L0000262C) {
    } else {
        *L0000262A = *L0000262A + 1;
    }
    ax = *( *(bp + 0xc));
    ax = ax - *( *(bp + 6));
    *(bp - 0x12) = ax;
    if(*(bp - 0x12) >= 0) {
    } else {
        *(bp - 0x12) = 0;
    }
    ax = *( *(bp + 0xa));
    di = *(bp + 6);
    bx = ax;
    *(bp - 0x14) = ax - *di;
    si = *(bp + 0xc);
    *(bp - 0x16) = *si + *di;
    bx = bx + *di;
    *(bp - 0x18) = bx;
L00007ac8:
    *(bp - 0x1a) = *(bp - 0x10) - *L0000262A;
    (save)bp - 0xc;
    (save)0x262a;
    (save)bp - 0x1a;
    (save)bp - 0x12;
    (save)bp - 0x16;
    *(bp - 0x1c) = L00000855();
    ax = *(bp - 0x1c);
    *L0000262A = ax;
    if(*L0000262A >= 0) {
    } else {
        *(bp - 0x1e) = 65535;
        goto L00007b9a;
    }
    ax = *L00002628 + *L0000262A;
    *L0000262E = ax;
    bx = *L0000262E;
    es = *L00000101;
    bl = *%es:bx];
    *L00002630 = 0;
    ebx = *L0000262A & 65535;
    es = *L00000101;
    bl = *%es:bx];
    eax = 0 & 65535;
    *L00002632 = ax;
    si = 0x1ff6;
    bx = (( *L00002630 & 65535) << 1) + *L00002000;
    es = *L00001FF8;
    bx = *%es:bx] + *L00002632;
    es = *L00000101;
    bl = *%es:bx];
    bx = 0x40;
    *(bp - 0x20) = 0x40;
    if(0x40 > *L00002634 + 0x40) {
    } else {
        if(*(bp - 0x14) > *L00002630) {
        } else {
            if(*(bp - 0x18) < *L00002630) {
            } else {
                ax = *L0000262A - *(bp - 0xe);
                *(bp - 0x1e) = ax;
                if(*(bp - 0x1e) != *L0000262C) {
                    goto L00007b9a;
                }
            }
        }
    }
    *L0000262A = *L0000262A + 1;
    goto L00007ac8;
L00007b9a:
    *(bp - 0x22) = *(bp - 0x1e);
    ax = *(bp - 0x22);
    L00000855();
    asm("retf 0x8");
    goto L00008548;
    cx = 0x10;
    L00000855();
    *L00002080 = 0;
    bx = 0x78 + *L00001E62;
    es = *L00001E5A;
    *%es:bx] = 0x46;
    *L0000262C = 65535;
L00007bd4:
    *(bp - 0xc) = 0xf;
    (save) *(bp + 0xc);
    (save) *(bp + 0xa);
    (save)0x262c;
    (save)bp - 0xc;
    *(bp - 0xe) = L00000715();
    ax = *(bp - 0xe);
    *L0000262C = ax;
    if(*L0000262C < 0) {
    } else {
        *(bp - 0x12) = 0;
        *(bp - 0x14) = *L00002632;
        *(bp - 0x16) = *L00002630;
        *(bp - 0x18) = *L0000262A;
        *(bp - 0x1a) = *L0000262E;
        si = *(bp + 6);
        if(*si == 0) {
        } else {
            (save)bp - 0x14;
            (save)bp - 0x16;
            (save) *(bp + 8);
            (save)bp - 0x12;
            *(bp - 0x10) = L00000715();
            *L00002080 = *L00002080 + *(bp - 0x10);
            bx = *(bp - 0x18);
            ax = *(bp - 0x14);
            es = *L00000101;
            *%es:bx] = al;
            bx = *(bp - 0x1a);
            es = *L00000101;
            *%es:bx] = *(bp - 0x16);
        }
        (save)bp - 0x14;
        (save)bp - 0x16;
        (save)bp - 0x12;
        L00000715();
    }
    if(*L0000262C >= 0) {
        goto L00007bd4;
    }
    L00000715();
    L00000855();
    asm("retf 0x8");
    goto L00008548;
    cx = 8;
    L00000855();
    *(bp - 0xc) = *( *(bp + 6));
    if(*(bp - 0xc) != 0) {
    } else {
        *L00002626 = 0x641;
        *L00002628 = 0x20;
        goto L00007ce9;
    }
    if(*(bp - 0xc) != 1) {
    } else {
        *L00002626 = 0x1020;
        *L00002628 = 0x40;
        goto L00007ce9;
    }
    if(*(bp - 0xc) != 2) {
    } else {
        *L00002626 = 0x1020;
        *L00002628 = 0x40;
        goto L00007ce9;
    }
    (save)0x27;
    L00000855();
L00007ce9:
    *L00001F02 = 0;
    si = 0x1e2a;
    ebx = *L00001E34 & 65535;
    (save) *L00001E2C;
    L00000855();
    es = *(si + 2);
    ax = ( *L00002626 << 1) + *(si + 0xa);
    *(bp - 0x10) = ax;
    *(bp - 0xe) = *(bp - 0x10) + *L00002628 - 1;
    ax = *(bp - 0x10);
    goto L00007d41;
L00007d22:
    bx = *(bp - 0x10);
    es = *L00000101;
    bl = *%es:bx];
    if(0 == 0) {
    } else {
        *L00001F02 = *L00001F02 + 1;
    }
    ax = *(bp - 0x12) + 1;
L00007d41:
    *(bp - 0x12) = ax;
    if(ax <= *(bp - 0xe)) {
        goto L00007d22;
    }
    si = 0x2052;
    ebx = *L0000205C & 65535;
    es = *L00002054;
    *%es:bx] = 1;
    bx = 2 + *L0000205C;
    es = *L00002054;
    *%es:bx] = 0xb;
    bx = 4 + *L0000205C;
    es = *L00002054;
    *%es:bx] = 1;
    bx = 6 + *L0000205C;
    es = *L00002054;
    *%es:bx] = 0x15;
    L00000855();
    asm("retf 0x2");
    goto L00008548;
    cx = 0;
    L00000855();
    (save) *(bp + 6);
    L00000855();
    L00000855();
    asm("retf 0x2");
    goto L00008548;
    cx = 0;
    L00000855();
    L00000855();
    asm("retf 0x0");
    goto L00008548;
    cx = 6;
    L00000855();
    (save)0x1ff6;
    (save)1;
    *(bp - 0xc) = L00000855();
    ax = *( *(bp + 6));
    *(bp - 0xe) = ax;
    if(*(bp - 0xe) <= *(bp - 0xc)) {
    } else {
        *(bp - 0xe) = *(bp - 0xc);
    }
    bx = *(bp - 0xe) << 1;
    bx = bx + *L00002000;
    es = *L00001FF8;
    si = *(bp + 8);
    *(bp - 0x10) = *%es:bx] + *si;
    ax = *(bp - 0x10);
    L00000855();
    asm("retf 0x4");
    goto L00008548;
    cx = 0xa;
    L00000855();
    *(bp - 0xe) = 0;
    *L0000262A = 0;
    (save) *(bp + 8);
    (save) *(bp + 6);
    *(bp - 0xc) = L00000715();
    ax = *(bp - 0xc);
    *(bp - 0xe) = ax;
    if(*(bp - 0xe) != 0xff) {
    } else {
        *(bp - 0xe) = 0;
    }
    (save) *(bp + 8);
    (save) *(bp + 6);
    L00000715();
    ax = *L00002638;
    if(ax == 0) {
    } else {
        if(ax != 1) {
        } else {
            if(*L00001F02 != 0xe3) {
            } else {
                *(bp - 0xe) = 4;
            }
            if(*L00001F02 != 0xd9) {
            } else {
                *(bp - 0xe) = 5;
            }
            if(*L00001F02 != 0xca) {
            } else {
                *(bp - 0xe) = 6;
            }
            if(*L00001F02 != 0xc8) {
            } else {
                *(bp - 0xe) = 7;
            }
            if(*L00002084 != 1) {
            } else {
                si = *(bp + 6);
                if(*si > 0x52) {
                } else {
                    *(bp - 0x10) = 0x28;
                    if(*si != 0x52) {
                    } else {
                        *(bp - 0x10) = 7;
                    }
                    si = *(bp + 8);
                    ax = 0;
                    if(*si >= 0x21) {
                        eax = -1 & 65535;
                    }
                    cx = 0;
                    if(*si <= 0x2f) {
                        ecx = -1 & 65535;
                    }
                    if((cx & ax) == 0) {
                    } else {
                        *L0000261E = *(bp - 0x10);
                    }
                }
            }
            goto L00007fce;
        }
        *(bp - 0x12) = *L00001F02;
        if(*(bp - 0x12) != 0xcc) {
        } else {
            *(bp - 0xe) = 8;
            goto L00007fce;
        }
        if(*(bp - 0x12) != 0xcd) {
        } else {
            *(bp - 0xe) = 9;
            goto L00007fce;
        }
        if(*(bp - 0x12) != 0xca) {
        } else {
            *(bp - 0xe) = 0xa;
            goto L00007fce;
        }
        if(*(bp - 0x12) != 0xcb) {
        } else {
            *(bp - 0xe) = 0xb;
            goto L00007fce;
        }
        if(*(bp - 0x12) != 0xc1) {
        } else {
            *(bp - 0xe) = 0xc;
            goto L00007fce;
        }
        if(*(bp - 0x12) != 0xfe) {
        } else {
            *(bp - 0xe) = 0xd;
            goto L00007fce;
        }
        if(*(bp - 0x12) != 0xc4) {
        } else {
            *(bp - 0xe) = 0xe;
            goto L00007fce;
        }
        if(*(bp - 0x12) != 0xc5) {
        } else {
            *(bp - 0xe) = 0xf;
            goto L00007fce;
        }
        if(*(bp - 0x12) != 0xdd) {
        } else {
            *(bp - 0xe) = 0x10;
            goto L00007fce;
        }
        if(*(bp - 0x12) != 0xc7) {
        } else {
            *(bp - 0xe) = 0x11;
            goto L00007fce;
        }
        if(*(bp - 0x12) != 0xc9) {
        } else {
            *(bp - 0xe) = 0x12;
            goto L00007fce;
        }
        if(*(bp - 0x12) != 0xc8) {
        } else {
            *(bp - 0xe) = 0x13;
        }
L00007fce:
        ax = 0;
        if(*L00001F02 >= 0xf5) {
            eax = -1 & 65535;
        }
        cx = 0;
        if(*L00001F02 <= 0xf9) {
            ecx = -1 & 65535;
        }
        cx = cx & ax;
        ax = 0;
        if(*L00001F02 == 0xfe) {
            eax = -1 & 65535;
        }
        if((ax | cx) == 0) {
        } else {
            if(*L00002636 != 0) {
            } else {
                *L00002636 = 1;
                L00000715();
            }
            goto L0000803d;
        }
        if(*L00002636 == 0) {
        } else {
            *L00002636 = 0;
            L00000715();
        }
        goto L0000803d;
    }
    if(*L00001F02 != 0xda) {
    } else {
        *(bp - 0xe) = 3;
    }
L0000803d:
    *(bp - 0x14) = *(bp - 0xe);
    ax = *(bp - 0x14);
    L00000855();
    asm("retf 0x4");
    goto L00008548;
    cx = 0;
    L00000855();
    L00000855();
    asm("retf 0x0");
    goto L00008548;
    cx = 0;
    L00000855();
    L00000715();
    L00000855();
    L00000855();
    asm("retf 0x0");
    goto L00008548;
    cx = 0xa;
    L00000855();
    *L0000261E = *( *(bp + 6)) + 65472;
    si = *(bp + 8);
    ax = *si;
    *L00002638 = ax;
    *(bp - 0xc) = *L00002638;
    if(*(bp - 0xc) != 0) {
    } else {
        *L00001F26 = 0x50;
        *L00001F28 = 0x28;
        *L00002634 = 0x2c;
        *L00002082 = 0x960;
        goto L00008114;
    }
    if(*(bp - 0xc) != 1) {
    } else {
        *L00001F26 = 0x5a;
        *L00001F28 = 0x5b;
        *L00002634 = 0x1e;
        *L00002082 = 0x1060;
        goto L00008114;
    }
    if(*(bp - 0xc) != 2) {
    } else {
        *L00001F26 = 0x70;
        *L00001F28 = 0x49;
        *L00002634 = 0x27;
        *L00002082 = 0x1060;
        goto L00008114;
    }
    (save)0x27;
    L00000855();
L00008114:
    *L00002620 = 0xc;
    *L0000261A = 8;
    *L00002622 = *L00001F26 + 65522;
    *L0000261C = *L00001F28 + 65527;
    *(bp - 0x10) = 0;
    *(bp - 0xe) = *L00001F28 - 1;
    ax = 0;
    goto L00008161;
L00008144:
    bx = ax << 1;
    si = 0x1ff6;
    bx = bx + *L00002000;
    es = *L00001FF8;
    *%es:bx] = *(bp - 0x10);
    *(bp - 0x10) = *(bp - 0x10) + *L00001F26;
    ax = *(bp - 0x12) + 1;
L00008161:
    *(bp - 0x12) = ax;
    if(ax <= *(bp - 0xe)) {
        goto L00008144;
    }
    *(bp - 0x14) = 0x172;
    ax = 0;
    goto L00008192;
L00008174:
    bx = ax << 1;
    si = 0x2024;
    bx = bx + *L0000202E;
    es = *L00002026;
    *%es:bx] = *(bp - 0x14);
    *(bp - 0x14) = *(bp - 0x14) + 0x140;
    ax = *(bp - 0x12) + 1;
L00008192:
    *(bp - 0x12) = ax;
    if(ax <= 0x10) {
        goto L00008174;
    }
    L00000855();
    asm("retf 0x4");
    goto L00008548;
    cx = 0x2a;
    L00000855();
    *(bp - 0xe) = *( *(bp + 0xc));
    *(bp - 0x10) = *( *(bp + 0xa));
    *(bp - 0x12) = 0;
    *(bp - 0x14) = 0;
    *(bp - 0xc) = *( *(bp + 8));
    if(*(bp - 0xc) != 0) {
    } else {
        *(bp - 0x14) = 65535;
        goto L0000821c;
    }
    if(*(bp - 0xc) != 1) {
    } else {
        *(bp - 0x12) = 1;
        goto L0000821c;
    }
    if(*(bp - 0xc) != 2) {
    } else {
        *(bp - 0x14) = 1;
        goto L0000821c;
    }
    if(*(bp - 0xc) != 3) {
    } else {
        *(bp - 0x12) = 65535;
        goto L0000821c;
    }
    (save)0x27;
    L00000855();
L0000821c:
    ebx = *L00001E34 & 65535;
    es = *L00001E2C;
    *(bp - 0x18) = es;
    *L00001F04 = 0;
    si = *(bp + 6);
    *(bp - 0x16) = *si;
    ax = 1;
    goto L0000831b;
L00008240:
    *(bp - 0xe) = *(bp - 0xe) + *(bp - 0x12);
    *(bp - 0x10) = *(bp - 0x10) + *(bp - 0x14);
    if(*(bp - 0xe) < 0) {
    } else {
        if(*L00001F26 <= *(bp - 0xe)) {
        } else {
            if(*(bp - 0x10) < 0) {
            } else {
                if(*L00001F28 <= *(bp - 0x10)) {
                } else {
                    *(bp - 0x1a) = 0;
                    *(bp - 0x1c) = 1;
                    (save)bp - 0xe;
                    (save)bp - 0x10;
                    (save)bp - 0x1a;
                    (save)bp - 0x1c;
                    *(bp - 0x1e) = L00000715();
                    ax = *(bp - 0x1e);
                    *(bp - 0x20) = ax;
                    if(*(bp - 0x20) >= 0) {
                    } else {
                        bx = *(bp - 0x10) << 1;
                        si = 0x1ff6;
                        bx = bx + *L00002000;
                        es = *L00001FF8;
                        *(bp - 0x22) = *%es:bx] + *(bp - 0xe);
                        (save)bp - 0x18;
                        (save)bp - 0x22;
                        (save)0x2634;
                        (save)0x1f26;
                        *(bp - 0x24) = L00000855();
                        ax = *(bp - 0x24);
                        *(bp - 0x26) = ax;
                        if(ax == 0) {
                        } else {
                            if(ax == 0xff) {
                            } else {
                                *L00001F04 = 1;
                                goto L00008326;
                            }
                        }
                        (save)bp - 0xe;
                        (save)bp - 0x10;
                        L00000715();
                        if(*L00001F02 != 0xd7) {
                        } else {
                            *L00001F02 = 0xfe;
                            *L00001F04 = 0xbf;
                            goto L00008326;
                        }
                        ax = *L00001F06 + 1;
L0000831b:
                        *L00001F06 = ax;
                        if(ax <= *(bp - 0x16)) {
                            goto L00008240;
                        }
                    }
                }
            }
        }
    }
L00008326:
    if(*(bp - 0x20) < 0) {
    } else {
        *L00001F02 = *(bp - 0x20);
        goto L000083f4;
    }
    if(*L00001F04 == 0) {
    } else {
        *L00001F02 = 0xff;
        *L00001F04 = 0;
        if(*L00002638 != 0) {
        } else {
            (save) *(bp - 0x18);
            L00000855();
            ax = 0;
            goto L000083e0;
L00008366:
            ax = 0;
            goto L000083d4;
L0000836c:
            *(bp - 0x28) = *(bp - 0x2e) + *(bp - 0xe);
            *(bp - 0x2a) = *(bp - 0x30) + *(bp - 0x10);
            (save)bp - 0x28;
            (save)bp - 0x2a;
            *(bp - 0x2c) = L00000715();
            ax = *(bp - 0x2c);
            *(bp - 0x32) = ax;
            bx = *(bp - 0x32);
            es = *L00000101;
            bl = *%es:bx];
            bh = 0;
            ax = 0;
            *(bp - 0x34) = 0;
            cx = 0;
            if(0 > 0xb1) {
                ecx = -1 & 65535;
            }
            dx = 0;
            if(ax < 0xb7) {
                edx = -1 & 65535;
            }
            if((dx & cx) == 0) {
            } else {
                *L00001F02 = 0xfd;
                (save)bp - 0x32;
                L00000715();
            }
            ax = *(bp - 0x30) + 1;
L000083d4:
            *(bp - 0x30) = ax;
            if(ax <= 1) {
                goto L0000836c;
            }
            ax = *(bp - 0x2e) + 1;
L000083e0:
            *(bp - 0x2e) = ax;
            if(ax <= 1) {
                goto L00008366;
            }
        }
        goto L000083f4;
    }
    *L00001F02 = 0xff;
L000083f4:
    L00000855();
    asm("retf 0x8");
    goto L00008548;
    cx = 6;
    L00000855();
    *(bp - 0xc) = 0;
    *(bp - 0xe) = 2;
    (save) *(bp + 8);
    (save) *(bp + 6);
    (save)bp - 0xc;
    (save)bp - 0xe;
    *(bp - 0x10) = L00000715();
    *L00001F04 = *(bp - 0x10) + 1;
    L00000855();
    asm("retf 0x4");
    goto L00008548;
    cx = 0x12;
    L00000855();
    ebx = *L00001E34 & 65535;
    es = *L00001E2C;
    *(bp - 0xc) = es;
    si = *(bp + 8);
    ax = 0;
    if(*si < 0) {
        eax = -1 & 65535;
    }
    di = *(bp + 6);
    cx = 0;
    if(*di < 0) {
        ecx = -1 & 65535;
    }
    cx = cx | ax;
    dx = 0;
    if(*L00001F26 + 65534 < *si) {
        edx = -1 & 65535;
    }
    dx = dx | cx;
    cx = 0;
    if(*L00001F28 + 65534 < *di) {
        ecx = -1 & 65535;
    }
    if((cx | dx) == 0) {
    } else {
        *(bp - 0xe) = 3;
        goto L0000853d;
    }
    bx = *( *(bp + 6)) << 1;
    bx = bx + *L00002000;
    es = *L00001FF8;
    si = *(bp + 8);
    *(bp - 0x10) = *%es:bx] + *si;
    (save)bp - 0xc;
    (save)bp - 0x10;
    (save)0x2634;
    (save)0x1f26;
    *(bp - 0x12) = L00000855();
    ax = *(bp - 0x12);
    *(bp - 0x14) = ax;
    if(ax == 0) {
    } else {
        if(ax == 0xff) {
        } else {
            *(bp - 0x14) = 1;
        }
    }
    ax = 0;
    if(*(bp - 0x14) == 0) {
        eax = -1 & 65535;
    }
    cx = 0;
    if(*(bp - 0x14) == 0xff) {
        ecx = -1 & 65535;
    }
    if((cx | ax) == 0) {
    } else {
        *(bp - 0x1a) = 0;
        *(bp - 0x16) = 1;
        (save) *(bp + 8);
        (save) *(bp + 6);
        (save)bp - 0x1a;
        (save)bp - 0x16;
        *(bp - 0x18) = L00000715();
        ax = *(bp - 0x18);
        *(bp - 0x1c) = ax;
        if(*(bp - 0x1c) < 0) {
        } else {
            *(bp - 0x14) = 2;
        }
    }
    *(bp - 0xe) = *(bp - 0x14);
L0000853d:
    ax = *(bp - 0xe);
    L00000855();
    asm("retf 0x4");
L00008548:
    L00000855();
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    ch = ch + cl;
    asm("aas");
    asm("in al,dx");
    asm("int 0x3f");
    asm("in ax,dx");
    asm("int 0x3f");
    *L00003fcd();
    *(si - 0x33)();
    asm("aas");
    *(di - 0x66)();
    *(bx + si) = *(bx + si) - al;
    (save)bp;
    bl = bl | cl;
    asm("int 0x3f");
    *(bp - 0x33)();
    asm("aas");
    ax = *(bx - 0x66)() ^ 0x5500;
    ch = ch | cl;
    asm("aas");
    *(bx + si - 0x66)();
    *%ds:di+0x8] = *%ds:di+0x8] + dl;
    asm("int 0x3f");
    *(bx + di - 0x66)();
    di = di + 1;
    *(di + 8) = *(di + 8) + dl;
    asm("int 0x3f");
    *(bp + si - 0x33)();
    asm("aas");
    *(bp + di - 0x33)();
    asm("aas");
    *(si - 0x33)();
    asm("aas");
    *(di - 0x66)();
    (restore)sp;
    *(di + 8) = *(di + 8) + dl;
    asm("int 0x3f");
    *(bp - 0x66)();
    asm("o32 add [di+0x8],dl");
    asm("retf");
    asm("int 0x3f");
    ax = *(bx - 0x66)();
    asm("outsw");
    asm("int 0x3f");
    goto ( *(bx + si - 0x66));
    if(!( *(di + 8) = *(di + 8) + dl)) {
    }
    (save)bp;
    ch = ch | cl;
    asm("aas");
    goto ( *(bx + di));
    *(bx + si) = *(bx + si) + al;
    ch = ch + cl;
    asm("aas");
    ch = ch + cl;
    asm("aas");
    (save)es;
    asm("int 0x3f");
    (restore)es;
    asm("int 0x3f");
    bp = bp | cx;
    asm("aas");
    asm("Unknown opcode 0x0f");
    asm("int 0x3f");
    asm("adc cx,bp");
    asm("aas");
    asm("adc al,0xcd");
    asm("aas");
    (save)ss;
    asm("int 0x3f");
    (restore)ss;
    asm("int 0x3f");
    cl = cl ^ ch;
    asm("aas");
    cx = cx ^ bp;
    asm("aas");
    al = al ^ 0xcd;
    asm("aas");
    ax = ax ^ 0x3fcd;
    asm("%s int 0x3f");
    asm("aaa");
    asm("int 0x3f");
    ch :: cl;
    asm("aas");
    bp :: cx;
    asm("aas");
    ax = ax + 1;
    asm("int 0x3f");
    cx = cx + 1;
    asm("int 0x3f");
    dx = dx + 1;
    asm("int 0x3f");
    bp = bp + 1;
    asm("int 0x3f");
    si = si + 1;
    asm("int 0x3f");
    di = di + 1;
    asm("int 0x3f");
    ax = ax - 1;
    asm("int 0x3f");
    cx = cx - 1;
    asm("int 0x3f");
    dx = dx - 1;
    asm("int 0x3f");
    bx = bx - 1;
    asm("int 0x3f");
    si = si - 1;
    asm("int 0x3f");
    (save)ax;
    asm("int 0x3f");
    (save)cx;
    asm("int 0x3f");
    (save)dx;
    asm("int 0x3f");
    (save)bx;
    asm("int 0x3f");
    (save)si;
    asm("int 0x3f");
L00008634:
    (save)di;
    asm("int 0x3f");
    (restore)ax;
    asm("int 0x3f");
    (restore)cx;
    asm("int 0x3f");
    (restore)dx;
    asm("int 0x3f");
    (restore)bx;
    asm("int 0x3f");
    asm("Unknown opcode 0x62");
    asm("int 0x3f");
    asm("arpl bp,cx");
    asm("aas");
    asm("%f int 0x3f");
    asm("%g int 0x3f");
    asm("o32 int 0x3f");
    (save)0x3fcd;
    0x6a3f = bp * cx;
    asm("int 0x3f");
    asm("insb");
    asm("int 0x3f");
    asm("outsb");
    asm("int 0x3f");
    if(0x3f = bp * cx) {
        goto L00008634;
    }
    asm("aas");
    >= ? 0x8637 : ;
    asm("aas");
    < ? L0000863a : ;
    asm("aas");
    >= ? L0000863d : ;
    asm("aas");
    == ? L00008640 : ;
    asm("aas");
    != ? 0x8643 : ;
    asm("aas");
    <= ? L00008646 : ;
    asm("aas");
    > ? L00008649 : ;
    asm("aas");
    >= ? 0x864c : ;
    asm("aas");
    asm("xchg cl,ch");
    asm("aas");
    asm("xchg cx,bp");
    asm("aas");
    bp = cs;
    asm("aas");
    asm("Unknown opcode 0x8d");
    asm("int 0x3f");
    asm("Unknown opcode 0x8f");
    asm("int 0x3f");
    asm("int 0x3f");
    asm("xchg ax,cx");
    asm("int 0x3f");
    asm("xchg ax,bx");
    asm("int 0x3f");
    asm("xchg ax,sp");
    asm("int 0x3f");
    asm("xchg ax,bp");
    asm("int 0x3f");
    asm("xchg ax,si");
    asm("int 0x3f");
    asm("xchg ax,di");
    asm("int 0x3f");
    asm("cbw");
    asm("int 0x3f");
    *L00003FCD = ax;
    *di = *si;
    di = di + 1;
    si = si + 1;
    asm("int 0x3f");
    *di = *si;
    di = di + 4;
    si = si + 4;
    asm("int 0x3f");
    asm("cmpsb");
    asm("int 0x3f");
    asm("cmpsw");
    asm("int 0x3f");
    eax = *esi;
    esi = esi + 4;
    asm("int 0x3f");
    asm("scasb");
    asm("int 0x3f");
    cl = 0xcd;
    asm("aas");
    dl = 0xcd;
    asm("aas");
    bl = 0xcd;
    asm("aas");
    ah = 0xcd;
    asm("aas");
    ch = 0xcd;
    asm("aas");
    dh = 0xcd;
    asm("aas");
    bx = 0x3fcd;
    sp = 0x3fcd;
    asm("ror bp,0x3f");
    return;
    return;
    asm("int 0x3f");
    asm("Unknown opcode 0xc4");
    asm("int 0x3f");
    asm("Unknown opcode 0xc5");
    asm("int 0x3f");
    asm("Unknown opcode 0xc6");
    asm("int 0x3f");
    asm("retf");
    asm("int 0x3f");
    asm("int3");
    asm("int 0x3f");
    asm("int 0xcd");
    asm("aas");
    asm("into");
    asm("int 0x3f");
    asm("ror bp,1");
    asm("aas");
    asm("ror ch,cl");
    asm("aas");
    asm("ror bp,cl");
    asm("aas");
    asm("salc");
    asm("int 0x3f");
    asm("xlatb");
    asm("int 0x3f");
    asm("aas");
    asm("fxch st5");
    asm("aas");
    asm("fcmove st5");
    asm("aas");
    asm("fcmovne st5");
    asm("aas");
    (fsave)((frestore)) * st5 * st5;
    asm("aas");
    asm("Unknown opcode 0xdd");
    asm("int 0x3f");
    asm("fmulp st5");
    asm("aas");
    asm("Unknown opcode 0xdf");
    asm("int 0x3f");
    asm("loopne 0x86e8");
    asm("aas");
    asm("loope 0x86eb");
    asm("aas");
    asm("loop 0x86ee");
    asm("aas");
    asm("out 0xcd,al");
    asm("aas");
    asm("out 0xcd,ax");
    asm("aas");
    goto L0000cdeb;
    asm("aas");
    asm("out dx,al");
    asm("int 0x3f");
    asm("out dx,ax");
    asm("int 0x3f");
    asm("lock int 0x3f");
    asm("int1");
    asm("int 0x3f");
    asm("repne int 0x3f");
    asm("rep int 0x3f");
    asm("hlt");
    asm("int 0x3f");
    asm("cmc");
    asm("int 0x3f");
    asm("Unknown opcode 0xf6");
    asm("int 0x3f");
    asm("Unknown opcode 0xf7");
    asm("int 0x3f");
    asm("clc");
    asm("int 0x3f");
    asm("stc");
    asm("int 0x3f");
    asm("cli");
    asm("int 0x3f");
    asm("sti");
    asm("int 0x3f");
    asm("cld");
    asm("int 0x3f");
    asm("std");
    asm("int 0x3f");
    *si = *si + 1;
    asm("int 0x3f");
    *di = *di + 1;
    asm("int 0x3f");
    *L00003FCD = *L00003FCD + 1;
    *(bx + si) = *(bx + si) - 1;
    asm("int 0x3f");
    *(bx + di) = *(bx + di) - 1;
    asm("int 0x3f");
    *(bp + si) = *(bp + si) - 1;
    asm("int 0x3f");
    *(bp + di) = *(bp + di) - 1;
    asm("int 0x3f");
    *di = *di - 1;
    asm("int 0x3f");
    *L00003FCD = *L00003FCD - 1;
    *bx = *bx - 1;
    asm("int 0x3f");
    *bx();
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    asm("int 0x3f");
    *(bx + di)();
    asm("int 0x3f");
    *(bp + si)();
    asm("int 0x3f");
    *(bp + di)();
    asm("int 0x3f");
    *si();
    asm("int 0x3f");
    *di();
    asm("int 0x3f");
    ax = *L00003fcd();
    goto ( *(bx + si));
    asm("int 0x3f");
    goto ( *(bx + di));
    asm("int 0x3f");
    goto ( *(bp + si));
    asm("int 0x3f");
    goto ( *(bp + di));
    asm("int 0x3f");
    goto ( *si);
    asm("int 0x3f");
    goto ( *di);
    asm("int 0x3f");
    goto ( *L00003fcd);
    goto ( *bx);
    asm("int 0x3f");
    goto ( *(bx + si));
    asm("int 0x3f");
    goto ( *(bx + di));
    asm("int 0x3f");
    goto ( *(bp + si));
    asm("int 0x3f");
    goto ( *(bp + di));
    asm("int 0x3f");
    goto ( *si);
    asm("int 0x3f");
    goto ( *di);
    asm("int 0x3f");
    goto ( *L00003fcd);
    goto ( *bx);
    asm("int 0x3f");
    (save) *(bx + si);
    asm("int 0x3f");
    (save) *(bx + di);
    asm("int 0x3f");
    (save) *(bp + si);
    asm("int 0x3f");
    (save) *(bp + di);
    asm("int 0x3f");
    (save) *si;
    asm("int 0x3f");
    (save) *di;
    asm("int 0x3f");
    (save) *L00003FCD;
    (save) *bx;
    asm("int 0x3f");
    asm("Unknown opcode 0xff");
    ch :: cl;
    asm("aas");
    asm("Unknown opcode 0xff");
    bp :: cx;
    asm("aas");
    asm("Unknown opcode 0xff");
    cl :: ch;
    asm("aas");
    asm("Unknown opcode 0xff");
    cx :: bp;
    asm("aas");
    asm("Unknown opcode 0xff");
    al :: 0xcd;
    asm("aas");
    asm("Unknown opcode 0xff");
    ax :: 0x3fcd;
    asm("Unknown opcode 0xff");
    asm("%d int 0x3f");
    asm("Unknown opcode 0xff");
    asm("aas");
    asm("int 0x3f");
    *(bx + si - 0x33) = *(bx + si - 0x33) + 1;
    asm("aas");
    *(bx + di - 0x33) = *(bx + di - 0x33) + 1;
    asm("aas");
    *(bp + si - 0x33) = *(bp + si - 0x33) + 1;
    asm("aas");
    *(bp + di - 0x33) = *(bp + di - 0x33) + 1;
    asm("aas");
    *(si - 0x33) = *(si - 0x33) + 1;
    asm("aas");
    *(di - 0x33) = *(di - 0x33) + 1;
    asm("aas");
    *(bp - 0x33) = *(bp - 0x33) + 1;
    asm("aas");
    *(bx - 0x33) = *(bx - 0x33) + 1;
    asm("aas");
    *(bx + si - 0x33) = *(bx + si - 0x33) - 1;
    asm("aas");
    *(bx + di - 0x33) = *(bx + di - 0x33) - 1;
    asm("aas");
    *(bp + si - 0x33) = *(bp + si - 0x33) - 1;
    asm("aas");
    *(bp + di - 0x33) = *(bp + di - 0x33) - 1;
    asm("aas");
    *(si - 0x33) = *(si - 0x33) - 1;
    asm("aas");
    *(di - 0x33) = *(di - 0x33) - 1;
    asm("aas");
    *(bp - 0x33) = *(bp - 0x33) - 1;
    asm("aas");
    *(bx - 0x33) = *(bx - 0x33) - 1;
    asm("aas");
    *(bx + si - 0x33)();
    asm("aas");
    *(bx + di - 0x33)();
    asm("aas");
    *(bp + si - 0x33)();
    asm("aas");
    ax = *(bp + di)();
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    ch = ch + cl;
    asm("aas");
    bp = bp + cx;
    asm("aas");
    cl = cl + ch;
    asm("aas");
    cx = cx + bp;
    asm("aas");
    al = ax + 0x3fcd | 0xcd;
    asm("aas");
    asm("adc bp,cx");
    asm("aas");
    asm("adc cl,ch");
    asm("aas");
    asm("adc ax,0x3fcd");
    asm("sbb ch,cl");
    asm("aas");
    asm("sbb bp,cx");
    asm("aas");
    asm("sbb cl,ch");
    asm("aas");
    asm("sbb cx,bp");
    asm("aas");
    asm("sbb al,0xcd");
    asm("aas");
    asm("sbb ax,0x3fcd");
    (save)ds;
    asm("int 0x3f");
    (restore)ds;
    asm("int 0x3f");
    ch = ch & cl;
    asm("aas");
    bp = bp & cx;
    asm("aas");
    cl = cl & ch;
    asm("aas");
    cx = cx & bp;
    asm("aas");
    al = al & 0xcd;
    asm("aas");
    ax = ax & 0x3fcd;
    asm("%e int 0x3f");
    asm("daa");
    asm("int 0x3f");
    ch = ch - cl;
    asm("aas");
    bp = bp - cx;
    asm("aas");
    cl = cl - ch;
    asm("aas");
    cx = cx - bp;
    asm("aas");
    al = al - 0xcd;
    asm("aas");
    ax = ax - 0x3fcd;
    asm("%c int 0x3f");
    asm("das");
    asm("int 0x3f");
    ch = ch ^ cl;
    asm("aas");
    bp = bp ^ cx;
    asm("aas");
    cl :: ch;
    asm("aas");
    cx :: bp;
    asm("aas");
    al :: 0xcd;
L000088f0:
    asm("aas");
    ax :: 0x3fcd;
    asm("%d int 0x3f");
    asm("aas");
    asm("int 0x3f");
    bx = bx + 1;
    asm("int 0x3f");
    sp = sp + 1;
    asm("int 0x3f");
    sp = sp - 1;
    asm("int 0x3f");
    bp = bp - 1;
    asm("int 0x3f");
    asm("int 0x3f");
    (save)sp;
    asm("int 0x3f");
    (save)bp;
    asm("int 0x3f");
    (restore)sp;
    asm("int 0x3f");
    (restore)bp;
    asm("int 0x3f");
    (restore)si;
    asm("int 0x3f");
    (restore)di;
    asm("int 0x3f");
    asm("a32 int 0x3f");
    asm("outsw");
    asm("int 0x3f");
    if(di = di - 1) {
        goto L000088f0;
    }
    asm("aas");
    <= ? L000088f3 : ;
    asm("aas");
    > ? L000088f6 : ;
    asm("aas");
    ch = ch | 0x3f;
    bp = bp | 0x823f;
    asm("int 0x3f");
    bp = bp | 0x3f;
    ch & cl;
    asm("aas");
    bp & cx;
    asm("aas");
    asm("xchg ax,dx");
    asm("int 0x3f");
    asm("cwd");
    asm("int 0x3f");
    ax = L0000cda0();
    asm("aas");
    ax & 0x3fcd;
    *di = al;
    di = di + 1;
    asm("int 0x3f");
    *di = eax;
    di = di + 4;
    asm("int 0x3f");
    al = *esi;
    esi = esi + 1;
    asm("int 0x3f");
    asm("scasw");
    asm("int 0x3f");
    al = 0xcd;
    asm("aas");
    bh = 0xcd;
    asm("aas");
    ax = 0x3fcd;
    cx = 0x3fcd;
    dx = 0x3fcd;
    asm("Unknown opcode 0xc7");
    asm("int 0x3f");
    asm("enter 0x3fcd,0xc9");
    asm("int 0x3f");
    asm("retf 0x3fcd");
    asm("iret");
    asm("int 0x3f");
    asm("ror ch,1");
    asm("aas");
    asm("aam 0xcd");
    asm("aas");
    asm("aad 0xcd");
    asm("aas");
    *(bx + si) = *(bx + si) + 1;
    asm("int 0x3f");
    *(bx + di) = *(bx + di) + 1;
    asm("int 0x3f");
    *(bp + si) = *(bp + si) + 1;
    asm("int 0x3f");
    *(bp + di) = *(bp + di) + 1;
    asm("int 0x3f");
    *bx = *bx + 1;
    asm("int 0x3f");
    *(bx + si)();
    asm("int 0x3f");
    *(bx + di)();
    asm("int 0x3f");
    *(bp + si)();
    asm("int 0x3f");
    *(bp + di)();
    asm("int 0x3f");
    *si();
    asm("int 0x3f");
    *di();
    asm("int 0x3f");
    *bx();
    asm("int 0x3f");
    ax = *(bx + si)();
    asm("int 0x3f");
    goto ( *(bp + si - 0x33));
    asm("aas");
    goto ( *(bp + di - 0x33));
    asm("aas");
    goto ( *(si - 0x33));
    asm("aas");
    goto ( *(di - 0x33));
    asm("aas");
    goto ( *(bp - 0x33));
    asm("aas");
    goto ( *(bx - 0x33));
    asm("aas");
    *(bx + si) = *(bx + si) + 1;
    asm("int 0x3f");
    *(bx + di) = *(bx + di) + 1;
    asm("int 0x3f");
    *(bp + si) = *(bp + si) + 1;
    asm("int 0x3f");
    *(bp + di) = *(bp + di) + 1;
    asm("int 0x3f");
    *si = *si + 1;
    asm("int 0x3f");
    *di = *di + 1;
    asm("int 0x3f");
    *L00003FCD = *L00003FCD + 1;
    *bx = *bx + 1;
    asm("int 0x3f");
    *(bx + si) = *(bx + si) - 1;
    asm("int 0x3f");
    *(bx + di) = *(bx + di) - 1;
    asm("int 0x3f");
    *(bp + si) = *(bp + si) - 1;
    asm("int 0x3f");
    *(bp + di) = *(bp + di) - 1;
    asm("int 0x3f");
    *si = *si - 1;
    asm("int 0x3f");
    *di = *di - 1;
    asm("int 0x3f");
    *L00003FCD = *L00003FCD - 1;
    *bx = *bx - 1;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("adc ch,cl");
    asm("aas");
    asm("Unknown opcode 0xfe");
    asm("adc bp,cx");
    asm("aas");
    asm("Unknown opcode 0xfe");
    asm("adc cl,ch");
    asm("aas");
    asm("Unknown opcode 0xfe");
    asm("adc cx,bp");
    asm("aas");
    asm("Unknown opcode 0xfe");
    asm("adc al,0xcd");
    asm("aas");
    asm("Unknown opcode 0xfe");
    asm("adc ax,0x3fcd");
    asm("Unknown opcode 0xfe");
    (save)ss;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (restore)ss;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("sbb ch,cl");
    asm("aas");
    asm("Unknown opcode 0xfe");
    asm("sbb bp,cx");
    asm("aas");
    asm("Unknown opcode 0xfe");
    asm("sbb cl,ch");
    asm("aas");
    asm("Unknown opcode 0xfe");
    asm("sbb cx,bp");
    asm("aas");
    asm("Unknown opcode 0xfe");
    asm("sbb al,0xcd");
    asm("aas");
    asm("Unknown opcode 0xfe");
    asm("sbb ax,0x3fcd");
    asm("Unknown opcode 0xfe");
    (save)ds;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (restore)ds;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    ch = ch & cl;
    asm("aas");
    asm("Unknown opcode 0xfe");
    bp = bp & cx;
    asm("aas");
    asm("Unknown opcode 0xfe");
    cl = cl & ch;
    asm("aas");
    asm("Unknown opcode 0xfe");
    cx = cx & bp;
    asm("aas");
    asm("Unknown opcode 0xfe");
    al = al & 0xcd;
    asm("aas");
    asm("Unknown opcode 0xfe");
    ax = ax & 0x3fcd;
    asm("Unknown opcode 0xfe");
    asm("%e int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("daa");
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    ch = ch - cl;
    asm("aas");
    asm("Unknown opcode 0xfe");
    bp = bp - cx;
    asm("aas");
    asm("Unknown opcode 0xfe");
    cl = cl - ch;
    asm("aas");
    asm("Unknown opcode 0xfe");
    cx = cx - bp;
    asm("aas");
    asm("Unknown opcode 0xfe");
    al = al - 0xcd;
    asm("aas");
    asm("Unknown opcode 0xfe");
    ax = ax - 0x3fcd;
    asm("Unknown opcode 0xfe");
    asm("%c int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("das");
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    ch = ch ^ cl;
    asm("aas");
    asm("Unknown opcode 0xfe");
    bp = bp ^ cx;
    asm("aas");
    asm("Unknown opcode 0xfe");
    cl = cl ^ ch;
    asm("aas");
    asm("Unknown opcode 0xfe");
    cx = cx ^ bp;
    asm("aas");
    asm("Unknown opcode 0xfe");
    al = al ^ 0xcd;
    asm("aas");
    asm("Unknown opcode 0xfe");
    ax = ax ^ 0x3fcd;
    asm("Unknown opcode 0xfe");
    asm("%s int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("aaa");
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    ch :: cl;
    asm("aas");
    asm("Unknown opcode 0xfe");
    bp :: cx;
    asm("aas");
    asm("Unknown opcode 0xfe");
    cl :: ch;
    asm("aas");
    asm("Unknown opcode 0xfe");
    cx :: bp;
    asm("aas");
    asm("Unknown opcode 0xfe");
    al :: 0xcd;
    asm("aas");
    asm("Unknown opcode 0xfe");
    ax :: 0x3fcd;
    asm("Unknown opcode 0xfe");
    asm("%d int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("aas");
    asm("int 0x3f");
    *(bx + si - 0x33) = *(bx + si - 0x33) + 1;
    asm("aas");
    *(bx + di - 0x33) = *(bx + di - 0x33) + 1;
    asm("aas");
    *(bp + si - 0x33) = *(bp + si - 0x33) + 1;
    asm("aas");
    *(bp + di - 0x33) = *(bp + di - 0x33) + 1;
    asm("aas");
    *(si - 0x33) = *(si - 0x33) + 1;
    asm("aas");
    *(di - 0x33) = *(di - 0x33) + 1;
    asm("aas");
    *(bp - 0x33) = *(bp - 0x33) + 1;
    asm("aas");
    *(bx - 0x33) = *(bx - 0x33) + 1;
    asm("aas");
    *(bx + si - 0x33) = *(bx + si - 0x33) - 1;
    asm("aas");
    *(bx + di - 0x33) = *(bx + di - 0x33) - 1;
    asm("aas");
    *(bp + si - 0x33) = *(bp + si - 0x33) - 1;
    asm("aas");
    *(bp + di - 0x33) = *(bp + di - 0x33) - 1;
    asm("aas");
    *(si - 0x33) = *(si - 0x33) - 1;
    asm("aas");
    *(di - 0x33) = *(di - 0x33) - 1;
    asm("aas");
    *(bp - 0x33) = *(bp - 0x33) - 1;
    asm("aas");
    *(bx - 0x33) = *(bx - 0x33) - 1;
    asm("aas");
    asm("Unknown opcode 0xfe");
    (save)ax;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (save)cx;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (save)dx;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (save)bx;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (save)sp;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (save)bp;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (save)si;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (save)di;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (restore)ax;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (restore)cx;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (restore)dx;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (restore)bx;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (restore)sp;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (restore)bp;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (restore)si;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    (restore)di;
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("pusha");
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("popa");
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("Unknown opcode 0x62");
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("arpl bp,cx");
    asm("aas");
    asm("Unknown opcode 0xfe");
    asm("%f int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("%g int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("o32 int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("a32 int 0x3f");
    asm("Unknown opcode 0xfe");
    (save)0x3fcd;
    asm("Unknown opcode 0xfe");
    65087 = bp * cx;
    (save)-51;
    asm("aas");
    asm("Unknown opcode 0xfe");
    asm("Unknown opcode 0xfe");
    asm("insb");
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("insw");
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("outsb");
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    asm("outsw");
    asm("int 0x3f");
    asm("Unknown opcode 0xfe");
    if(!(0x3f = bp * cx)) {
        bp = bp + 1;
        di = di + 1;
        sp = sp - 1;
        cx = cx - 1;
        dx = dx + 1;
        asm("%c inc bp");
        (restore)ax;
        bp = bp + 1;
        *di = *di & ch;
        *si = *si & ah;
        *di = *di + bh;
        *(bx + di + 0x4150) = *(bx + di + 0x4150) + dh;
        (save)sp;
        ax = ax - 1;
        ax :: 0x674;
        *(bp + si + 0x8200) = *(bp + si + 0x8200) + dh;
        *(bx + si + 0x1cbf) = *(bx + si + 0x1cbf) + dh;
        *(bx + di + 2) = *(bx + di + 2) | sp;
        *%cs:0x48] = ax;
        ax = ax - di;
        if(ax >= 0x1000) {
            ax = 0x1000;
        }
        asm("cli");
        ss = di;
        sp = sp + 0x3c1e;
        asm("sti");
        asm("xchg ax,si");
        asm("lahf");
        *%cs:0x4a] = ah;
        asm("xchg ax,si");
        sp = sp & -2;
        ax = ax + di;
        *L00000002 = ax;
        bx = es;
    }
    bx = ~(bx - ax);
    ah = 0x4a;
    asm("int 0x21");
    *%ss:0x81] = ds;
    *%ss:0xb0] = *L0000002C;
    *%ss:0xae] = ds;
    *%ss:0xac] = 0x81;
    bp = 0;
    asm("cld");
    ax = ds;
    *%cs:0x4b] = ax;
    cx = *L00000012;
    es = cs;
    if(!(ds = *%cs:0x4b] + 0x10)) {
        (save)cx;
        asm("lds si,[0x14]");
        di = 0x36;
        cx = 8;
        asm("rep movsw");
        (restore)cx;
        (save) *%es:0x3c];
        (save) *%es:0x44];
        asm("retf");
    }
    L000008b8();
    ax = *%ss:0x81];
    ds = ax;
    es = ax;
    *L00000002 = *%cs:0x48];
    dh = *%cs:0x4a];
    L00000855();
    *%cs:0x46] = ss;
    ds = cs;
    L00008D73();
    asm("xchg ax,bx");
    L00008DF4();
    L00008E36();
    *L0000004F = L00008E6C();
    *L00000051 = dx;
    bp = 65535;
    L00008F52();
    *L0000004D = bp;
    L00008E95();
    si = 0;
    L00008EA9();
    L00009027();
    *%ss:0x10b] = *L0000004D;
    *%ss:0x10d] = *L0000004F;
    *%ss:0x10f] = *L00000051;
    (save) *L0000003C;
    (save) *L00000042;
    asm("retf");
    bx = 0x595;
    goto L00008cb6;
    bx = 0x57d;
    goto L00008cb6;
    bx = 0x5cc;
    goto L00008cb6;
    bx = 0x5da;
    goto L00008cb6;
    bx = 0x5bd;
    goto L00008cb6;
    bx = 0x5ae;
    goto L00008cb6;
    bx = 0x5f1;
L00008cb6:
    ds = 0x8b8;
    ah = 9;
    dx = 0x566;
    asm("int 0x21");
    dx = 0xc;
    asm("int 0x21");
    dx = bx;
    asm("int 0x21");
    dx = 0x617;
    asm("int 0x21");
    ax = 0x4c01;
    asm("int 0x21");
}

/*	Procedure: 0x00008CD5 - 0x00008CD7
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00008CD5()
{



    0x49 :: 0x4ab4;
}

/*	Procedure: 0x00008CD8 - 0x00008CDA
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00008CD8()
{



    0x4a :: 0x48b4;
}

/* DEST BLOCK NOT FOUND: 00008ced -> 00008ca4 */
/* DEST BLOCK NOT FOUND: 00008cef -> 00008c9a */
/* DEST BLOCK NOT FOUND: 00008d70 -> 00008ca9 */
/*	Procedure: 0x00008CDB - 0x00008D72
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00008CDB()
{



    ah = 0x48;
    asm("int 0x21");
    >= ? L00008ce7 : ;
    if(ax == 8) {
        asm("stc");
        return;
    }
    if(ax == 7) {
        goto L00008ca4;
    }
    goto L00008c9a;
    (save)ax;
    (save)dx;
    (save)es;
    (save)bx;
    *%cs:0x4f] = *%es:0x10d];
    *%cs:0x51] = *%es:0x10f];
    (restore)bx;
    *%cs:0x4d] = *%es:0x10b];
    L00008CD5();
    (restore)es;
    (restore)dx;
    (restore)ax;
    *%cs:0x53] = ss;
    *%cs:0x55] = sp;
    asm("int 0x21");
    asm("cli");
    ss = *%cs:0x53];
    sp = *%cs:0x55];
    asm("sti");
    asm("pushf");
    (save)ax;
    ds = cs;
    es = cs;
    bx = L00008D73();
    L00008DF4();
    ax = L00008E6C();
    if(*L0000004F == ax && *L00000051 == dx) {
        bp = *L0000004D;
        ax = L00008F52();
        if(*L0000004D == bp) {
            L00008E95();
            si = 65535;
            L00008EA9();
            L00009027();
            ds = 0x91c;
            (restore)ax;
            asm("popf");
            asm("retf");
        }
    }
    goto L00008ca9;
}

/* DEST BLOCK NOT FOUND: 00008d79 -> 00008dc6 */
/* DEST BLOCK NOT FOUND: 00008d8b -> 00008dc6 */
/* DEST BLOCK NOT FOUND: 00008d8f -> 00008c95 */
/*	Procedure: 0x00008D73 - 0x00008DC6
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00008D73()
{



    di = 0x5e;
    L00008FF6();
    >= ? L00008dc6 : ;
    L00008DC7();
    < ? L00008d92 : ;
L00008d80:
    di = 0x5e;
    L00008FD6();
    < ? L00008d92 : ;
    L00008FF6();
    >= ? L00008dc6 : ;
    goto L00008d80;
L00008d92:
    bx = 1;
L00008d95:
    ax = 0x4400;
    asm("int 0x21");
    if(dl & 0x80) {
        goto L00008c95;
    }
    if(bx = bx - 1) {
        goto L00008d95;
    }
    dx = 0x61b;
    ah = 9;
    asm("int 0x21");
    dx = 0x5c;
    ax = 0xc0a;
    asm("int 0x21");
    dl = 0xa;
    ah = 2;
    asm("int 0x21");
    ax = L00008FF6();
    if(di = ( *L0000005D & 0xff) + 0x5e) {
        goto L00008d92;
    }
}

/*	Procedure: 0x00008DC7 - 0x00008DF3
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 4
 */

L00008DC7()
{
	/* unknown */ void  es;



    es = *L0000004B;
    es = *%es:0x2c];
    ax = 0;
    di = 0;
    do {
        si = 0x57;
        cx = 5;
        asm("repe cmpsb");
        == ? L00008dea : ;
        cx = 65535;
        asm("repne scasb");
    } while(*%es:di] != al);
    asm("stc");
    *L00000055 = es;
    *L00000053 = di;
}

/* DEST BLOCK NOT FOUND: 00008e33 -> 00008ca9 */
/*	Procedure: 0x00008DF4 - 0x00008E35
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00008DF4()
{



    ax = 0;
    asm("cwd");
    bp = ds;
    cx = 0x1a;
    si = dx;
    di = 0x1c;
    L00008F08();
    if(*L0000001A == 0x5a4d) {
        dx = *L00000022 + *L00000030;
        ax = *L0000002E;
        bp = ds;
        cx = 0x36;
        si = 0;
        di = 0x10;
        ax = L00008F08();
        if(*L00000038 == 6 && *L0000003A == 0) {
            return;
        }
    }
    goto L00008ca9;
}

/* DEST BLOCK NOT FOUND: 00008e51 -> 00008cb3 */
/*	Procedure: 0x00008E36 - 0x00008E6B
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00008E36()
{



    dx = 0x1ac0;
    if(0x1ac0 == *L00000040) {
        if(0x5c4 <= 6) {
            goto L00008e54;
        }
        ax = 0x5c4;
        if(0x5c4 == 0x5c4) {
            goto L00008e54;
        }
    }
    goto L00008cb3;
L00008e54:
    dx = *L00000022;
    ax = *L0000003E;
    bp = 0x91c;
    cx = ax;
    si = 0;
    di = *L00000040 - ax;
    return(L00008F08());
}

/* DEST BLOCK NOT FOUND: 00008e8b -> 00008e94 */
/*	Procedure: 0x00008E6C - 0x00008E94
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00008E6C()
{



    dx = ( *L0000001E << 5) - *L00000022 - *L0000003C;
    ax = dx;
    dx = dx >> 0xc;
    ax = ax << 4;
    if(*L0000001C != 0) {
        ax = ax - 0x200 + *L0000001C;
    }
}

/*	Procedure: 0x00008E95 - 0x00008EA8
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00008E95()
{



    si = dx;
    di = ax;
    dx = *L00000022 + *L0000003C;
    ax = 0;
    return(L00008F08());
}

/* DEST BLOCK NOT FOUND: 00008f05 -> 00008cae */
/*	Procedure: 0x00008EA9 - 0x00008F07
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00008EA9()
{



    dx = *L00000032;
    cx = 0;
    ax = 0x4200;
    asm("int 0x21");
    di = *L0000003C;
    cx = 4;
    dx = 0x53;
L00008ec0:
    ah = 0x3f;
    asm("int 0x21");
    if(!(bp = bp - di) && ax == cx) {
        (save)bx;
        bx = *L00000055;
        if(bx < di) {
            if(si != 0) {
                goto L00008ef5;
            }
            bx = bx + 0x91c - bp;
        }
        es = bx + bp;
        bx = *L00000053;
        if(*%es:bx] < di) {
            *%es:bx] = *%es:bx] + 0x91c;
            *%es:bx] = *%es:bx] - bp;
        }
        *%es:bx] = *%es:bx] + bp;
L00008ef5:
        (restore)bx;
        if(*L00000020 = *L00000020 - 1) {
            goto L00008ec0;
        }
        *L00000030 = *L00000030 + bp;
        *L0000003C = *L0000003C + bp;
        return;
    }
    goto L00008cae;
}

/* DEST BLOCK NOT FOUND: 00008f4f -> 00008cae */
/*	Procedure: 0x00008F08 - 0x00008F51
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 8
 */

L00008F08()
{
	/* unknown */ void  bp;
	/* unknown */ void  ds;



    (save)cx;
    cx = 0;
    dx = dx << 1;
    asm("rcl cx,1");
    dx = dx << 1;
    asm("rcl cx,1");
    dx = dx << 1;
    asm("rcl cx,1");
    dx = dx << 1;
    asm("rcl cx,1");
    dx = dx + ax;
    asm("adc cx,+0x0");
    ax = 0x4200;
    asm("int 0x21");
    (restore)dx;
L00008f28:
    ds = bp;
    cx = 65520;
    if(si == 0) {
        cx = di;
    }
    ah = 0x3f;
    asm("int 0x21");
    < ? L00008f4f : ;
    if(ax == cx) {
        bp = bp + 0xfff;
        asm("sbb si,+0x0");
        if((di = di - ax) || di != 0) {
            goto L00008f28;
        }
        return;
    }
    goto L00008cae;
}

/* DEST BLOCK NOT FOUND: 00008fd0 -> 00008c9a */
/* DEST BLOCK NOT FOUND: 00008fd3 -> 00008c9f */
stack space not deallocated on return
/*	Procedure: 0x00008F52 - 0x00008FD5
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 16
 */

L00008F52()
{
	/* unknown */ void  ax;
	/* unknown */ void  dx;
	/* unknown */ void  bx;
	/* unknown */ void  es;



    ax = ax + 0xf;
    asm("adc dx,+0x0");
    ax = ax >> 4;
    si = 0;
L00008f6a:
    bx = 65535;
    L00008CDB();
    if(!(dx = (dx << 0xc) + ax)) {
        if(bx >= dx) {
            ax = L00008CDB();
            < ? L00008fd0 : ;
            if(ax <= bp && ax >= si) {
                si = ax;
                di = bx;
            }
            (save)ax;
            goto L00008f6a;
        }
        if(cx = cx + 1) {
            goto L00008c9f;
        }
        bx = si + di - dx;
        if(bx >= bp) {
            bx = bp;
        }
        ax = si;
        if(bx = bx - si) {
            goto L00008fb4;
        }
        es = si;
        L00008CD8();
        if(!(bx = bx - 1)) {
            bx = 65535;
            L00008CDB();
            >= ? L00008fd0 : ;
            ax = L00008CDB();
            < ? L00008fd0 : ;
L00008fb4:
            es = ax;
            bx = dx;
            ax = L00008CD8();
            < ? L00008fd0 : ;
            bp = ax;
            (restore)ax;
            if(ax != bp) {
                es = ax;
                ax = L00008CD5();
            }
            asm("loop 0x8fbf");
            return;
        }
    }
    goto L00008c9a;
}

/*	Procedure: 0x00008FD6 - 0x00008FF5
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00008FD6()
{



    (save)ds;
    asm("lds si,[0x53]");
    cx = 0x74;
    al = *esi;
    esi = esi + 1;
    if(al != 0x3b) {
        if(al != 0) {
            *di = al;
            di = di + 1;
            asm("loop 0x8fde");
            cx = cx - 1;
        }
        si = si - 1;
        cx :: 0x74;
        asm("cmc");
    }
    (restore)ds;
    *L00000053 = si;
}

/*	Procedure: 0x00008FF6 - 0x00009026
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00008FF6()
{



    (save)ds;
    ds = es;
    if(di != 0x5e) {
        al = *(di - 1);
        if(al != 0x3a && al != 0x5c && al != 0x2f) {
            *di = 0x5c;
            di = di + 1;
        }
    }
    cx = 0xa;
    asm("rep movsb");
    *di = cl;
    (restore)ds;
    dx = 0x5e;
    ax = 0x3d00;
    asm("int 0x21");
}

/* DEST BLOCK NOT FOUND: 0000902e -> 00008cae */
/* DEST BLOCK NOT FOUND: 0000aa07 -> 0000df18 */
/* DEST BLOCK NOT FOUND: 0000aa1c -> 00003c2f */
stack space not deallocated on return
/*	Procedure: 0x00009027 - 0x0000B6D2
 *	Argument size: 0
 *	Local size: 0
 *	Save regs size: 0
 */

L00009027()
{



    ah = 0x3e;
    asm("int 0x21");
    < ? L0000902e : ;
    return;
    goto L00008cae;
    if(!( *(di + 0x72) = *(di + 0x72) + al)) {
        < ? L00009058 : ;
        0x6f6c = *(bp + 0x20) * bp;
        asm("popa");
        0x5220 = *%fs:bp+0x67] * bp;
        (save)sp;
        bp = bp - 1;
        ah :: *(bx + si);
        asm("%g insw");
        asm("outsw");
        if(al = al & 0x4d) {
            goto L000090c8;
        }
        *(bx + di + 0x6c) = *(bx + di + 0x6c) & ah;
        asm("insb");
        asm("outsw");
        asm("arpl [bx+di+0x74],sp");
        if(0x6520 = *(bx + 0x6e) * bp) {
            goto L000090d0;
        }
        asm("outsw");
        < ? L00009085 : ;
        asm("popa");
        asm("outsb");
        asm("outsb");
        asm("outsw");
        if(!(bx = bx + 1)) {
            1818846752 = *(bp + 0x64) * ebp;
            *%gs:bx+di+0x6e] = *%gs:bx+di+0x6e] & ch;
            *(bx + si + 0x41) = *(bx + si + 0x41) & dl;
            (save)sp;
            al = ax - 1 & 0x44;
            0x4920 = *(bp + di + 0x6b) * si;
            asm("das");
            di = di - 1;
            if(*(di + 0x72) = *(di + 0x72) & ah) {
                goto L000090f6;
            }
            < ? L000090ad : ;
        }
        asm("outsb");
        if(cx = cx - 1) {
            goto L000090ee;
        }
        asm("insb");
        if(0x6f66 = *(si + 0x20) * sp) {
            goto L00009102;
        }
        asm("popa");
        == ? L000090bc : ;
        if(di = di - 1) {
            goto L0000910f;
        }
        *(bx + 0x66) = *(bx + 0x66) & ch;
        asm("insw");
        asm("outsw");
        if(*(di + 0x65) = *(di + 0x65) & ch) {
            goto L0000911e;
        }
    }
    al = al & 0x44;
    di = di - 1;
    (save)bx;
    asm("insw");
    asm("outsw");
    if(!( *(di + 0x65) = *(di + 0x65) & ch)) {
        ax = ax - 0x7261;
        asm("%g outsb");
        asm("popa");
        if(*(di + 0x72) = *(di + 0x72) & ah) {
            goto L0000912a;
        }
        < ? L000090e1 : ;
        asm("outsb");
        asm("arpl [bx+0x6d],bp");
        if(!(cx = cx - 1)) {
            == ? L0000912f : ;
            asm("bound bp,[si+0x65]");
L000090c8:
            if(*(di + 0x78) = *(di + 0x78) & ah) {
                goto L00009133;
            }
            asm("outsb");
            *%fs:bp+si+0x75] = *%fs:bp+si+0x75] & dh;
L000090d0:
            asm("outsb");
            ax = ax - 0x6974;
            asm("insw");
            *%gs:di+0x6f] = *%gs:di+0x6f] & ch;
            asm("%f jnz 0x914d");
            asm("%g and al,0x2e");
            ax = ax | 0x240a;
            asm("outsb");
            if(cx = cx - 1) {
                goto L00009160;
            }
            == ? L0000910d : ;
            < ? L00009164 : ;
L000090ee:
            asm("outsb");
            ax = ax - 0x6974;
            asm("insw");
            *%gs:di+0x6f] = *%gs:di+0x6f] & ch;
L000090f6:
            asm("%f jnz 0x9167");
            if(*%gs:bx+si+0x61] = *%gs:bx+si+0x61] & dh) {
                goto L00009169;
            }
            ah :: *(bx + si);
L00009102:
            *(bx + si) = *(bx + si) | (al & 0x59) + 0xb2;
            0x20 :: 65535;
L0000910f:
            asm("Unknown opcode 0xff");
            *L0000B200 = *L0000B200 + 1;
            *si = *si + cl;
            *(bx + si + 0x91c) = *(bx + si + 0x91c) + dh;
            al = al + *(bx + si);
            dl = 0;
L0000911e:
            sp = sp - 1;
            *(bx + si + 0x10) = *(bx + si + 0x10) + dh;
            ax :: *(bp + di + 0x5f);
        }
        si = si + 1;
        cx = cx - 1;
        sp = sp - 1;
    }
    bp = bp + 1;
L0000912a:
    (restore)di;
    cx = cx - 1;
    si = si - 1 + 1;
    di = di - 1;
    (save)cs;
    *(bp + si + 0x1a00) = *(bp + si + 0x1a00) + dh;
L00009133:
    *(bx + si + 0x14) = *(bx + si + 0x14) + dh;
    *(bx + di + 0x181) = *(bx + di + 0x181) + 0x701;
    *(bp + si + 0x1700) = *(bp + si + 0x1700) + dh;
    *(bx + si + 0xaa) = *(bx + si + 0xaa) + dh;
    asm("sbb al,0x9");
    bx = bx + 1;
    ax = ax + 0xb200;
    *di = *di + cl;
    *(bx + si + 0x3c20) = *(bx + si + 0x3c20) + dh;
    si :: *L0000F43C;
    (restore)ds;
    *bx = ~( *bx);
    *si = *si & bh;
    *(bx + si) = *(bx + si) | *L0000F43C & 47106;
L00009160:
    al :: 0;
    al :: 0;
    al :: 0;
    al :: 0x20;
L00009169:
    al :: 0x20;
    al :: 0;
    al :: 0;
    al :: 0;
    al :: 4;
    al :: 4;
    al :: 4;
    al :: 0;
    al :: 0x14;
    al :: 0x2c;
    *(bp + si + 0x1800) = *(bp + si + 0x1800) + dh;
    *(bx + si + 0x5c4) = *(bx + si + 0x5c4) + dh;
    al = al + *(bx + si);
    edx = 1 & 65535;
    ax = ax & 0x6b0;
    if(!( *(si + 0x26) = *(si + 0x26) + al)) {
        asm("outsb");
        asm("outsb");
        != ? 0x9203 : ;
        (restore)dx;
        asm("cmc");
        al :: 5;
        *(bp + si + 0x26) = *(bp + si + 0x26) + dl;
        (save)di;
        cx = cx + 1;
        sp = sp - 1;
        bx = bx - 1;
        al = (ah & dh) + *(bx + si);
        (restore)sp;
        asm("%e inc ax");
        ax = ax & 0xc;
        asm("bound sp,[0x4944]");
        (save)bx;
        bx = bx + 1;
        di = di - 1;
        (save)si;
        (save)dx;
        bp = bp + 1 + 1;
        sp = sp + 1;
        *(bx + di) = *(bx + di) & sp;
        ax = ax | 0x7200;
        asm("%e sub ax,0x4843");
        di = di - 1 - 1;
        (save)bx;
        bp = bp + 1;
        *(bx + di + 0x42) = *(bx + di + 0x42) & al;
        di = di - 1;
        (save)si;
        bp = bp + 1;
        asm("hlt");
        *L00004150 & ah;
        (save)bx;
        (save)bx;
        asm("sbb [bx+si],ax");
        *L00002525 = fs;
        ax = ax & 0x2a2a;
        *(bp + di + 0x48) = *(bp + di + 0x48) & al;
        cx = cx + 1;
        si = si - 1;
        di = di + 1;
        *(bx + 0x41) = *(bx + 0x41) & al;
        (save)bx;
        (save)ax;
        bp = bp + 1 - 1 + 1 + 1 + 1;
        sp = sp + 1;
        *(bp + si) = *(bp + si) & ch;
        dh = dh - ah;
        asm("adc ax,[bx+si]");
        *di = al;
        di = di + 1;
        *%es:bx+si] = *%es:bx+si] & ah;
        *(bx + si) = *(bx + si) & ah;
        *(bx + si) = *(bx + si) & ch;
        *(bx + si) = *(bx + si) ^ sp;
        cx = cx - 1;
        (save)bx;
        *(bp + 0x41) = *(bp + 0x41) & al;
        (save)bx;
        (save)sp;
        bp = bp + 1;
        (save)bx;
        (save)sp;
        sp = sp - si;
    }
    asm("adc al,[bx+si]");
    return;
    ax = ax & 0x2025;
    di = di + 1;
    cx = cx + 1;
    (save)bx;
    (save)ax;
    bp = bp - 1 + 1 + 1 + 1;
    sp = sp + 1;
    *(bx + di + 0x53) = *(bx + di + 0x53) & cl;
    ah :: *(bx + si);
    asm("adc al,0x0");
    (fsave)((frestore)) - (3.21911e-159);
    (save)di;
    cx = cx + 1;
    sp = sp - 1;
    bx = bx - 1;
    *(bx + 0x55) = *(bx + 0x55) & cl;
    (save)sp;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    (save)dx;
    (save)bx;
    bp = bp + 1;
    sp = sp - 1;
    si = si + 1;
    asm("%c or al,0x0");
    asm("%e lock dec bp");
    di = di - 1;
    (save)si;
    bp = bp + 1;
    *(bp + 0x4f) = *(bp + 0x4f) & cl;
    (save)di;
    ax = ax - 1;
    (save)dx;
    bp = bp + 1 + 1;
    *(bx + si) = *(bx + si) | al;
    *bx = *bx + ah;
    ax = ax & 0x4c25;
    bp = bp + 1;
    cx = cx + 1;
    (save)si;
    bp = bp + 1;
    *bx = *bx & al;
    *si = *si + cl;
    asm("daa");
    di = di - 1;
    (save)bp;
    (save)sp;
    asm("%c inc bp");
    (restore)ax;
    bp = bp + 1;
    asm("hlt");
    ax = ax + *(bx + si);
    asm("sbb [bx],ah");
    di = di - 1;
    (save)bp;
    (save)sp;
    asm("hlt");
    ax = ax | 0x2000;
    asm("daa");
    ax = ax & 0x4625;
    cx = cx - 1;
    di = di + 1;
    (save)sp;
    *(bx + 0x49) = *(bx + 0x49) & dl;
    (save)sp;
    ah = ax - 1 - 1 & dh;
    asm("adc [bx+si],ax");
    ah = ah ^ *bx;
    bp = bp + 1;
    si = si - 1;
    (save)sp;
    (save)dx;
    *(si + 0x49) = *(si + 0x49) & al;
    (save)dx;
    bp = bp + 1 + 1;
    bx = bx + 1;
    (save)sp;
    cx = cx - 1;
    di = di - 1;
    si = si - 1;
    ah :: *(bx + si);
    asm("hlt");
    asm("adc ax,[bx+si]");
    ax = ax - 1;
    asm("daa");
    (save)sp;
    ax = ax - 1;
    bp = bp + 1;
    *(bp + si + 0x41) = *(bp + si + 0x41) & cl;
    cx = cx - 1;
    sp = sp - 1;
    *(bp + si + 0x41) = *(bp + si + 0x41) & al;
    (save)dx;
    (save)bx;
    *(bx + si + 0x4f) = *(bx + si + 0x4f) & cl;
    sp = sp - 1;
    sp = sp + 1;
    asm("%c hlt");
    ax = ax | *(bx + si);
    asm("pusha");
    asm("daa");
    si = si - 1;
    di = di - 1;
    (save)sp;
    ax = ax - 1;
    cx = cx - 1;
    si = si - 1;
    di = di + 1;
    (save)sp;
    asm("hlt");
    asm("sbb al,0x0");
    if(!( *(bx + si + 0x49) = *(bx + si + 0x49) & cl)) {
        ax = ax & 0x454d;
        (save)dx;
        bx = bx + 1;
        ax = ax - 1;
        cx = cx + 1;
        si = si - 1;
        (save)sp;
        *(bp + di + 0x49) = *(bp + di + 0x49) & cl;
        sp = sp - 1;
        sp = sp - 1;
        bp = bp + 1;
        sp = sp + 1;
        *(bp + si + 0x59) = *(bp + si + 0x59) & al;
        *(bp + si + 0x4c) = *(bp + si + 0x4c) & al;
        di = di - 1;
        (save)di;
        *(bx + 0x46) = *(bx + 0x46) & cl;
        *(bx + si) = *(bx + si) & al;
        *(bx + si + 0x3f) = *(bx + si + 0x3f) + al;
        *(bx + si) = *(bx + si) + dl;
        cx = cx + 1;
        if(*(bx + si) = *(bx + si) + al) {
            goto L00009326;
        }
    }
    asm("adc al,0xae");
    (restore)es;
    asm("aas");
    dl = dl | bh;
    di = di & *L0000000F;
    *di = *si;
    di = di + 1;
    si = si + 1;
    asm("daa");
    *(bx + di + 0x54) = *(bx + di + 0x54) & al;
    (save)sp;
    cx = cx + 1;
    bx = bx + 1 - 1;
    *(bp + 0x49) = *(bp + 0x49) & al;
    (restore)dx;
    (restore)dx;
    sp = sp - 1;
    bp = bp + 1;
    (save)bx;
    asm("hlt");
    (save)ss;
    *(bx + si + 0x4127) = *(bx + si + 0x4127) + bh;
    (save)sp;
    (save)sp;
    cx = cx + 1;
    bx = bx + 1 - 1;
    *(bx + 0x4e) = *(bx + 0x4e) & cl;
    *(bx + 0x55) = *(bx + 0x55) & al;
    cx = cx + 1;
    (save)dx;
    sp = sp + 1;
    *(di + 0x49) = *(di + 0x49) & cl;
    (save)bx;
    (save)bx;
    bp = bp + 1;
    sp = sp + 1;
    ax = ax | 53760;
    asm("daa");
    di = di + 1;
    (save)bp;
    cx = cx + 1;
    (save)dx;
    sp = sp + 1;
    *(bp + di + 0x54) = *(bp + di + 0x54) & dl;
L00009326:
    (save)dx;
    (save)bp;
    bx = bx + 1 - 1;
    *(bx + di + 0xa) = *(bx + di + 0xa) & ah;
    asm("in al,0x27");
    *(bx + si + 0x2e) = *(bx + si + 0x2e) & cl;
    (save)ax;
    *%cs:bp+si+0x4c] = *%cs:bp+si+0x4c] & al;
    di = di - 1;
    (save)di;
    ax = ax | 61952;
    asm("daa");
    ax = ax & 0x5547;
    cx = cx + 1;
    (save)dx;
    sp = sp + 1;
    *(bp + di + 0x49) = *(bp + di + 0x49) & cl;
    sp = sp - 1;
    sp = sp - 1;
    bp = bp + 1;
    sp = sp + 1;
    asm("hlt");
    asm("adc al,[bx+si]");
    ax = al + 0x28 & 0x5525;
    (save)bx;
    bp = bp + 1;
    *(bx + 0x48) = *(bx + 0x48) & dl;
    cx = cx - 1;
    bx = bx + 1;
    ax = ax - 1;
    *(di + 0x41) = *(di + 0x41) & cl;
    di = di + 1;
    cx = cx - 1;
    bx = bx + 1;
    asm("aas");
    asm("sbb ch,[bx+si]");
    (restore)cx;
    di = di - 1;
    (save)bp;
    *(bx + si + 0x41) = *(bx + si + 0x41) & cl;
    (save)si;
    bp = bp + 1;
    *(bp + 0x4f) = *(bp + 0x4f) & cl;
    *(bp + si) = *(bp + si) & al;
    *(bp + si) = *(bp + si) + ch;
    *(bp + di + 0x21) = *(bp + di + 0x21) - dh;
    *(bx + si) = *(bx + si) ^ ch;
    (save)sp;
    (save)sp;
    cx = cx + 1 + 1;
    bx = bx + 1 - 1;
    *(bx + 0x49) = *(bx + 0x49) & dl;
    (save)sp;
    ax = ax - 1;
    *(bx + si) = *(bx + si) & al;
    al = al + dh;
    asm("rol byte [bx+si],0x0");
    al = 0x41;
    asm("adc al,0x0");
    *di = *di - ah;
    ax = ax - 1 & 0x5441;
    (save)sp;
    cx = cx + 1;
    bx = bx + 1 - 1;
    bp = bp + 1;
    sp = sp + 1;
    *(bp + si + 0x59) = *(bp + si + 0x59) & al;
    *(bx + 0x55) = *(bx + 0x55) & al;
    cx = cx + 1;
    (save)dx;
    sp = sp + 1;
    *(bx + si) = *(bx + si) & ax;
    *(si + 0xb42) = *(si + 0xb42) + cl;
    *(si + 0x28) = *(si + 0x28) + ah;
    *di = *di & ch;
    ax = ax - 0x2020;
    bp = bp - 1;
    cx = cx - 1;
    (save)bx;
    (save)bx;
    bp = bp + 1;
    sp = sp + 1;
    asm("hlt");
    *(bx + si) = *(bx + si) + al;
    asm("enter 0x41,0x0");
    ax = ax + 1;
    cx = cx + 1;
    asm("int 0xcc");
    sp = sp - 1;
    asm("aas");
    *(bx + si) = *(bx + si) | ax;
    *(bx + si) = *(bx + si) - 0x20;
    ax = ax - 0x202d;
    dx = dx + 1;
    sp = sp - 1;
    di = di - 1;
    (save)di;
    *(bp + si) = *(bp + si) & ah;
    *(bx + si) = *(bx + si) - ah;
    ax = ax + 0x8e00 - 1;
    asm("%c push ax");
    asm("%c hlt");
    ax = ax | *(bx + si);
    asm("cbw");
    *(bx + si + 0x25) = *(bx + si + 0x25) - al;
    (restore)cx;
    di = di - 1;
    (save)bp;
    *(si + 0x49) = *(si + 0x49) & al;
    bp = bp + 1;
    sp = sp + 1;
    asm("%c hlt");
    ax = ax + 0xa800;
    *(bp + di + 0x50) = *(bp + di + 0x50) - dl;
    bp = bp + 1;
    cx = cx + 1;
    bx = bx - 1;
    asm("hlt");
    asm("Unknown opcode 0x0f");
    *(bp + si + 0x2528) = *(bp + si + 0x2528) + dh;
    si = si - 1;
    di = di - 1;
    dx = dx + 1;
    di = di - 1;
    sp = sp + 1;
    (restore)cx;
    *(bx + di + 0x4e) = *(bx + di + 0x4e) & al;
    (save)bx;
    (save)di;
    bp = bp + 1;
    (save)dx;
    (save)bx;
    asm("hlt");
    asm("Unknown opcode 0xc6");
    *di = *di - ah;
    si = si - 1;
    *(bp + si + 0x45) = *(bp + si + 0x45) & dl;
    (save)bx;
    (save)ax;
    di = di - 1 - 1;
    si = si - 1;
    (save)bx;
    bp = bp + 1;
    ax = ax | *(bx + si);
    asm("salc");
    *di = *di - ah;
    (save)sp;
    ax = ax - 1;
    bp = bp + 1;
    *(bx + 0x55) = *(bx + 0x55) & al;
    cx = cx + 1;
    (save)dx;
    sp = sp + 1;
    ah = ah & dh;
    *(bx + si) = *(bx + si) | al;
    asm("out 0x28,al");
    (save)bx;
    cx = cx + 1;
    sp = sp - 1;
    (save)bp;
    (save)sp;
    bp = bp + 1;
    (save)bx;
    asm("%c pop es");
    dl = dl + dh;
    *(bp + di + 0x43) = *(bp + di + 0x43) - dl;
    di = di - 1;
    (save)di;
    sp = sp - 1;
    (save)bx;
    asm("%c hlt");
    asm("sbb ax,0xfe00");
    *di = *di - ah;
    (save)bx;
    di = di - 1;
    (save)dx;
    *%cs:bx+si] = *%cs:bx+si] & ah;
    cx = dx - 1;
    *(bp + di + 0x41) = *(bp + di + 0x41) & al;
    si = si - 1;
    asm("daa");
    (save)sp;
    *(si + 0x41) = *(si + 0x41) & dl;
    sp = sp - 1;
    bx = bx - 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    asm("%c hlt");
    *(bx + si) = *(bx + si) & al;
    *(bx + di) = *(bx + di) & ch;
    ax = ax + 1 & 0x4854;
    cx = cx + 1;
    si = si - 1;
    bx = bx - 1;
    (save)bx;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    *(si + 0x48) = *(si + 0x48) & dl;
    *(si + 0x45) = *(si + 0x45) & cl;
    (save)sp;
    (save)sp;
    bp = bp + 1 + 1;
    (save)dx;
    *(si + 0x45) = *(si + 0x45) & al;
    sp = sp - 1;
    cx = cx - 1;
    (save)si;
    bp = bp + 1;
    cx = dx;
    *(bx + si) = *(bx + si) + al;
    ax = ax + 1 + 1;
    if(!( *(bx + si) = *(bx + si) + al)) {
        *(bx + si) = *(bx + si) + al;
        si = 0x742;
        *(bx + 0x76b) = *(bx + 0x76b) + dl;
        ax = ax - 1;
        (save)dx;
        bp = bp + 1 + 1;
        asm("daa");
        (save)bx;
        dl :: 0;
        (save)es;
        *(si + 0x29) = *(si + 0x29) + bl;
        *(bx + 0x4f) = *(bx + 0x4f) & al;
        sp = sp - 1;
        sp = sp + 1;
        *(bp + 0x25) = *(bp + 0x25) - ebx;
        ax = ax + *%cs:bx+si] & 0xc13;
        *(bp + 0x29) = *(bp + 0x29) + ch;
        si = si + 1;
        di = di - 1 - 1;
        sp = sp + 1;
        *L00005720 = *L00005720 & ah;
        cx = cx + 1;
        (save)sp;
        bp = bp + 1;
        (save)dx;
        if(*(bx + si) = *(bx + si) & ax) {
            goto L000094f3;
        }
        ax = ax & 0x2025;
        *(bx + si) = *(bx + si) & ah;
        *(bx + si) = *(bx + si) & ah;
        *(bx + si) = *(bx + si) & ah;
        (save)di;
        bp = bp + 1;
    }
    *(bp + di + 0x45) = *(bp + di + 0x45) & dl;
    sp = sp - 1;
    sp = sp - 1;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    di = di - 1;
    sp = sp + 1;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    *(si + 0x52) = *(si + 0x52) & dl;
    cx = cx + 1;
    (save)si;
    bp = bp + 1;
    sp = sp - 1;
    asm("%c hlt");
    (save)ds;
    *(si + 0x2029) = *(si + 0x2029) + ah;
    *(bx + si) = *(bx + si) & ah;
L000094f3:
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    bp = bp + 1;
    cx = cx + 1;
    bx = bx + 1;
    ax = ax - 1;
    *bx = *bx & ah;
    sp = sp + 1;
    cx = cx + 1;
    (restore)cx;
    asm("daa");
    *(bx + 0x46) = *(bx + 0x46) & cl;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    di = di - 1;
    sp = sp + 1;
    *(bx + 0x49) = *(bx + 0x49) & dl;
    sp = sp - 1;
    sp = sp - 1;
    (restore)ds;
    dh = dh + al;
    *(bx + si) = *(bx + si) - sp;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    bx = bx - 1;
    bp = bp + 1 + 1;
    (save)ax;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    *(bp + 0x45) = *(bp + 0x45) & al;
    sp = sp + 1;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    *(bx + 0x4e) = *(bx + 0x4e) & cl;
    bp = bp + 1;
    *(si + 0x41) = *(si + 0x41) & al;
    (restore)cx;
    asm("hlt");
    asm("sbb ax,[bx+si]");
    goto L00002020;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    di = di - 1;
    si = si + 1;
    *(si + 0x52) = *(si + 0x52) & dl;
    cx = cx + 1;
    (save)si;
    bp = bp + 1;
    sp = sp - 1;
    *(bx + si) = *(bx + si) & ch;
    di = di - 1;
    si = si - 1;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    di = di - 1;
    (save)sp;
    *L000000F4 = *L000000F4 - bp;
    *(bx + si + 0x41) = *(bx + si + 0x41) + dl;
    *(bx + si) = *(bx + si) + al;
    asm("loopne 0x959a");
    asm("int 0xcc");
    asm("int3");
    ax :: 0x11;
    (save)ss;
    ax = ah - *di & 0x2020;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & al;
    (save)bx;
    (save)sp;
    *(bx + di + 0x53) = *(bx + di + 0x53) & cl;
    *bx = *bx & dh;
    asm("verw [si]");
    ah = ah - *(bx + si);
    di = di + 1 - 1;
    sp = sp - 1;
    sp = sp + 1;
    *(bx + si + 0x45) = *(bx + si + 0x45) & dl;
    (save)dx;
    *bx = *bx & ah;
    sp = sp + 1;
    cx = cx + 1;
    (restore)cx;
    asm("daa");
    asm("hlt");
    asm("sbb ax,[bx+si]");
    ax = ax + 1 - *di & 0x2025;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    *(di + 0x41) = *(di + 0x41) & cl;
    (restore)ax;
    cx = cx - 1;
    bp = bp - 1;
    (save)bp;
    bp = bp - 1;
    *(bx + si + 0x55) = *(bx + si + 0x55) & dl;
    (save)dx;
    bx = bx + 1;
    ax = ax - 1;
    cx = cx + 1;
    (save)bx;
    bp = bp + 1;
    ah :: *(bx + si);
    asm("xchg ax,si");
    ah = ax + 0x6000 - *(bx + si);
    sp = sp + 1;
    cx = cx + 1;
    (restore)cx;
    (save)bx;
    asm("hlt");
    *(bx + si) = *(bx + si) + al;
    asm("lock inc cx");
    ax = ax + 0x6e00;
    dl = dl - *(si + 0x41);
    bx = bx - 1;
    bp = bp + 1;
    si = si - 1;
    ax = ax - *(bx + si);
    *(bx + si) = *(bx + si) + al;
    *L00007C00 = *L00007C00 + al;
    al = al - *(bp + si + 0x4f);
    (save)bp;
    di = di + 1;
    (save)sp;
    ax = ax - 1 + *(bx + si);
    asm("xchg ch,[bp+si]");
    ax = ax & 0x2525;
    eax = *esi;
    esi = esi + 4;
    (save)cs;
    *(bp + 0x202a) = *(bp + 0x202a) + cl;
    sp = sp + 1;
    cx = cx + 1;
    (restore)cx;
    (save)bx;
    *(bx + 0x46) = *(bx + 0x46) & cl;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    di = di - 1;
    sp = sp + 1;
    *(bp + di) = *(bp + di) & ah;
    *(bx + si + 0x252a) = *(bx + si + 0x252a) + ah;
    ax = ax & 0x4f57;
    (save)bp;
    sp = sp - 1;
    sp = sp + 1;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    *(si + 0x49) = *(si + 0x49) & cl;
    bx = bx - 1;
    bp = bp + 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(di + 0x41) = *(di + 0x41) & al;
    (save)dx;
    si = si - 1;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & dl;
    bp = bp - 1 + 1;
    *(bx + 0x4f) = *(bx + 0x4f) & al;
    sp = sp - 1;
    sp = sp + 1;
    asm("aas");
    asm("hlt");
    asm("adc ax,0xc800");
    ax = al - *(bx + si + 0x25) - 1;
    (save)dx;
    bp = bp + 1 + 1;
    asm("daa");
    (save)bx;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & dl;
    bp = bp - 1 + 1;
    *(di + 0x41) = *(di + 0x41) & cl;
    cx = cx - 1;
    sp = sp - 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    asm("hlt");
    ax = ax | *(bx + si);
    asm("loop 0x9658");
    sp = sp + 1;
    bp = bp + 1;
    sp = sp - 1;
    cx = cx - 1;
    (save)si;
    bp = bp + 1;
    (save)dx;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bp + di) = *(bp + di) & ah;
    *(bx + si) = *(bx + si) + ax;
    asm("repne sub ch,[0x5f4]");
    ah = al + bh - *(bx + si);
    bp = bp - 1;
    cx = cx + 1 - 1;
    sp = sp - 1;
    bx = bx - 1;
    ax = ax + *(bx + si);
    *(di + 0x4c) = *(di + 0x4c) & cl;
    ch = ch + *(bp + di) | *(bp + di);
    ax = ax & 0x76d;
    *(bx + si) = *(bx + si) + dl;
    dx = dx - *(bx + 0x45);
    cx = cx + 1;
    (save)ax;
    di = di - 1;
    si = si - 1;
    (save)bx;
    asm("hlt");
    *(bx + si) = *(bx + si) + al;
    asm("sbb al,0x2b");
    ax = ax + 0x2000 - *(bx + di + 0x52);
    bp = bp - 1;
    di = di - 1;
    (save)dx;
    asm("hlt");
    *(bx + si + 0x448d) = *(bx + si + 0x448d) + ah;
    *(bx + si) = *(bx + si) + al;
    asm("rol byte [bx+si+0x2],0x0");
    ch = ch ^ *(bp + di);
    *%cs:di] = *%cs:di] & dl;
    *(bx + si) = *(bx + si) + bh;
    sp = sp - *(bx + si);
    (save)dx;
    di = di - 1;
    dx = dx + 1 + 1;
    bp = bp + 1;
    cx = dx;
    *(bx + di + 0x4e) = *(bx + di + 0x4e) & cl;
    *(bx + si + 0x52) = *(bx + si + 0x52) & dl;
    di = di - 1 + 1;
    (save)dx;
    bp = bp + 1;
    (save)bx;
    (save)bx;
    ah = ah & dh;
    asm("o32 push es");
    ax = ax + 1;
    asm("o32 xchg bh,[bx]");
    si = si ^ *(bp + di);
    *(bx + si) = *(bx + si) + al;
    ax = (ax ^ *(bx + si)) + 1;
    *(bx + si) = *(bx + si) + al;
    cl = cl & al;
    asm("int 0xcc");
    sp = sp - 1;
    ax = ax + 1;
    (restore)sp;
    (restore) *(bp + si + 0x3f);
    *(bx + si + 0x40) = *(bx + si + 0x40) + ah;
    *(bx + si) = *(bx + si) + al;
    asm("rol al,0x33");
    si = si ^ *(bp + di);
    asm("aas");
    *(bx + si) = *(bx + si) + al;
    *(bx + di + 1) = *(bx + di + 1) ^ al;
    *(bp + si + 0x202b) = *(bp + si + 0x202b) + al;
    *(bp + si + 0x9999) = *(bp + si + 0x9999) + bl;
    asm("%d pop ss");
    *(si + 0x252b) = *(si + 0x252b) + cl;
    (restore)cx;
    di = di - 1;
    (save)bp;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & al;
    (save)bp;
    sp = sp - 1;
    sp = sp + 1;
    si = si - 1;
    asm("daa");
    (save)sp;
    *(bx + 0x52) = *(bx + 0x52) & al;
    cx = cx + 1;
    dx = dx + 1;
    *(si + 0x48) = *(si + 0x48) & dl;
    bp = bp + 1;
    ax = ah & dh & 0xa800;
    bx = bx - *(bp + 0x25);
    ax = ax & 0x2020;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    di = di + 1;
    bp = bp + 1;
    si = si - 1;
    bp = bp + 1;
    (save)dx;
    cx = cx + 1;
    sp = sp - 1;
    *(bx + si + 0x55) = *(bx + si + 0x55) & dl;
    (save)dx;
    (save)ax;
    di = di - 1;
    (save)bx;
    bp = bp + 1;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    (save)ax;
    (save)dx;
    cx = cx - 1;
    bx = bx + 1;
    bp = bp + 1;
    (save)bx;
    ax = ax & 0xef4;
    dl = dl + dl;
    sp = sp - *di;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    sp = sp + 1;
    (save)bp;
    si = si - 1;
    di = di + 1;
    bp = bp + 1;
    di = di - 1;
    si = si - 1;
    (save)cs;
    ah = ah + ah;
    sp = sp - *di;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    di = di - 1;
    (save)bp;
    (save)sp;
    (save)bx;
    cx = cx - 1;
    sp = sp + 1;
    bp = bp + 1;
    *(bx + si) = *(bx + si) + al;
    *(bp + si + 1) = 0;
    asm("cli");
    dx = dx - *(bp + di);
    asm("adc ax,0x0");
    al = al - 0x20;
    (save)bp;
    (save)bx;
    bp = bp + 1;
    *(bx + 0x4e) = *(bx + 0x4e) & cl;
    sp = sp - 1;
    (restore)cx;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si + 0x52) = *(bx + si + 0x52) & dl;
    cx = cx - 1;
    bx = bx + 1;
    bp = bp + 1;
    (save)bx;
    *(bp + si) = *(bp + si) + bl;
    al = (ax & 0xbf4) - 0x25;
    dx = dx + 1;
    cx = cx + 1;
    si = si - 1;
    bx = bx - 1;
    *(di + 0x4d) = *(di + 0x4d) & al;
    (save)ax;
    cx = sp;
    asm("hlt");
    *(bx + si) = *(bx + si) + al;
    *(bx + di) = *(bx + di) & al;
    *L00000943 = *L00000943 + dl;
    *(bp + si) = *(bp + si) + dh;
    al = al - 0x25;
    (restore)cx;
    di = di - 1;
    (save)bp;
    *(bx + 0x45) = *(bx + 0x45) & al;
    (save)sp;
    ah = ah & dh;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + bh;
    (restore) *(bx + si + 0x10);
    *(bx + si + 0x2c) = *(bx + si + 0x2c) + cl;
    bx = bx + 1;
    di = di - 1;
    si = si - 1;
    (save)si;
    cx = cx - 1;
    bp = bp + 1;
    si = si - 1;
    bp = bp + 1;
    si = si - 1;
    bx = bx + 1;
    bp = bp + 1;
    *(bp + si + 0x41) = *(bp + si + 0x41) & al;
    si = si - 1;
    bx = bx - 1;
    (restore)sp;
    ax = al - 0x5e & 0x2525;
    asm("%f sub al,0x4f");
    (save)bp;
    (save)dx;
    *(bp + di + 0x45) = *(bp + di + 0x45) & dl;
    (save)dx;
    (save)si;
    cx = cx - 1;
    bx = bx + 1;
    bp = bp + 1;
    (save)bx;
    (save)cs;
    *(si + 0x2c) = *(si + 0x2c) + dh;
    al = al ^ 6;
    dl = 0x2d;
    (save)cs;
    *(bx + si + 2) = *(bx + si + 2) + 0x2d;
    asm("xchg ch,[si]");
    ax = ax & 0x1125;
    *(si + 0x312c) = *(si + 0x312c) + cl;
    *%cs:bx+si] = *%cs:bx+si] & ah;
    sp = sp + 1;
    bp = bp + 1;
    (save)ax;
    di = di - 1;
    (save)bx;
    cx = cx - 1;
    (save)sp;
    *(bp + 0x55) = *(bp + 0x55) & al;
    si = si - 1;
    sp = sp + 1;
    (save)bx;
    asm("hlt");
    asm("adc al,[bx+si]");
    *L0000322C = al;
    *%cs:bx+si] = *%cs:bx+si] & ah;
    (save)di;
    cx = cx - 1;
    (save)sp;
    ax = ax - 1;
    sp = sp + 1;
    (save)dx;
    cx = cx + 1;
    (save)di;
    *(bp + 0x55) = *(bp + 0x55) & al;
    si = si - 1;
    sp = sp + 1;
    (save)bx;
    asm("adc ax,[bx+si]");
    ax = 0x332c;
    *%cs:bx+si] = *%cs:bx+si] & 0x332c;
    dx = dx + 1;
    cx = cx + 1;
    sp = sp - 1;
    cx = cx + 1;
    si = si - 1;
    bx = bx + 1;
    bp = bp + 1;
    *(bx + di + 0x4e) = *(bx + di + 0x4e) & cl;
    (save)cx;
    (save)bp;
    cx = cx - 1;
    cx = dx;
    asm("hlt");
    asm("adc [bx+si],ax");
    *si = *si >> 1;
    ax = ax & 0x4e25;
    di = di - 1;
    *(si + 0x52) = *(si + 0x52) & dl;
    cx = cx + 1;
    si = si - 1;
    (save)bx;
    cx = cx + 1;
    bx = bx + 1;
    (save)sp;
    cx = cx - 1;
    di = di - 1;
    si = si - 1;
    asm("%c hlt");
    asm("adc ax,[bx+si]");
    asm("out 0x2c,al");
    ax = ax & 0x4325;
    (save)bp;
    (save)dx;
    (save)dx;
    bp = bp + 1;
    si = si - 1;
    (save)sp;
    *(bp + si + 0x41) = *(bp + si + 0x41) & al;
    sp = sp - 1;
    cx = cx + 1;
    si = si - 1;
    bx = bx + 1;
    bp = bp + 1;
    ah :: *(bx + si);
    asm("hlt");
    asm("sbb al,0x0");
    asm("Unknown opcode 0xfe");
    al = al - 0x25;
    (restore)cx;
    di = di - 1;
    (save)bp;
    *(bx + si + 0x41) = *(bx + si + 0x41) & cl;
    (save)si;
    bp = bp + 1;
    *(bp + 0x4f) = *(bp + 0x4f) & cl;
    (save)sp;
    ax = ax - 1;
    cx = cx - 1;
    si = si - 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(si + 0x45) = *(si + 0x45) & al;
    (save)ax;
    di = di + 1 - 1;
    (save)bx;
    cx = cx - 1;
    (save)sp;
    asm("adc [bx+si],ax");
    (save)ds;
    ax = ax - 0x4544;
    (save)ax;
    di = di - 1;
    (save)bx;
    cx = cx - 1;
    (save)sp;
    *(bx + si + 0x4f) = *(bx + si + 0x4f) & cl;
    (save)di;
    *(di + 0x55) = *(di + 0x55) & cl;
    bx = bx + 1;
    ax = ax - 1;
    asm("aas");
    asm("hlt");
    (save)ss;
    *si = *si + dh;
    (save)sp;
    ax = (ax - 0x2525 & 0x4f4e) - 1;
    cx = cx - 1;
    si = si - 1;
    di = di + 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bx + 0x49) = *(bx + 0x49) & dl;
    (save)sp;
    ax = ax - 1;
    sp = sp + 1;
    (save)dx;
    (save)di;
    (save)ss;
    *(bp + 0x2d) = *(bp + 0x2d) + cl;
    (save)di;
    cx = cx + 1 - 1;
    (save)sp;
    ax = ax - 1;
    sp = sp + 1;
    (save)dx;
    cx = cx + 1;
    (save)di;
    *(bx + si + 0x4f) = *(bx + si + 0x4f) & cl;
    (save)di;
    *(di + 0x55) = *(di + 0x55) & cl;
    bx = bx + 1;
    ax = ax - 1;
    *(bx + si) = *(bx + si) & ch;
    di = di - 1;
    si = si + 1;
    *L00006800 = *L00006800 & al;
    ax = ax - 0x4720;
    di = di - 1;
    sp = sp - 1;
    sp = sp + 1;
    *(bp + si) = *(bp + si) - cx;
    *(bp + si + 0x2d) = *(bp + si + 0x2d) + dh;
    (save)sp;
    ax = (ax & 0x4957) - 1;
    sp = sp + 1;
    (save)dx;
    cx = cx + 1;
    (save)di;
    *(bp + si + 0x1999) = *(bp + si + 0x1999) & bl;
    asm("aas");
    *(bx + si) = *(bx + si) + al;
    asm("xchg ax,si");
    sp = sp + 1;
    (save)es;
    *(bx + si + 0x402d) = *(bx + si + 0x402d) + cl;
    ah = (ax & 0x2a25) - *(bx + si);
    *(bx + si) = *(bx + si) | al;
    asm("xchg ax,dx");
    ax = ax - 0x5320 - 1;
    di = di - 1;
    (save)ax;
    *(bp + si) = *(bp + si) & ch;
    dl = dl - *bx;
    *(bp + 0x572d) = *(bp + 0x572d) + bl;
    cx = cx + 1;
    si = si - 1;
    (save)sp;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bp + si + 0x55) = *(bp + si + 0x55) & al;
    (restore)cx;
    *(bx + di + 0x20) = *(bx + di + 0x20) & al;
    (save)dx;
    cx = cx + 1;
    si = si + 1;
    (save)sp;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    *(bp + si) = *(bp + si) & dl;
    (save)es;
    *(bp + si + 0x202d) = *(bp + si + 0x202d) + bh;
    di = di + 1 - 1;
    sp = sp - 1;
    sp = sp + 1;
    asm("aas");
    asm("les bp,[di]");
    (save)dx;
    cx = cx + 1;
    si = si + 1;
    (save)sp;
    asm("adc al,0x0");
    asm("int3");
    ax = ax - 0x4225;
    di = di - 1;
    cx = cx + 1;
    (save)dx;
    sp = sp + 1;
    *(bp + si + 0x41) = *(bp + si + 0x41) & dl;
    si = si + 1;
    (save)sp;
    *(bx + 0x55) = *(bx + 0x55) & cl;
    (save)sp;
    (save)bx;
    cx = cx - 1;
    sp = sp + 1;
    bp = bp + 1;
    asm("adc [%cs:bx+si],ax");
    asm("in al,0x2d");
    ax = ax + 1 & 0x4f48;
    (save)di;
    *(bx + di + 0x42) = *(bx + di + 0x42) & al;
    di = di - 1;
    (save)bp;
    (save)sp;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & dl;
    bp = bp - 1 + 1;
    ah = ah & dh;
    asm("cli");
    ax = ax - 0x4f46;
    (save)dx;
    *si = *si & ah;
    *(bp + si) = *(bp + si) + al;
    asm("%c pop si");
    ax = ax & 0x2525;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    *(bx + 0x55) = *(bx + 0x55) & cl;
    (save)dx;
    *(bp + di + 0x45) = *(bp + di + 0x45) & dl;
    bx = bx + 1;
    (save)sp;
    *(bx + 0x46) = *(bx + 0x46) & cl;
    si = si + 1;
    bp = bp + 1;
    (save)dx;
    (save)bx;
    *(bp + si + 0x45) = *(bp + si + 0x45) & dl;
    (save)bx;
    (save)sp;
    di = di - 1;
    (save)dx;
    (save)sp;
    cx = cx + 1 - 1;
    (save)si;
    bp = bp + 1;
    (save)ss;
    *(bp + si) = *(bp + si) + ch;
    asm("%c inc bx");
    (save)bp;
    (save)dx;
    bp = bp + 1;
    (save)bx;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    (save)dx;
    *(bx + 0x4f) = *(bx + 0x4f) & dl;
    (save)bp;
    si = si - 1;
    sp = sp + 1;
    (save)bx;
    *%cs:bx+si] = *%cs:bx+si] + al;
    al = al + al;
    asm("int3");
    asm("int3");
    asm("in al,dx");
    asm("aas");
    asm("adc ax,0x4c00");
    asm("%c and ax,0x2525");
    *(bx + di) = *(bx + di) & dh;
    *%cs:bx+0x4f] = *%cs:bx+0x4f] & dl;
    (save)bp;
    si = si - 1;
    sp = sp + 1;
    *(bp + di + 0x41) = *(bp + di + 0x41) & al;
    (save)dx;
    bp = bp + 1;
    *(bx + si) = *(bx + si) & ah;
    ax = ax - 0x3520 + 0x6600;
    *%cs:bx+0x4f] = *%cs:bx+0x4f] & al;
    sp = sp - 1;
    sp = sp + 1;
    asm("hlt");
    if(!(al = al | *(bx + si))) {
        si = si - 1;
        di = di - 1;
        (save)sp;
        *(bp + 0x45) = *(bp + 0x45) & cl;
        bp = bp + 1;
        sp = sp + 1;
        bp = bp + 1;
        sp = sp + 1;
        (restore)ss;
        *(bp + 0x2e) = *(bp + 0x2e) + bh;
        ax = ax & 0x2525;
        *(bp + si) = *(bp + si) & dh;
        *%cs:bx+si+0x45] = *%cs:bx+si+0x45] & cl;
        cx = cx + 1;
        sp = sp - 1;
        cx = cx - 1;
        si = si - 1;
        di = di + 1;
        *(bx + si + 0x45) = *(bx + si + 0x45) & cl;
        (save)dx;
        dx = dx + 1;
        (save)bx;
        *di = *di & ch;
        *(bx + si) = *(bx + si) & dh;
        ax = ax + 0x9a00;
        *%cs:di+0x41] = *%cs:di+0x41] & al;
        bx = bx + 1;
    }
    ax = ax - 1;
    asm("hlt");
    (restore)ss;
    *(si + 0x592e) = *(si + 0x592e) + ah;
    di = di - 1;
    (save)bp;
    asm("daa");
    (save)dx;
    bp = bp + 1;
    *(bp + si + 0x45) = *(bp + si + 0x45) & dl;
    cx = cx + 1;
    sp = sp + 1;
    (restore)cx;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    *(bx + si + 0x45) = *(bx + si + 0x45) & cl;
    (save)dx;
    dx = dx + 1;
    (save)bx;
    sp = sp & si;
    asm("sbb [bx+si],ax");
    *L00002540 = *L00002540 >> 0x25;
    ax = ax & 0x4f59;
    (save)bp;
    *(bx + di + 0x52) = *(bx + di + 0x52) & al;
    bp = bp + 1;
    si = si - 1;
    asm("daa");
    (save)sp;
    *(bp + si + 0x45) = *(bp + si + 0x45) & dl;
    cx = cx + 1;
    sp = sp + 1;
    (restore)cx;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    ah = ah & dh;
    *(bx + si) = *(bx + si) + al;
    asm("cli");
    si = si + 1;
    asm("loop 0x9a55");
    ax = ax - 1;
    bp = bp + 1;
    cx = cx + 1;
    sp = sp - 1;
    cx = cx - 1;
    si = si - 1;
    di = di + 1;
    *(bx + si + 0x45) = *(bx + si + 0x45) & cl;
    (save)dx;
    dx = dx + 1;
    asm("adc ax,[bx+si]");
    asm("%c repne inc ax");
    ax = ax & 0x2525 & 0x4f59;
    (save)bp;
    *(bx + di + 0x52) = *(bx + di + 0x52) & al;
    bp = bp + 1;
    *(bp + di + 0x55) = *(bp + di + 0x55) & al;
    (save)dx;
    bp = bp + 1;
    sp = sp + 1;
    asm("%c hlt");
    (save)ds;
    *(bp + si) = *(bp + si) + cl;
    asm("das");
    ax = ax & 0x4125;
    *(si + 0x49) = *(si + 0x49) & al;
    (save)bx;
    (save)sp;
    cx = cx + 1;
    si = si - 1;
    (save)sp;
    *(bx + si + 0x45) = *(bx + si + 0x45) & cl;
    cx = cx + 1;
    sp = sp - 1;
    bp = bp + 1;
    (save)dx;
    *(bx + di + 0x57) = *(bx + di + 0x57) & al;
    cx = cx + 1 - 1;
    (save)sp;
    (save)bx;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    ax = (al & *%cs:bx+si]) - 0x2f & 0x5925;
    di = di - 1;
    (save)bp;
    asm("daa");
    sp = sp - 1;
    sp = sp - 1;
    *(bp + 0x45) = *(bp + 0x45) & cl;
    bp = bp + 1;
    sp = sp + 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bx + 0x45) = *(bx + 0x45) & al;
    (save)sp;
    *(bx + di + 0x4c) = *(bx + di + 0x4c) & al;
    sp = sp - 1;
    *si = *si & dh;
    *(bp + si + 0x45) = *(bp + si + 0x45) & cl;
    (save)di;
    bp = bp + 1;
    sp = sp - 1;
    (save)bx;
    asm("%c sbb ax,0x5200");
    asm("das");
    ax = ax & 0x4625;
    cx = cx - 1;
    si = si - 1;
    sp = sp + 1;
    *(bx + di + 0x20) = *(bx + di + 0x20) & al;
    (save)di;
    cx = cx + 1;
    (restore)cx;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(si + 0x48) = *(si + 0x48) & dl;
    bp = bp + 1;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    (save)sp;
    (save)dx;
    bp = bp + 1;
    (save)bx;
    (save)bx;
    sp = sp & si;
    if(!( *(bx + si) = *(bx + si) | ax)) {
        dx = dx + 1;
        sp = sp - 1;
        cx = cx + 1;
        bx = bx + 1 - 1;
        dx = dx - 1;
        cx = cx + 1;
        bx = bx + 1 - 1;
        (restore)bp;
        *(bx + si) = *(bx + si) | ax;
        asm("Unknown opcode 0x82");
        asm("das");
        si = si + 1;
        sp = sp - 1;
        cx = cx - 1;
        (save)ax;
        ax = ax - 0x4c46;
        di = di - 1;
        (save)ax;
        *(bx + di) = *(bx + di) + dl;
        *(bx + si + 0x202f) = *(bx + si + 0x202f) + dl;
        ax = ax - 0x5720;
        di = di - 1;
        (save)bp;
        sp = sp - 1;
        sp = sp + 1;
        *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
        (save)bp;
        *(si + 0x49) = *(si + 0x49) & cl;
        bx = bx - 1;
        bp = bp + 1;
        asm("hlt");
        ax = ax | 0xa600;
    }
    asm("das");
    (save)sp;
    di = di - 1;
    *(bx + si + 0x4c) = *(bx + si + 0x4c) & dl;
    cx = cx + 1;
    (restore)cx;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & dl;
    bp = bp - 1 + 1;
    *(si + 1) = *(si + 1) & ah;
    ax = 0x3f2f;
    asm("hlt");
    ax = ax + *(bx + si);
    si = 0x472f;
    bp = bp - 1;
    dx = dx + 1;
    asm("jpo 0x9b0c");
    dh = dh + al;
    asm("das");
    asm("%c inc bp");
    (restore)ax;
    bp = bp + 1;
    ax = ax + 52736;
    asm("das");
    ax = ax + 1 & 0x2a2a;
    *L00000003 = *L00000003 & cl;
    asm("fsubr dword [bx]");
    *(bp + si) = *(bp + si) & ch;
    dh = dh - ah;
    asm("adc [bx+si],ax");
    asm("loopne 0x9b54");
    *(si + 0x52) = *(si + 0x52) & dl;
    cx = cx + 1 - 1;
    si = si - 1;
    cx = cx - 1;
    si = si - 1;
    *(bp + di + 1 + 0x43) = *(bp + di + 1 + 0x43) & dl;
    ax = ax - 1;
    di = di - 1 - 1;
    sp = sp - 1;
    asm("%c hlt");
    (save)ss;
    dh = dh + dh;
    asm("das");
    (save)bx;
    bp = bp + 1;
    (save)bx;
    (save)bx;
    cx = cx - 1;
    di = di - 1;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & al;
    (save)bx;
    (save)sp;
    ah :: *(bx + si - 1);
    ax = ax ^ 0x2030;
    di = di + 1 - 1;
    sp = sp - 1;
    sp = sp + 1;
    asm("%c or al,0x0");
    asm("adc [bx+si],dh");
    (save)bx;
    sp = sp + 1;
    bp = bp + 1;
    si = si + 1;
    bp = bp + 1;
    si = si - 1;
    sp = sp + 1;
    (save)dx;
    asm("%c inc bp");
    (restore)ax;
    bp = bp + 1;
    *(bx + si) = *(bx + si) | al;
    if(!( *(bx + si) = *(bx + si) & dh)) {
        asm("%g o32 outsb");
        asm("%f jc 0x9b70");
        *bx = *bx + al;
        *L00002030 = *L00002030 + ch;
        di = di + 1 - 1;
        sp = sp - 1;
        sp = sp + 1;
        ah :: *(bx + si);
        asm("hlt");
        *(bx + si) = *(bx + si) + ax;
        dh :: *(bx + si);
        (restore)si;
        asm("hlt");
        ax = ax + 1;
        *di = *di ^ ah;
        *(bx + si) = *(bx + si) & ah;
        *(bx + si) = *(bx + si) & ah;
        *(bx + si) = *(bx + si) & ah;
        cx = cx - 1;
        (save)sp;
        bp = bp + 1 - 1;
        (save)bx;
        (save)es;
        *(bx + si + 0x30) = *(bx + si + 0x30) + dl;
        (save)ax;
        (save)dx;
        cx = cx - 1;
        bx = bx + 1;
        bp = bp + 1;
        (save)bx;
        *(bx + si) = *(bx + si) & al;
        (restore)dx;
        *(bx + si + 0x25) = *(bx + si + 0x25) ^ al;
        ax = ax & 0x414d;
        bx = bx - 1;
        bp = bp + 1;
        *(bp + di + 0x48) = *(bp + di + 0x48) & al;
        di = di - 1;
        cx = cx - 1;
        bx = bx + 1;
        bp = bp + 1;
        *(bx + si) = *(bx + si) & ch;
        ax = ax - 1;
        cx = cx - 1;
        (save)sp;
        *(bx + si) = *(bx + si) & dh;
        *(si + 0x4f) = *(si + 0x4f) & dl;
        *(bp + di + 0x41) = *(bp + di + 0x41) & al;
        si = si - 1;
        bx = bx + 1;
        bp = bp + 1;
        sp = sp - 1;
        *(bx + si) = *(bx + si) - bx;
        *(bp + 0x30) = *(bp + 0x30) + bh;
        ax = ax & 0x2525;
        (restore)cx;
        di = di - 1;
        (save)bp;
        asm("daa");
        (save)dx;
    }
    bp = bp + 1;
    *(bp + di + 0x48) = *(bp + di + 0x48) & dl;
    di = di - 1;
    (save)dx;
    (save)sp;
    *(bx + 0x4e) = *(bx + 0x4e) & cl;
    *(bx + 0x4f) = *(bx + 0x4f) & al;
    sp = sp - 1;
    sp = sp + 1;
    asm("%c adc al,0x0");
    (save)bp;
    (save)dx;
    bx = bx + 1;
    ax = L00005025() - 1;
    cx = cx + 1;
    (save)bx;
    bp = bp + 1;
    *(bx + si + 0x4f) = *(bx + si + 0x4f) & cl;
    (save)di;
    *(di + 0x41) = *(di + 0x41) & cl;
    si = si - 1;
    (restore)cx;
    *(bp + si) = *(bp + si) & al;
    asm("aas");
    asm("adc [bx+si],al");
    ax = 0x4530;
    asm("outsb");
    if(!( *(bp + si + 0x5330) = *(bp + si + 0x5330) + dh)) {
        < ? L00009c23 : ;
        asm("outsb");
        != ? 0x9c73 : ;
        asm("bound sp,[di+0x72]");
        *(bx + di + 0x6e) = *(bx + di + 0x6e) & ah;
        asm("%f adc al,0x0");
        asm("int3");
        *(bx + si + 0x72) = *(bx + si + 0x72) ^ dh;
        asm("%g jnc 0x9c89");
        if(*si = *si & bh) {
            goto L00009c7f;
        }
        == ? L00009c91 : ;
        < ? L00009c8c : ;
        if(!( *%ds:bp+di+0x65] = *%ds:bp+di+0x65] & ch)) {
            *di = *di & dl;
            ah = ah + ah;
            *(bx + si + 0x52) = *(bx + si + 0x52) ^ dl;
            bp = bp + 1;
            (save)bx;
            (save)bx;
            *(bp + di + 0x45) = *(bp + di + 0x45) & cl;
            (restore)cx;
            *(si + 0x4f) = *(si + 0x4f) & dl;
            *(bp + di + 0x4f) = *(bp + di + 0x4f) & al;
            si = si - 1;
            (save)sp;
            cx = cx - 1;
            si = si - 1;
            (save)bp;
            bp = bp + 1;
            asm("hlt");
            al = al | *(bx + si);
            asm("Unknown opcode 0xfe");
            *di = *di ^ ah;
            (save)sp;
            ax = (ax & 0x4f4e) - 1;
            cx = cx - 1;
            si = si - 1;
            di = di + 1;
            *L00000C00 = *L00000C00 & al;
            *(si + 0x41) = *(si + 0x41) ^ dx;
            bx = bx - 1;
            bp = bp + 1;
            si = si - 1;
            al = al | *%cs:bx+si];
            (save)ss;
            *(bx + si + 0x55) = *(bx + si + 0x55) ^ dx;
            (save)dx;
        }
        bx = bx + 1;
        ax = ax - 1;
        cx = cx + 1;
        (save)bx;
        bp = bp + 1;
        sp = sp + 1;
        asm("%c push ss");
    }
    *si = *si + ah;
    *di = *di ^ sp;
    ax = ax & 0x4f4e;
    *(bx + si + 0x55) = *(bx + si + 0x55) & dl;
    (save)dx;
    bx = bx + 1;
    ax = ax - 1;
    cx = cx + 1;
    (save)bx;
    bp = bp + 1;
    *%cs:bx+si] = *%cs:bx+si] & ah;
    (restore)cx;
    di = di - 1;
    (save)bp;
    asm("daa");
    (save)dx;
    bp = bp + 1;
L00009c7f:
    asm("adc al,[bx+si]");
    *%ds:bp+di+0x41] = *%ds:bp+di+0x41] ^ ax;
    (save)dx;
    cx = dx - 1;
    si = si - 1;
    di = di + 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(di - 1 + 0x55) = *(di - 1 + 0x55) & cl;
    bx = bx + 1;
    (save)sp;
    *(bx + si) = *(bx + si) ^ sp;
    (save)ax - 1 | *%cs:bx+si];
    (save)bp;
    (save)dx;
    bx = bx + 1;
    ax = ax - 1;
    cx = cx + 1;
    (save)bx;
    bp = bp + 1;
    sp = sp + 1;
    asm("%c hlt");
    *(bx + si) = *(bx + si) | al;
    *%fs:bx+si] = *%fs:bx+si] ^ sp;
    (save)bx;
    (save)sp;
    di = di - 1;
    sp = sp - 1;
    bp = bp + 1;
    asm("adc al,[%cs:bx+si]");
    if(!(si = si - 1)) {
        ax = ax & 0x2749;
        sp = sp - 1;
        sp = sp - 1;
        *(bx + si + 0x41) = *(bx + si + 0x41) & dl;
        (restore)cx;
        *(di + 0x58) = *(di + 0x58) & al;
        cx = cx + 1;
        bx = bx + 1;
        (save)sp;
        sp = sp - 1;
        (restore)cx;
        *(bx + di) = *(bx + di) & cl;
        *(bp + 0x4631) = *(bp + 0x4631) + al;
        di = di - 1;
        (save)dx;
        *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
        (save)bp;
        (save)dx;
        ah = ah & dh;
        asm("sbb ax,0x9400");
        *(bx + si + 0x25) = *(bx + si + 0x25) ^ ax;
        ax = ax & 0x2525;
        (restore)cx;
        di = di - 1;
        (save)bp;
        *(bp + di + 0x41) = *(bp + di + 0x41) & al;
        si = si - 1;
        asm("daa");
    }
    (save)sp;
    *(bp + si + 0x55) = *(bp + si + 0x55) & al;
    (restore)cx;
    *(si + 0x48) = *(si + 0x48) & dl;
    cx = cx - 1;
    (save)bx;
    *(di + 0x41) = *(di + 0x41) & cl;
    si = si - 1;
    (restore)cx;
    asm("%c hlt");
    *(bx + si) = *(bx + si) & al;
    dh = 0x31;
    ax = ax & 0x4854;
    bp = bp + 1;
    *(di + 0x45) = *(di + 0x45) & cl;
    (save)0x31;
    bx = bx + 1;
    ax = ax - 1;
    cx = cx + 1;
    (save)sp;
    *(bx + 0x4f) = *(bx + 0x4f) & 0x31;
    si = si - 1 - 1;
    asm("daa");
    (save)sp;
    *(si + 0x45) = *(si + 0x45) & cl;
    (save)sp;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    *(bp + si + 0x4f) = *(bp + si + 0x4f) & dl;
    dx = dx + 1;
    asm("%c sbb al,0x0");
    (fsave)((frestore)) / *(bx + di);
    ax = ax & 0x4f4e;
    *(bx + di + 0x54) = *(bx + di + 0x54) & cl;
    bp = bp + 1 - 1;
    (save)bx;
    *(bx + 0x49) = *(bx + 0x49) & dl;
    (save)sp;
    ax = ax - 1;
    cx = cx - 1;
    si = si - 1;
    *(bp + si + 0x45) = *(bp + si + 0x45) & dl;
    cx = cx + 1;
    bx = bx + 1;
    ax = ax - 1;
    *(bx + si + 0x45) = *(bx + si + 0x45) & cl;
    (save)dx;
    bp = bp + 1;
    asm("%c push cs");
    *(bx + si) = *(bx + si) ^ sp;
    dx = dl + bh + 1;
    cx = bp;
    ax = ax - 0x4142;
    bx = bx + 1 - 1;
    *(bp + di + 0x48) = *(bp + di + 0x48) & dl;
    di = di - 1;
    (save)ax;
    al = ax | *(bx + si) | 0x32;
    *L00002020 = *L00002020 ^ bp;
    (save)di;
    bp = bp + 1;
    cx = cx + 1;
    (save)ax;
    di = di - 1;
    si = si - 1;
    (save)bx;
    asm("hlt");
    *(bx + si) = *(bx + si) | ax;
    asm("sbb al,0x32");
    cx = (ch ^ *L00002020) + 1;
    (save)dx;
    bp = bp - 1;
    di = di - 1;
    (save)dx;
    asm("hlt");
    (restore)ss;
    *(bp + si) = *(bp + si) + ch;
    ax = (al ^ *(bx + si + 0x25)) & 0x4553;
    sp = sp - 1;
    bp = bp + 1;
    bx = bx + 1;
    (save)sp;
    *(bx + si) = *(bx + si) & ch;
    *(bx + si) = *(bx + si) ^ ah;
    (save)sp;
    di = di - 1;
    *(bp + di + 0x41) = *(bp + di + 0x41) & al;
    si = si - 1;
    bx = bx + 1;
    bp = bp + 1;
    sp = sp - 1;
    sp = sp - si;
    (save)es;
    *(bp + 0x32) = *(bp + 0x32) + al;
    (save)di;
    bp = bp + 1;
    cx = cx + 1;
    (save)ax;
    di = di - 1;
    si = si - 1;
    al = (ax | 0x5000) ^ *(bp + si + 0x55);
    (restore)cx;
    ax = ax - 0x4142;
    bx = bx + 1 - 1;
    *(bp + di + 0x48) = *(bp + di + 0x48) & dl;
    di = di - 1;
    (save)ax;
    *(bx + si) = *(bx + si) + al;
    *(bx + si + 0x42) = *(bx + si + 0x42) + dh;
    *(bx + si) = *(bx + si) + al;
    *bx = *bx >> 0;
    *(bx + si + 0x40) = *(bx + si + 0x40) + ah;
    *(bx + si) = *(bx + si) + al;
    asm("aas");
    asm("%e o32 aas");
    asm("o32 cmpsb");
    asm("aas");
    ax = L0000cd3f();
    asm("int3");
    asm("int3");
    asm("aas");
    asm("Unknown opcode 0x82");
    dl = dl ^ *(bx + 0x41);
    (restore)cx;
    *si = *si & al;
    *(bp + si + 0x2032) = *(bp + si + 0x2032) + cl;
    cx = cx - 1;
    (save)bx;
    *(bx + di) = *(bx + di) & cl;
    *(bp + si + 0x5432) = *(bp + si + 0x5432) + dl;
    *(bx + si + 0x49) = *(bx + si + 0x49) & cl;
    di = di - 1 - 1 + 1;
    ax = ax - 1;
    sp = sp & si;
    al = al | *(bx + si);
    al = *L00004932;
    asm("daa");
    sp = sp - 1;
    sp = sp - 1;
    *(bx + 0x49) = *(bx + 0x49) & al;
    (save)si;
    bp = bp + 1;
    *L0000AE00 = *L0000AE00 & cl;
    ah = ah ^ *(bx + si);
    di = di + 1 - 1;
    sp = sp - 1;
    sp = sp + 1;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    (save)dx;
    al = al + *(bx + si);
    asm("Unknown opcode 0xc0");
    ah = ah ^ *(bx + si);
    *(bx + si) = *(bx + si) & dl;
    dh = dh + al;
    ax = (ah ^ *(bx + si)) - 0x4946;
    si = si - 1;
    cx = cx + 1;
    sp = sp - 1;
    *(bx + 0x46) = *(bx + 0x46) & cl;
    si = si + 1;
    bp = bp + 1;
    (save)dx;
    *(bx + di) = *(bx + di) & sp;
    *(bx + di) = *(bx + di) & dx;
    dl = dl + bl;
    cl = cl ^ *(di + 0x59);
    *(si + 0x41) = *(si + 0x41) & cl;
    (save)sp;
    bp = bp + 1;
    (save)bx;
    (save)sp;
    *(bx + 0x46) = *(bx + 0x46) & cl;
    si = si + 1;
    bp = bp + 1;
    (save)dx;
    ah :: *(bx + si);
    asm("hlt");
    asm("Unknown opcode 0x0f");
    al = al + dh;
    bl = bl ^ *(bx + di + 0x4f);
    (save)bp;
    *(bx + di + 0x53) = *(bx + di + 0x53) & al;
    bx = bx - 1;
    bp = bp + 1;
    sp = sp + 1;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    ah :: *(bx + si);
    asm("hlt");
    (save)di;
    ax = (ax & *(bx + si)) + 0x33 - 1;
    cx = cx + 1;
    (save)sp;
    *(bx + 0x49) = *(bx + 0x49) & dl;
    sp = sp - 1;
    sp = sp - 1;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    *(bp + di + 0x45) = *(bp + di + 0x45) & dl;
    sp = sp - 1;
    sp = sp - 1;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    asm("aas");
    *(bx + si) = *(bx + si) & ch;
    *(bx + si) = *(bx + si) ^ ah;
    (save)sp;
    di = di - 1;
    *(bx + di + 0x55) = *(bx + di + 0x55) & dl;
    cx = cx - 1;
    (save)sp;
    sp = sp - si;
    asm("adc [bx+si],ax");
    ax = al - 0x33 & 0x2525 & 0x4553;
    bp = bp + 1;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    *(si + 0x41) = *(si + 0x41) & cl;
    (save)sp;
    bp = bp + 1;
    (save)dx;
    asm("hlt");
    asm("adc [bx+si],al");
    dx = dx + 1;
    ax = (ax ^ *(bx + si + 0x25)) & 0x4925;
    (save)sp;
    asm("daa");
    (save)bx;
    *(bx + di + 0x20) = *(bx + di + 0x20) & al;
    sp = sp + 1;
    bp = bp + 1;
    cx = cx + 1;
    sp = sp - 1;
    *(bp + si) = *(bp + si) & cx;
    *(bp + 0x33) = *(bp + 0x33) + dl;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & dl;
    sp = sp - 1;
    sp = sp + 1;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    *L00006400 = *L00006400 & al;
    sp = sp ^ *(bx + si);
    di = di + 1 - 1;
    sp = sp - 1;
    sp = sp + 1;
    ax = ax & 0x17;
    asm("outsb");
    cx = cx ^ *(di + 0x41);
    (restore)cx;
    dx = dx + 1;
    bp = bp + 1;
    *(bx + 0x45) = *(bx + 0x45) & dl;
    *(bp + di + 0x41) = *(bp + di + 0x41) & al;
    si = si - 1;
    *(si + 0x45) = *(si + 0x45) & al;
    cx = cx + 1;
    sp = sp - 1;
    *(si + 0x41) = *(si + 0x41) & cl;
    (save)sp;
    bp = bp + 1;
    (save)dx;
    asm("hlt");
    asm("sbb ax,0x8a00");
    ax = ax ^ *(bp + di + 0x4f);
    bp = bp - 1 + 1;
    *(bp + si + 0x41) = *(bp + si + 0x41) & al;
    bx = bx + 1 - 1;
    *(bx + 0x48) = *(bx + 0x48) & dl;
    bp = bp + 1;
    si = si - 1;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    asm("daa");
    (save)dx;
    bp = bp + 1;
    *(bp + di + 0x45) = *(bp + di + 0x45) & dl;
    (save)dx;
    cx = cx - 1;
L00009ee9:
    di = di - 1;
    (save)bp;
    (save)bx;
    asm("hlt");
    (restore)ss;
    *(si + 0x4933) = *(si + 0x4933) + ch;
    *(bx + 0x49) = *(bx + 0x49) & dl;
    sp = sp - 1;
    sp = sp - 1;
    *(bx + si + 0x41) = *(bx + si + 0x41) & cl;
    (save)ax;
    (save)ax;
    cx = cx - 1;
    sp = sp - 1;
    (restore)cx;
    *(bx + si + 0x55) = *(bx + si + 0x55) & dl;
    (save)dx;
    bx = bx + 1;
    ax = ax - 1;
    cx = cx + 1;
    (save)bx;
    bp = bp + 1;
    asm("hlt");
    (restore)ds;
    al = al + cl;
    sp = sp ^ *(bx + si);
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    (save)dx;
    *(di + 0x53) = *(di + 0x53) & dl;
    bp = bp + 1;
    sp = sp + 1;
    *(bx + di + 0x52) = *(bx + di + 0x52) & al;
    bp = bp - 1;
    (save)bx;
    *(bx + di + 0x4e) = *(bx + di + 0x4e) & al;
    sp = sp + 1;
    *(bx + di + 0x52) = *(bx + di + 0x52) & al;
    bp = bp - 1;
    di = di - 1;
    (save)dx;
    asm("%c hlt");
    (restore)ds;
    ah = ah + ch;
    sp = sp ^ *di;
    ax = ax & 0x2025;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    *(bp + di + 0x48) = *(bp + di + 0x48) & al;
    di = di - 1 - 1;
    (save)bx;
    *(bx + di + 0x54) = *(bx + di + 0x54) & cl;
    bp = bp + 1 + 1 - 1;
    (save)bx;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bp + di + 0x45) = *(bp + di + 0x45) & dl;
    sp = sp - 1;
    sp = sp - 1;
    ah :: *di;
    asm("hlt");
    asm("adc [si],dh");
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    (save)di;
    ax = (ax & 0x2025) - 1;
    cx = cx + 1;
    (save)sp;
    *(bp + si) = *(bp + si) & dl;
    *(bx + si) = *(bx + si) + ah;
    al = al ^ 0x20;
    (save)di;
    cx = cx - 1;
    sp = sp - 1;
    sp = sp - 1;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    *(bp + di + 0x45) = *(bp + di + 0x45) & dl;
    sp = sp - 1;
    sp = sp - 1;
    *(di + 0x45) = *(di + 0x45) & cl;
    asm("aas");
    asm("%s xor al,0x40");
    ax = ax & 0x2525;
    asm("adc [bx+si],al");
    asm("%d xor al,0x4e");
    di = di - 1;
    *(si + 0x52) = *(si + 0x52) & dl;
    cx = cx + 1;
    si = si - 1;
    (save)bx;
    cx = cx + 1;
    bx = bx + 1;
    (save)sp;
    cx = cx - 1;
    di = di - 1;
    si = si - 1;
    asm("%c and ax,0x8");
    (save)dx;
    al = al ^ 0x46;
    (save)dx;
    cx = cx - 1;
    bp = bp + 1;
    si = si - 1;
    sp = sp + 1;
    sp = sp - 1;
    (restore)cx;
    asm("adc ax,[bx+si]");
    (restore)si;
    al = al ^ 0x4c;
    bp = bp + 1;
    si = si - 1;
    sp = sp + 1;
    cx = cx - 1;
    si = si - 1;
    di = di + 1;
    *(bx + di + 0x53) = *(bx + di + 0x53) & al;
    (save)bx;
    di = di - 1;
    bx = bx + 1;
    (save)sp;
    cx = cx - 1 + 1 - 1;
    di = di - 1;
    asm("hlt");
    if(!(si = si - 1)) {
        if(ax = ax & 0x2525 & 9) {
            goto L00009ff7;
        }
        (restore)cx;
        di = di - 1;
        (save)bp;
        *(bx + 0x57) = *(bx + 0x57) & cl;
        bp = bp + 1;
        ah :: *(bx + si);
        ax & 6;
        asm("Unknown opcode 0x8c");
        al = al ^ 0x20;
        di = di + 1 - 1;
        sp = sp - 1;
        sp = sp + 1;
        *(bp + si) = *(bp + si) & cx;
        *(bp + 0x4434) = *(bp + 0x4434) + dl;
        (save)bp;
        *(si + 0x41) = *(si + 0x41) & al;
        (save)sp;
        bp = bp + 1 + 1;
        ah :: *(bx + si);
        al = ax + 0xa400 ^ 0x4e;
        di = di - 1;
        (save)di;
        *(bx + di) = *(bx + di) & sp;
        asm("hlt");
    }
    (save)ss;
    *(bp + 0x2c34) = *(bp + 0x2c34) + ch;
    *(bp + si + 0x920) = *(bp + si + 0x920) | dh;
L00009ff7:
    *(bx + si + 0x4150) = *(bx + si + 0x4150) + dh;
    (restore)cx;
    *(bx + si + 0x4f) = *(bx + si + 0x4f) & cl;
    (save)di;
    *(di + 0x55) = *(di + 0x55) & cl;
    bx = bx + 1;
    ax = ax - 1;
    asm("aas");
    asm("str ax");
    *(bx + si) = *(bx + si) & (al ^ 0x20);
    *(bx + si) = *(bx + si) & (al ^ 0x20);
    *(bx + di + 0x54) = *(bx + di + 0x54) - (al ^ 0x20);
    *(si + 0x45) = *(si + 0x45) & cl;
    cx = cx + 1;
    (save)bx;
    (save)sp;
    (save)cs;
    ax = ((ah & dh) + bl ^ 0x25) & 0x4f4c;
    cx = cx + 1;
    *(bp + si - 1 + 0x45) = *(bp + si - 1 + 0x45) & dl;
    (save)ax;
    cx = cx + 1 - 1;
    sp = sp + 1;
    al = al | *%cs:bx+si];
    asm("out dx,al");
    ax = (al ^ 0x25) & 0x4f59;
    (save)bp;
    *(bx + 0x57) = *(bx + 0x57) & cl;
    bp = bp + 1;
    *bx = *bx & al;
    al = ah + bh ^ 0x20;
    di = di + 1 - 1;
    sp = sp - 1;
    sp = sp + 1;
    asm("%c and ah,dh");
    asm("str [bx+si]");
    ax = ax ^ 0x5425;
    cx = cx + 1;
    bx = bx - 1;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp + 1;
    (save)dx;
    *(si + 0x49) = *(si + 0x49) & dl;
    bp = bp + 1 - 1 + 1;
    asm("hlt");
    asm("adc [bx+si],al");
    asm("sbb al,0x35");
    ax = ax & 0x4225;
    (save)sp;
    (save)sp;
    bp = bp + 1 + 1;
    (save)dx;
    *(bx + si + 0x41) = *(bx + si + 0x41) & dl;
    (restore)cx;
    *(di + 0x50) = *(di + 0x50) & dl;
    *si = *si & sp;
    *(bx + si) = *(bx + si) + dh;
    ax = (ax ^ 0x2525) & 0x4f59;
    (save)bp;
    *(bx + si + 0x41) = *(bx + si + 0x41) & cl;
    (save)si;
    bp = bp + 1;
    *(bx + di) = *(bx + di) & dh;
    al = al ^ 0x20;
    sp = sp + 1;
    cx = cx + 1;
    (restore)cx;
    (save)bx;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bx + si + 0x41) = *(bx + si + 0x41) & dl;
    (restore)cx;
    *(si + 0x48) = *(si + 0x48) & dl;
    *(bp + 1 + si + 0x45) = *(bp + 1 + si + 0x45) & dl;
    (save)bx;
    (save)sp;
    *(bx + si) = *(bx + si) & ax;
    *(bx + si + 0x41) = *(bx + si + 0x41) + ah;
    ax = ax & *(bx + si);
    (restore)sp;
    *(bx + si) = *(bx + si) & (ax ^ 0x2525) & 0x2025;
    *(bx + si) = *(bx + si) & (ax ^ 0x2525) & 0x2025;
    *(bx + 0x45) = *(bx + 0x45) & dl;
    asm("daa");
    sp = sp + 1;
    *(bp + si + 0x45) = *(bp + si + 0x45) & al;
    *(bx + si + 0x41) = *(bx + si + 0x41) & cl;
    (save)ax;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(si + 0x4f) = *(si + 0x4f) & ax;
    cx = ax + 1;
    si = si - 1;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    asm("hlt");
    (restore)ds;
    *(si + 0x2035) = *(si + 0x2035) + al;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) & ah;
    *(di + 0x4f) = *(di + 0x4f) & cl;
    si = si - 1;
    bp = bp + 1;
    (restore)cx;
    *(bx + di + 0x54) = *(bx + di + 0x54) & al;
    *bx = *bx & ah;
    si = si + 1;
    (save)dx;
    cx = cx - 1;
    bp = bp + 1;
    si = si - 1;
    sp = sp + 1;
    sp = sp - 1;
    (restore)cx;
    asm("daa");
    *(bp + si + 0x41) = *(bp + si + 0x41) & dl;
    (save)sp;
    bp = bp + 1;
    (save)bx;
    asm("hlt");
    asm("sbb ax,0xa800");
    *(bx + si) = *(bx + si) & (ax ^ 0x2525) & 0x2020;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    *(di + 0x41) = *(di + 0x41) & cl;
    (restore)cx;
    *(bp + si + 0x4f) = *(bp + si + 0x4f) & al;
    (save)dx;
    (save)dx;
    (save)di - 1;
    *(di - 1 + 0x50) = *(di - 1 + 0x50) & dl;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    ah = ah & dh;
    (restore)ss;
    dl = dl + cl;
    *(bx + si) = *(bx + si) & (ax ^ 0x2525);
    *(bx + si) = *(bx + si) & (ax ^ 0x2525);
    *(bp + si + 0x4f) = *(bp + si + 0x4f) & (ax ^ 0x2525);
    (save)dx;
    (save)dx;
    (save)di - 1;
    *(bx + si + 0x4f) = *(bx + si + 0x4f) & cl;
    (save)di - 1;
    *(di - 1 + 0x55) = *(di - 1 + 0x55) & cl;
    bx = bx + 1;
    ax = ax - 1;
    asm("aas");
    asm("hlt");
    al = al | *(bx + si);
    asm("out 0x35,al");
    ax = ax & 0x5425;
    *(di - 1 - 1 + 0x55) = *(di - 1 - 1 + 0x55) & cl;
    bx = bx + 1;
    *(bx + si) = *(bx + si) + ax - 1;
    asm("lock inc dx");
    asm("Unknown opcode 0x0f");
    ax = al + bh ^ 0x4720;
    di = di - 1;
    sp = sp - 1;
    sp = sp + 1;
    *(bp + si + 0x4f) = *(bp + si + 0x4f) & al;
    (save)dx;
    (save)dx;
    (save)di - 1;
    bp = bp + 1;
    sp = sp + 1;
    asm("%c hlt");
    ax = (al | 0x36) & 0x4f59;
    (save)bp;
    asm("daa");
    sp = sp - 1;
    sp = sp - 1;
    *(bx + 0x57) = *(bx + 0x57) & cl;
    *(bp + 1 + di) = *(bp + 1 + di) & dl;
    *si = *si + bl;
    *%ss:bx+0x4f] = *%ss:bx+0x4f] & al;
    sp = sp - 1;
    sp = sp + 1;
    *(bx + di + 0x4e) = *(bx + di + 0x4e) & cl;
    *(bx + di) = *(bx + di) & dh;
    dh = dh ^ *(bx + si);
    *(si + 0x41) = *(si + 0x41) & al;
    (restore)cx;
    (save)bx;
    asm("%c and ax,0xf4");
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    al = al + ah;
    asm("aas");
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    asm("adc al,0x40");
    asm("sldt [si+0x36]");
    *(bp + di + 0x4e) = *(bp + di + 0x4e) & cx - 1;
    (save)di - 1;
    *(bp + 0x4f) = *(bp + 0x4f) & cl;
    *(di - 1 + 0x4f) = *(di - 1 + 0x4f) & cl;
    (save)dx;
    bp = bp + 1;
    asm("%c hlt");
    asm("sbb [bx+si],ax");
    (restore)ax;
    asm("%s and ax,0x2020");
    (save)dx;
    bp = bp + 1;
    cx = cx + 1;
    sp = sp + 1;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    (save)dx;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    (save)sp;
    (save)bp;
    si = si - 1;
    *(bp + 1 + 0x4f) = *(bp + 1 + 0x4f) & al;
    (save)dx;
    asm("sbb al,0x0");
    if(!(ah = ah & dh)) {
        ax = (ax + 1 & 0x5425) - 1;
        bp = bp + 1;
        *(bx + 0x55) = *(bx + 0x55) & al;
        cx = cx + 1;
        (save)dx;
        sp = sp + 1;
        (save)bx;
        *(bx + 0x56) = *(bx + 0x56) & cl;
        bp = bp + 1;
        (save)dx;
        (save)di;
        ax = ax - 1;
        bp = bp + 1;
        sp = sp - 1;
        bp = bp - 1;
        *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
        (save)bp;
        *(bp + si) = *(bp + si) & bx;
        *(bp + 0x2536) = *(bp + 0x2536) + dl;
        (restore)cx;
        di = di - 1;
        (save)bp;
        *(bp + 0x49) = *(bp + 0x49) & al;
        si = si - 1;
        sp = sp + 1;
        *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
        (save)bp;
        (save)dx;
        (save)bx;
        bp = bp + 1;
        sp = sp - 1;
        si = si + 1;
        *(bx + di + 0x4e) = *(bx + di + 0x4e) & cl;
        *(bp + si + 0x41) = *(bp + si + 0x41) & cl;
    }
    cx = cx - 1;
    sp = sp - 1;
    (restore)ds;
    *(si + 0x2536) = *(si + 0x2536) + dh;
    ax = ax & 0x2749;
    sp = sp - 1;
    sp = sp - 1;
    *(si + 0x45) = *(si + 0x45) & cl;
    (save)sp;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    *(bx + 0x55) = *(bx + 0x55) & cl;
    (save)sp;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    *(bx + di + 0x20) = *(bx + di + 0x20) & al;
    (save)ax;
    (save)dx;
    cx = cx - 1;
    bx = bx + 1;
    bp = bp + 1;
    asm("%c hlt");
    (fsave)((frestore)) / (-2.86321e-183);
    *(bx + si + 0x41) = *(bx + si + 0x41) & cl;
    (save)bx;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & al;
    (save)bx;
    (save)sp;
    *(bx + di) = *(bx + di) & dl;
    *%ss:bx+0x4f] = *%ss:bx+0x4f] & al + ch;
    sp = sp - 1;
    sp = sp + 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bx + 0x45) = *(bx + 0x45) & al;
    (save)sp;
    *(bx + 0x55) = *(bx + 0x55) & cl;
    (save)sp;
    asm("%c hlt");
    asm("sbb [bx+si],ax");
    asm("Unknown opcode 0xfe");
    asm("%s dec cx");
    asm("daa");
    (save)si;
    bp = bp + 1;
    *(si + 0x41) = *(si + 0x41) & dl;
    bx = bx - 1;
    bp = bp + 1;
    si = si - 1;
    *(bx + di + 0x4c) = *(bx + di + 0x4c) & al;
    sp = sp - 1;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    (save)dx;
    *(bx + 0x4f) = *(bx + 0x4f) & al;
    sp = sp - 1;
    sp = sp + 1;
    asm("%c hlt");
    asm("sbb ax,0x1c00");
    asm("aaa");
    cx = cx - 1;
    asm("daa");
    (save)si;
    *(bx + 0x4f) = *(bx + 0x4f) & al;
    (save)sp;
    (save)sp;
    bp = bp + 1 + 1;
    *(bx + di) = *(bx + di) & dh;
    *(bx + si - 1) = *(bx + si - 1) ^ dh;
    *(bx + 0x4f) = *(bx + 0x4f) & al;
    sp = sp - 1;
    sp = sp + 1;
    *(bp + 0x52) = *(bp + 0x52) & al;
    di = di - 1;
    *(si + 0x48) = *(si + 0x48) & dl;
    bp = bp - 1 + 1;
    asm("hlt");
    (save)ss;
    *L00004C37 = *L00004C37 + bh;
    bp = bp + 1;
    si = si - 1;
    sp = sp + 1;
    (save)dx;
    *di = *di & ch;
    *(bx + di + 0x4e) = *(bx + di + 0x4e) & cl;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp + 1;
    (save)dx;
    *(bp + 1 + 0x41) = *(bp + 1 + 0x41) & cl;
    bp = bp - 1 + 1;
    asm("ltr [%cs:bx+si+0x37]");
    cx = cx - 1;
    asm("daa");
    sp = sp - 1;
    sp = sp - 1;
    *(si + 0x41) = *(si + 0x41) & dl;
    bx = bx - 1;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp + 1;
    (save)dx;
    (restore)ss;
    *(si + 0x37) = *(si + 0x37) + ch;
    (save)di;
    *di = *di & ch;
    *(bx + 0x45) = *(bx + 0x45) & ah & dh & 0x4f4e;
    (save)sp;
    *(bx + 0x55) = *(bx + 0x55) & cl;
    (save)sp;
    *(bx + 0x46) = *(bx + 0x46) & cl;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    (save)di;
    sp = sp & si - 1;
    asm("in al,dx");
    (save)cx;
    *di :: bh;
    *(bx + si) = *(bx + si) + al;
    al = *L00000041;
    *(bx + si + 0x42) = *(bx + si + 0x42) + cl;
    asm("sbb al,[bx+si]");
    asm("xchg ax,sp");
    asm("aaa");
    ax = ax + 1 & 0x5725;
    cx = cx + 1;
    si = si - 1;
    (save)sp;
    *(bx + di + 0x20) = *(bx + di + 0x20) & al;
    (save)bp - 1;
    (save)bx;
    (save)bp - 1 + 1;
    *(bp - 1 + 1 - 1 + di + 0x4f) = *(bp - 1 + 1 - 1 + di + 0x4f) & al;
    cx = cx - 1;
    *(bp + 0x4f) = *(bp + 0x4f) & al;
    (save)dx;
    *(bp + si - 1) = *(bp + si - 1) & cl;
    *(bp + si + 0x2537) = *(bp + si + 0x2537) + dh;
    (restore)cx;
    (save)bp;
    *(bx + 0x4f) = *(bx + 0x4f) & al;
    (save)sp;
    *(bx + di - 1 + 1) = *(bx + di - 1 + 1) & al;
    al = al + al;
    asm("aaa");
    si = si - 1;
    asm("hlt");
    *(bx + si) = *(bx + si) + ax;
    asm("Unknown opcode 0xc6");
    asm("aaa");
    sp = sp & si;
    ax = ax + *(bx + si);
    asm("int3");
    asm("aaa");
    (save)dx;
    di = di - 1;
    dx = dx + 1;
    asm("hlt");
    asm("lldt sp");
    asm("aaa");
    (save)sp;
    ax = (ax & 0x4f4e) - 1;
    cx = cx - 1;
    si = si - 1;
    di = di + 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bp + si + 0x4f) = *(bp + si + 0x4f) & dl;
    dx = dx + 1;
    asm("hlt");
    ax = ax & 59392;
    asm("aaa");
    ax = ax & 0x4854;
    (save)dx;
    bp = bp + 1 + 1;
    asm("daa");
    (save)bx;
    *(bp + 0x4f) = *(bp + 0x4f) & cl;
    (save)sp;
    ax = ax - 1;
    cx = cx - 1;
    si = si - 1;
    di = di + 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bp + si + 0x45) = *(bp + si + 0x45) & dl;
    cx = cx + 1;
    sp = sp - 1;
    sp = sp - 1;
    (restore)cx;
    *(bx + 0x52) = *(bx + 0x52) & al;
    cx = cx + 1;
    *(bx + si + 0x45) = *(bx + si + 0x45) & cl;
    (save)dx + 1;
    bp = bp + 1;
    asm("%c hlt");
    asm("adc al,[bx+si]");
    asm("adc bh,[bx+si]");
    ax = ax & 0x4854;
    bp = bp + 1;
    *(di + 0x49) = *(di + 0x49) & cl;
    si = si - 1;
    (save)sp;
    *(bx + di + 0x53) = *(bx + di + 0x53) & cl;
    *(di + 0x4d) = *(di + 0x4d) & al;
    (save)ax;
    cx = sp;
    *(bx + si) = *(bx + si) - bh;
    (save)bp;
    *(bp + 0x49) = *(bp + 0x49) & (al | *(bx + si)) & 0x4f59;
    si = si - 1;
    sp = sp + 1;
    *L00003600 = *L00003600 & cl;
    *(bx + si) :: ah;
    dx = dx + 1;
    cx = cx + 1;
    di = di + 1;
    (save)bx;
    *(bx + 0x46) = *(bx + 0x46) & cl;
    *(bx + 0x4f) = *(bx + 0x4f) & al;
    sp = sp - 1;
    sp = sp + 1;
    *bx = *bx & dx;
    *(bx + si + 0x38) = *(bx + si + 0x38) + cl;
    ax = ax & 0x4e25;
    di = di - 1;
    *(bp + 0x4f) = *(bp + 0x4f) & cl;
    (save)sp;
    cx = cx - 1;
    bx = bx + 1;
    bp = bp + 1;
    cx = cx + 1;
    dx = dx + 1;
    sp = sp - 1;
    bp = bp + 1;
    *(di + 0x46) = *(di + 0x46) & al;
    si = si + 1;
    bp = bp + 1;
    bx = bx + 1;
    (save)sp;
    asm("%c hlt");
    asm("adc ax,[bx+si]");
    *%fs:bx+di+0x20] :: ah;
    asm("a32 push dword 0x206d6c69");
    if(!( *(bx + si) = *(bx + si) & ah)) {
        >= ? L0000a3d6 : ;
        != ? 0xa3d8 : ;
        > ? L0000a3da : ;
        *si = *si + bl;
        *(si + 0x38) = *(si + 0x38) + bh;
        ax = ax + 1 & 0x2525;
        (save)di;
        bp = bp + 1;
        *(bp + si + 0x45) = *(bp + si + 0x45) & dl;
        bp = bp - 1 + 1 - 1;
        dx = dx + 1;
        bp = bp + 1;
        (save)dx;
        *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
        (save)bp;
        *di = *di & ch;
        *(bp + di + 0x4c) = *(bp + di + 0x4c) & dl;
        cx = cx - 1;
        bp = bp - 1 + 1;
        *di = *di & ax;
        *(si + 0x3338) = *(si + 0x3338) + bl;
        al = al ^ 0x38;
        if(*(bp + di) <= di) {
            *(bp + 0x4038) = *(bp + 0x4038) + ah;
            (save)sp;
            ax = (ax & 0x2525) - 1;
            (save)bx;
            *(bx + di + 0x53) = *(bx + di + 0x53) & cl;
            *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
            (save)bp;
            (save)dx;
            *(bp + 0x52) = *(bp + 0x52) & al;
            cx = cx - 1 - 1;
            bp = bp + 1;
            si = si - 1;
            sp = sp + 1;
            sp = sp - 1;
            (restore)cx;
            *(si + 0x45) = *(si + 0x45) & cl;
            si = si - 1;
            sp = sp + 1;
        }
        bp = bp + 1;
        (save)dx;
        asm("%c hlt");
        asm("adc al,[bx+si]");
        asm("int3");
        *(bx + di + 0x4f) :: bl;
        (save)bp;
        *(bx + 0x57) = *(bx + 0x57) & cl;
        bp = bp + 1;
        *(di + 0x45) = *(di + 0x45) & cl;
        *(di + 0x4f) = *(di + 0x4f) & cl;
        si = si - 1;
        bp = bp + 1;
        (restore)cx;
        *di = *di & sp;
        asm("loop 0xa45d");
        (save)sp;
    }
    di = di - 1;
    (save)di;
    goto L00005342;
    (save)si;
    asm("repne cmp [0x7362],ch");
    if(!(si = si - 1)) {
        dl = dl + bh;
        *(si + 0x43) :: dl;
        cx = cx + 1;
        (save)bx;
        di = di - 1;
        dx = dx + 1 - 1;
        asm("%c inc dx");
    }
    (save)bx;
    (save)si;
    asm("hlt");
    ax = ax | *(bx + si);
    if(!(bh = bh | *(bx + di))) {
        asm("popa");
        >= ? L0000a4c1 : ;
        asm("bound bp,[bp+si+0x2e]");
        asm("bound si,[bp+di+0x76]");
        asm("hlt");
        *(bx + si) = *(bx + si) + ax;
        asm("sbb bh,[bx+di]");
        ax = ax + 1;
        asm("hlt");
        al = al | *(bx + si);
        if(*(bx + di) = *(bx + di) & bh) {
            goto L0000a4dc;
        }
        asm("outsb");
        asm("insw");
        >= ? L0000a4d0 : ;
        asm("%c jz 0xa4e4");
        == ? L0000a46f : ;
        *L00002A39 = *L00002A39 + ch;
        *di = *di + dl;
        *si = *si + dh;
        *(bx + si + 0x25) :: ax;
        ax = ax & 0x4f43;
        si = si - 1;
        di = di + 1;
        (save)dx;
        cx = cx + 1;
        (save)sp;
        (save)bp;
        sp = sp - 1;
        (save)sp;
        cx = cx + 1 - 1;
        di = di - 1;
        (save)bx;
        *(bx + di) = *(bx + di) & sp;
        sp = sp & si - 1;
        asm("adc ax,[bx+si]");
        *(si - 1 + 0x41) :: dx;
        bx = bx - 1;
        *(si + 0x48) = *(si + 0x48) & dl;
        *(bp + 1 + 1 + di + 0x4f) = *(bp + 1 + 1 + di + 0x4f) & al;
        (save)ax;
        bp = bp - 1 + 1;
        si = si - 1;
        sp = sp + 1;
        cx = cx - 1;
        (save)bp;
        bp = bp - 1;
        asm("hlt");
        (save)cs;
        *(bp + 0x39) = *(bp + 0x39) + ah;
        (save)sp;
        di = di - 1;
        *(si + 0x48) = *(si + 0x48) & dl;
        bp = bp + 1;
        *(di + 0x55) = *(di + 0x55) & cl;
    }
    (save)bx;
    bp = bp + 1;
    (save)bp;
    bp = bp - 1;
    *di = *di & bx;
    *(bx + si + 0x39) = *(bx + si + 0x39) + bh;
    di = di - 1;
    (save)bp;
    (save)dx;
    *(bx + 0x4f) = *(bx + 0x4f) & dl;
    (save)dx;
    sp = sp - 1;
    sp = sp + 1;
    *(bx + di + 0x53) = *(bx + di + 0x53) & cl;
    *(bp + di + 0x41) = *(bp + di + 0x41) & dl;
    si = si + 1;
    bp = bp + 1;
    *(bx + 0x4e) = *(bx + 0x4e) & cl;
    bx = bx + 1;
    bp = bp + 1;
    *(bx + di + 0x47) = *(bx + di + 0x47) & al;
    cx = cx + 1 - 1;
    si = si - 1;
    sp = sp & si;
    *(bx + si) = *(bx + si) & ax;
    ax = L00005725();
L0000a4dc:
    bp = bp + 1;
L0000a4e1:
    sp = sp - 1;
    bx = bx + 1;
    di = di - 1;
    bp = bp - 1 + 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bx + 0x55) = *(bx + 0x55) & cl;
    (save)dx;
    *(bp + di + 0x45) = *(bp + di + 0x45) & dl;
    bx = bx + 1;
    (save)dx;
L0000a4f2:
    bp = bp + 1;
    (save)sp;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & dl;
    bx = bx + 1;
    cx = cx - 1;
    bp = bp + 1;
    cx = sp;
    *(bx + di) = *(bx + di) & sp;
    asm("hlt");
    *(bx + di) = *(bx + di) >> 0x25;
    (save)sp;
    ax = (al & *(bx + si)) - 1;
    bp = bp + 1;
    *bx = *bx & ah;
    di = di + 1;
    (save)bp;
    cx = cx + 1;
    (save)dx;
    sp = sp + 1;
    cx = cx - 1 + 1;
    si = si - 1;
    (save)bx;
    *(bx + 0x46) = *(bx + 0x46) & cl;
    *(si + 0x48) = *(si + 0x48) & dl;
    bp = bp + 1;
    *(bp + di + 0x43) = *(bp + di + 0x43) & dl;
    (save)dx;
    di = di - 1;
    sp = sp - 1;
    sp = sp - 1;
    asm("daa");
    *(bx + di + 0x52) = *(bx + di + 0x52) & al;
    bp = bp + 1;
    *(bx + si) = *(bx + si) & ax;
    asm("out 0x39,al");
    sp = sp + 1;
    bp = bp + 1;
    (save)si;
    di = di - 1;
    (save)sp;
    bp = bp + 1;
    sp = sp + 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bp + di + 0x45) = *(bp + di + 0x45) & cl;
    bp = bp + 1;
    (save)ax;
    cx = cx - 1;
    si = si - 1;
    di = di + 1;
    *(si + 0x48) = *(si + 0x48) & dl;
    bp = bp + 1;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & al;
    (save)ax;
    bp = bp - 1 + 1;
    si = si - 1;
    sp = sp + 1;
    cx = cx - 1;
    (save)bp;
    bp = bp - 1;
    asm("hlt");
    asm("adc al,[bx+si]");
    al = al | 0x3a;
    di = di - 1;
    (save)bp;
    (save)sp;
    *(bx + 0x46) = *(bx + 0x46) & cl;
    *(di + 0x56) = *(di + 0x56) & al;
    cx = cx - 1;
    sp = sp - 1;
    *(bx + si + 0x41) = *(bx + si + 0x41) & cl;
    si = si - 1;
    sp = sp + 1;
    (save)bx;
    asm("adc [%cs:bx+si],ax");
    bh = bh & *(bp + si);
    *(bx + si) = *(bx + si) & ah;
    (save)ax;
    sp = sp - 1;
    bp = bp + 1;
    cx = cx + 1;
    (save)bx;
    bp = bp + 1;
    *(bx + si + 0x45) = *(bx + si + 0x45) & cl;
    sp = sp - 1;
    (save)ax;
    *(di + 0x53) = *(di + 0x53) & dl;
    sp = sp & si;
    *(bp + si) :: bh;
    eax = 0 & 65535;
    (save)dx;
    *(bx + di + 0x52) = *(bx + di + 0x52) & al;
    bp = bp + 1 + 1 + 1;
    *si = *si & dh;
    *(bp + si + 0x45) = *(bp + si + 0x45) & cl;
    (save)di;
    bp = bp + 1;
    sp = sp - 1;
    (save)bx;
    *(bx + di + 0x54) = *(bx + di + 0x54) & al;
    *(si + 0x48) = *(si + 0x48) & dl;
    bp = bp + 1;
    *(bp + si + 0x4f) = *(bp + si + 0x4f) & al;
    (save)sp;
    (save)sp;
    di = di - 1;
    bp = bp - 1;
    *(bx + 0x46) = *(bx + 0x46) & cl;
    asm("adc ax,0x6000");
    al :: *(bx + di + 0x20);
    (save)sp;
    bp = bp + 1;
    (save)dx;
    (save)dx;
    cx = cx - 1;
    dx = dx + 1;
    sp = sp - 1;
    bp = bp + 1;
    *(si + 0x55) = *(si + 0x55) & al;
    si = si - 1;
    di = di + 1;
    bp = bp + 1;
    di = di - 1;
    si = si - 1;
    *%cs:bx+si] = *%cs:bx+si] & ah;
    asm("hlt");
    asm("Unknown opcode 0x0f");
    *(bp + si + 0x3a) = *(bp + si + 0x3a) + bh;
    di = di - 1;
    si = si - 1;
    sp = sp - 1;
    (restore)cx;
    *(bx + 0x49) = *(bx + 0x49) & dl;
    (save)sp;
    ax = ax - 1;
    *(si + 0x48) = *(si + 0x48) & dl;
    (save)bx;
    bp = bp + 1 + 1;
    asm("hlt");
    ax = ax & 0x8e00;
    cl :: *(bp + si + 0x45);
    (save)di;
    bp = bp + 1;
    sp = sp - 1;
    (save)bx;
    *(bp + di + 0x41) = *(bp + di + 0x41) & al;
    si = si - 1;
    *(si + 0x48) = *(si + 0x48) & dl;
    bp = bp + 1;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & al;
    (save)ax;
    bp = bp - 1 + 1;
    si = si - 1;
    sp = sp + 1;
    cx = cx - 1;
    (save)bp;
    bp = bp - 1;
    *(bp + si + 0x45) = *(bp + si + 0x45) & al;
    *(bp + di + 0x54) = *(bp + di + 0x54) & dl;
    di = di - 1;
    (save)ax;
    (save)ax;
    bp = bp + 1;
    sp = sp + 1;
    sp = sp & si;
    al = al & *(bx + si);
    (save)sp;
    cx = cx - 1;
    (save)bx;
    *(bp + si + 0x55) = *(bp + si + 0x55) & dl;
    dx = dx + 1;
    (restore)cx;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & 0x2539;
    cx = cx - 1;
    si = si - 1;
    *(di + 0x41) = *(di + 0x41) & cl;
    (restore)cx;
    *(si + 0x45) = *(si + 0x45) & cl;
    (save)sp;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    *(bx + di + 0x4e) = *(bx + di + 0x4e) & cl;
    *(si + 0x48) = *(si + 0x48) & dl;
    bp = bp + 1;
    0x400 :: *(si + 0x55);
    si = si - 1;
    di = di + 1;
    bp = bp + 1;
    di = di - 1;
    si = si - 1;
    *(si + 0x4f) = *(si + 0x4f) & dl;
    *(bx + 0x45) = *(bx + 0x45) & 0x400;
    (save)sp;
    *(si + 0x48) = *(si + 0x48) & dl;
    bp = bp + 1;
    *(bp + si + 0x45) = *(bp + si + 0x45) & cl;
    (save)di;
    bp = bp + 1;
    sp = sp - 1;
    (save)bx;
    *%cs:bx+0x4f] = *%cs:bx+0x4f] & 0x400;
    di = di - 1;
    sp = sp + 1;
    *(si + 0x55) = *(si + 0x55) & cl;
    bx = bx + 1 - 1;
    sp = sp & si;
    *(bx + si) = *(bx + si) & 0x400;
    *(bp + di) = *(bp + di) | bh;
    *(bx + si + 0x41) = *(bx + si + 0x41) & cl;
    (save)si;
    bp = bp + 1;
    *(si + 0x4f) = *(si + 0x4f) & cl;
    bx = bx + 1;
    cx = cx + 1;
    (save)sp;
    bp = bp + 1;
    sp = sp + 1;
    *(si + 0x48) = *(si + 0x48) & dl;
    bp = bp + 1;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & 0x401;
    (save)0x401;
    bp = bp - 1 + 1;
    si = si - 1;
    sp = sp + 1;
    cx = cx - 1;
    (save)bp;
    bp = bp - 1;
    sp = sp & si;
    sp :: *%cs:bx+si];
    *(bx + di + 0x54) = *(bx + di + 0x54) & cl;
    al = 0;
    cx :: *%ss:bx+di+0x53];
    *(bx + di + 0x4e) = *(bx + di + 0x4e) & cl;
    *(bx + di + 0x20) = 0;
    si = si + 1;
    di = di - 1;
    (save)dx;
    (save)sp;
    (save)dx;
    bp = bp + 1;
    (save)bx;
    (save)bx;
    *(bp + 0x41) = 0;
    (save)dx;
    *(bx + di + 0x43) = 0;
    (save)dx;
    di = di - 1;
    (save)bx;
    (save)bx;
    *(si + 0x48) = *(si + 0x48) & dl;
    bp = bp + 1;
    *(bp + di + 0x45) = *(bp + di + 0x45) & dl;
    cx = cx + 1;
    asm("sbb [%cs:bx+si],al");
    (restore)si;
    sp :: *di;
    (restore)cx;
    di = di - 1;
    (save)bp;
    *(di + 0x55) = *(di + 0x55) & cl;
    (save)bx;
    (save)sp;
    *(bp + si + 0x45) = *(bp + si + 0x45) & al;
    *(bp + di + 0x41) = *(bp + di + 0x41) & al;
    (save)dx;
    bp = bp + 1;
    si = si + 1;
    (save)bp;
    sp = sp - 1;
    *(bx + di) = *(bx + di) & sp;
    *(bx + si) = *(bx + si) & ah;
    *(bx + si) = *(bx + si) | al;
    asm("jpe 0xa6f8");
    (save)sp;
    ax = ax - 1;
    bp = bp + 1;
    *(di + 0x56) = *(di + 0x56) & al;
    cx = cx - 1;
    sp = sp - 1;
    (save)ds;
    *(bp + 0x573b) = *(bp + 0x573b) + al;
    cx = cx + 1;
    (save)dx;
    sp = sp - 1;
    di = di - 1;
    (save)dx;
    sp = sp + 1;
    *(bx + 0x48) = *(bx + 0x48) & dl;
    di = di - 1;
    *(bx + si + 0x41) = *(bx + si + 0x41) & cl;
    (save)bx;
    *(si + 0x48) = *(si + 0x48) & dl;
    bp = bp + 1;
    *(bp + di + 0x43) = *(bp + di + 0x43) & dl;
    (save)dx;
    di = di - 1;
    sp = sp - 1;
    sp = sp - 1;
    *(bx + si + 0x41) = *(bx + si + 0x41) & cl;
    (save)bx;
    ax = ax & *(bx + si);
    al & 0x3b;
    di = di + 1;
    cx = cx + 1 - 1;
    si = si - 1;
    bp = bp + 1;
    sp = sp + 1;
    *(bp + di + 0x4f) = *(bp + di + 0x4f) & al;
    si = si - 1;
    (save)sp;
    (save)dx;
    di = di - 1;
    sp = sp - 1;
    *(bx + 0x56) = *(bx + 0x56) & cl;
    bp = bp + 1;
    (save)dx;
    *(bx + di + 0x54) = *(bx + di + 0x54) & cl;
    al = al - 0x20;
    cx = cx + 1;
    si = si - 1;
    sp = sp + 1;
    *(di + 0x41) = *(di + 0x41) & cl;
    (restore)cx;
    *(di + 0x53) = *(di + 0x53) & dl;
    bp = bp + 1;
    asm("hlt");
    asm("adc [bx+si],al");
    *(bp + di) = *(bp + di) >> 1;
    (save)sp;
    *(bx + di + 0x47) = *(bx + di + 0x47) & al;
    cx = cx - 1 + 1 - 1;
    si = si - 1;
    (save)bx;
    (save)sp;
    *(bx + di + 0x4f) = *(bx + di + 0x4f) & bl;
    (save)bp;
    *(bx + di) = *(bx + di) & sp;
    asm("Unknown opcode 0xff");
    *(bx + di) = *(bx + di) + 1;
    al = al - 7;
    dl = 0;
    ax = ax | 0xb000;
    asm("Unknown opcode 0xff");
    *(bx + di) = *(bx + di) + 1;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *di = *di + dl;
    (restore)es;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    (save)bx;
    *(di + 8) = *(di + 8) + dl;
    asm("adc al,0x0");
    dl = 0;
    asm("sbb al,0x0");
    al = 0xff;
    asm("Unknown opcode 0xff");
    asm("Unknown opcode 0xff");
    asm("Unknown opcode 0xff");
    asm("Unknown opcode 0xff");
    asm("Unknown opcode 0xff");
    asm("Unknown opcode 0xff");
    asm("Unknown opcode 0xff");
    (fsave) *(bx + si);
    *(bp + di + 0xf) = *(bp + di + 0xf) + 8;
    dh = dh | bl;
    al = 0xde;
    dx = dx + 1;
    ax = es + 0x10;
    ds = cs;
    *L00000004 = ax;
    ax = *L00000004 + *L0000000C;
    es = ax;
    si = *L00000006 - 1;
    asm("std");
    asm("rep movsb");
    (save)ax;
    (save)0x32;
    asm("retf");
    bx = es;
    ax = ds - 1;
    ds = ax;
    es = ax;
    di = 0xf;
    cx = 0x10;
    al = 0xff;
    asm("repe scasb");
    si = di + 1;
    di = 0xf;
L0000a7a0:
    cl = 4;
    ax = !si >> 4;
    if(!(es = bx - 1)) {
        ds = ds - ax;
    }
    ax = !di >> cl;
    if(!(si = si | -16)) {
        es = es - ax;
        di = di | -16;
    }
    al = *esi;
    esi = esi + 1;
    dl = al;
    si = si - 1;
    eax = *esi;
    esi = esi + 4;
    cx = ax;
    si = si + 1;
    al = dl & 0xfe;
    if(al == 0xb0) {
        al = *esi;
        esi = esi + 1;
        asm("rep stosb");
        goto L0000a7e0;
    }
    if(al == 0xb2) {
        asm("rep movsb");
L0000a7e0:
        al = dl;
        if(al & 1) {
            goto L0000a7a0;
        }
        si = 0x125;
        ds = cs;
        bx = *L00000004;
        asm("cld");
        dx = 0;
L0000a7f2:
        eax = *esi;
        cx = ax;
        if(!(esi = esi + 4)) {
            ax = dx + bx;
            es = ax;
            eax = *esi;
            esi = esi + 4;
            di = ax;
            if(di == -1) {
                goto L0000a816;
            }
            *%es:di] = *%es:di] + bx;
L0000a808:
            asm("loop 0xa7fd");
        }
        if(dx != 61440) {
            dx = dx + 0x1000;
            goto L0000a7f2;
L0000a816:
            ax = es + 1;
            es = ax;
            di = di - 0x10;
            *%es:di] = *%es:di] + bx;
            ax = ax - 1;
            es = ax;
            goto L0000a808;
        }
        ax = bx;
        di = *L00000008;
        si = *L0000000A + ax;
        *L00000002 = *L00000002 + ax;
        ax = ax - 0x10;
        ds = ax;
        es = ax;
        bx = 0;
        asm("cli");
        ss = si;
        sp = di;
        asm("sti");
        goto ( *bx);
    }
    ah = 0x40;
    bx = 2;
    cx = 0x16;
    ds = cs;
    dx = 0x10f;
    asm("int 0x21");
    ax = 0x4cff;
    asm("int 0x21");
    (save)ax;
    asm("popa");
    asm("arpl [bp+di+0x65],bp");
    *%fs:bp+0x69] = *%fs:bp+0x69] & ah;
    asm("insb");
    *%gs:bx+di+0x73] = *%gs:bx+di+0x73] & ch;
    if(!( *(bp + di + 0x6f) = *(bp + di + 0x6f) & ah)) {
        != ? 0xa8e4 : ;
        == ? L0000a895 : ;
        (restore)es;
        dh = 0xcd;
        ax :: 0x4f00;
        *(bx + di) = *(bx + di) + ah;
        asm("o32 add [bp+0x0],bh");
        asm("xchg ax,si");
        *(bp + 50688) = *(bp + 50688) + ch;
        dh = dh + bl + dh + bl;
        *L00001601 = *L00001601 + cl;
        *L00006201 = *L00006201 + bp;
        *(bp + 1) = *(bp + 1) + si;
        *(bx + di) = *(bx + di) + 0x9d;
        *(di + 49409) = *(di + 49409) + sp;
        si = si + ax;
        *(bx + si) = *(bx + si) + ax + bp;
        cl = cl + *(bx + si);
        dl = dl + *(bx + si);
        ch = ch + *si;
        dh = dh + *L00003F02;
        if(!(cl = cl + *(bx + si + 2))) {
            <= ? L0000a8b7 : ;
        }
        *(bp + si) = *(bp + si) + 0x8a;
        dl = dl + *(bp + di + 0x9c02) + *(bx + 48130) + bh + *di;
        di = di + *bx;
        sp = sp + *(bx + 3);
        *(bp + di) = *(bp + di) + -86;
        cx = cx + bx;
        bp = bp + sp;
        al = ax + *(bp + di + cx + si) + 0x2a + 0x44 + 0x49 + 0x4e + 0x67 + 0x7d + 0xc1;
    }
    ax = al + 0xd3 + 0x1d + 0x56e + 0x5be;
    goto L0000a8f6;
    asm("lock add ax,0x61d");
L0000a8f6:
    al = al ^ 6;
    (save)6;
    if(!(al = al - 6)) {
        asm("xchg al,[0x68b]");
        (save)es;
    }
    asm("popf");
    (save)es;
    asm("cmpsb");
    (save)es;
    asm("scasw");
    (save)es;
    ax = 51974;
    (save)es;
    asm("aam 0x6");
    (fsave)-1.38767e+193;
    goto L00000907;
    (restore)es;
    asm("adc al,[bx]");
    (restore)ds;
    (restore)es;
    *bx = *bx ^ ax;
    asm("%s pop es");
    asm("%f pop es");
    if(!( *bx = *bx - al)) {
        >= ? L0000a930 : ;
        asm("xchg ax,[bx]");
        (restore)es;
        asm("cwd");
    }
    (restore)es;
    di = 51207;
    (restore)es;
    (fsave) *bx;
    L0000cb3f();
    *(bp + di) = *(bp + di) | ch;
    *si = *si | dh;
    *(bp + 8) = *(bp + 8) | cl;
    (save)di;
    *(bx + si + 8) = *(bx + si + 8) | ah;
    asm("outsw");
    *(bp + si + 0x9f08) = *(bp + si + 0x9f08) | bl;
    *(bx + 49416) = *(bx + 49416) | dh;
    bl = bl | dl | cl;
    al = al | ah;
    cl = cl | ch;
    bh :: 0;
    *(bx + si) = *(bx + si) | cl;
    *(bx + di) = *(bx + di) | dl | dh;
    *bx = *bx | bp;
    *(bx + di) = *(bx + di) | di;
    *(bp + si + 9) = *(bp + si + 9) | ax;
    *(bx - 1 + si + 9) = *(bx - 1 + si + 9) | bx - 1;
    asm("popa");
    if(!( *(bp + si + 9) = *(bp + si + 9) | bp)) {
        *(bp + di) = *(bp + di) | ax;
        al = L0000b609() | *(bp + 0xa);
    }
    di = di - 1;
    bl = bl | *(bx + si + 0xa);
    al = al | *(esi + -1677028598) | *(di + 0xad0a) | *L0000120B;
    bp = bp | *((bx | *bx) + di);
    si = si | *(bx + di) | *L00003B0B;
    ax = ax | *(di + 0xb);
    dx = dx - 1 | *(bx + si + 0xb);
    (restore)dx;
    sp = sp | *(bp + di + 0xb);
    asm("insb");
    bx = bx | *(bp + di + 0xa80b);
    si = si | *(bp + si + 47627);
    di = di | *(bx + 56587);
    sp = sp | bp;
    bp = bp | dx;
    si = si | dx;
    di :: 0;
    cx = cx | *(bx + di);
    (save)cs;
    ax = al | 0xe | 0x3a | 0x52 | 0x5c | 0x65 | 0x6e | 0x7e | 0x87 | 0x90 | 0x9f | 0xdf | 0xec | 0xf6 | 4 | 0xd09 | 0xd5a;
    asm("pusha");
    if(!(ax = ax | 0xd6a)) {
        >= ? L0000a9ee : ;
        asm("xchg cl,[di]");
        asm("Unknown opcode 0x8f");
        ax = ax | 0xdb6;
        di = 51213;
        ax = ax | 0xdd5;
    }
    asm("Unknown opcode 0xf6");
    ax = ax | 0xe05;
    asm("adc al,0xe");
    al = al & 0xe;
    sp = sp + 1;
    (save)cs;
    (save)cs;
    (save)si;
    bx = cs;
    (save)cs;
    asm("Unknown opcode 0x82");
    (save)cs;
    return;
    (save)cs;
    asm("int 0xe");
    asm("xlatb");
    (save)cs;
    asm("loopne 0xaa15");
    goto L0000df18;
    asm("Unknown opcode 0x0f");
    asm("aas");
    asm("cmovs cx,[bx]");
    (save)cx;
    asm("pmulhrw mm1,[bx]");
    asm("popa");
    asm("movd mm1,[bx]");
    if(!(bp = bp - 1)) {
        if(*bx = *bx | 0x88) {
            goto L00003c2f;
        }
        asm("Unknown opcode 0x0f");
        asm("xchg ax,di");
        asm("pmullw mm1,[bx]");
        (fsave)((frestore)) * *bx;
        asm("out 0xf,ax");
    }
    asm("out dx,ax");
    asm("paddb mm1,[bx]");
    (save)es;
    asm("adc [0x1310],cl");
    asm("adc [di],ah");
    asm("adc [0x3710],ch");
    asm("adc [bp+0x10],al");
    (save)cx;
    asm("adc [bp+0x10],bl");
    (save)0x7010;
    asm("adc [bx+si+0x10],bh");
    >= ? L0000aa57 : ;
    asm("Unknown opcode 0x82");
    asm("adc [di+0x9510],cl");
    asm("adc [bp+si+0x9f10],bl");
    asm("adc [bx+di+0xce10],ch");
    asm("adc bl,dl");
    asm("adc al,bl");
    asm("adc ch,ah");
    asm("adc ah,ch");
    asm("adc [bx+di],cl");
    asm("adc [bx],cx");
    asm("adc [bx+di],bx");
    asm("adc [bp+di],sp");
    asm("adc [si],bp");
    asm("adc [di],si");
    asm("adc [si+0x11],ax");
    asm("adc [%fs:di+0x11],bp");
    <= ? L0000aa82 : ;
    *(bx + di) & dx;
    asm("adc [bp+di+0xc811],di");
    asm("adc [di],cx");
    asm("adc dl,[0x1f12]");
    asm("adc cl,cl");
    asm("adc dl,dh");
    asm("adc dh,dh");
    asm("adc cl,[bx]");
    asm("adc bx,[si]");
    asm("adc sp,[di]");
    asm("adc bp,[0x3e13]");
    asm("adc ax,[bx+0x13]");
    (save)ax;
    asm("adc sp,[bx+0x13]");
    if(!(ax & 0xb211)) {
        >= ? 0xaaae : ;
        *(bp + di) = dx;
        asm("xchg ax,dx");
        asm("adc bx,[bp+di+0xab13]");
        asm("adc si,[si+0xbd13]");
        asm("adc bx,ax");
        asm("adc dx,[bx]");
        asm("adc al,0x24");
    }
    asm("adc al,0x2d");
    asm("adc al,0x36");
    asm("adc al,0x43");
    asm("adc al,0x4d");
    asm("adc al,0x55");
    asm("adc al,0x5a");
    asm("adc al,0x62");
    asm("adc al,0x6a");
    asm("adc al,0x6f");
    asm("adc al,0xb1");
    asm("adc al,0xb7");
    asm("adc al,0xc1");
    asm("adc al,0xcb");
    asm("adc al,0xd4");
    asm("adc al,0xdd");
    asm("adc al,0xe8");
    asm("adc al,0xfb");
    asm("adc al,0x1");
    asm("adc ax,0x150b");
    asm("adc ax,0x1e15");
    asm("adc ax,0x1527");
    al = al ^ 0x15;
    asm("adc ax,0x1553");
    (restore)sp;
    asm("adc ax,0x1565");
    if(ax >= 0x4615) {
        asm("jpo 0xaafe");
        *di & dl;
        asm("xchg ax,cx");
        asm("adc ax,0x159a");
        *L0000AB15 = ax;
        asm("adc ax,0x15b3");
        bx = 49173;
        asm("adc ax,0x15c5");
        asm("int 0x15");
    }
    asm("aad 0x15");
    asm("out 0x15,al");
    asm("in al,dx");
    asm("adc ax,0x15f6");
    *L00001609 = *L00001609 + dl;
    asm("adc dl,[0x161e]");
    asm("%e push ss");
    (save)ss;
    if(!(dx = dx - *L00001630 - 1)) {
        asm("jpo 0xab2f");
        *L0000168F & dx;
        asm("cbw");
        (save)ss;
        ax = *L0000B016;
        (save)ss;
        asm("aad 0x16");
        asm("fist word [0x16e7]");
        asm("in al,dx");
        (save)ss;
        asm("hlt");
        (save)ss;
    }
    asm("stc");
    (save)ss;
    *bx = *bx | dx;
    asm("adc [bx],dx");
    ss = ds;
    *bx = *bx - dl;
    ax = ax - 0x3b17;
    (restore)ss;
    (restore)ss;
    (restore)sp;
    (restore)ss;
    if(!(bx = bx + 1)) {
        asm("jpe 0xab5a");
        dx = 49687;
        (restore)ss;
        asm("retf 0xcf17");
        (restore)ss;
        asm("aam 0x17");
        < ? L0000ab66 : ;
        goto L0000ab68;
        asm("rep pop ss");
        (save)es;
        asm("sbb [bx+si],dl");
    }
    asm("sbb [bp+si],bl");
    asm("sbb [si],ah");
    asm("sbb [di],ch");
    asm("sbb [0x5518],dh");
    asm("sbb [di+0xbe18],dh");
    asm("sbb bh,al");
L0000ab68:
    asm("sbb ah,cl");
    asm("sbb cl,bh");
    asm("sbb [si],cl");
    asm("sbb [bx+di],bx");
    asm("sbb [bp+di],sp");
    asm("sbb [bp+di],bp");
    asm("sbb [bx+si],si");
    asm("sbb [di],si");
    asm("sbb [bp+si],di");
    asm("sbb [di+0x19],bp");
    if(!( *(bx + si) = *(bx + si) + bl)) {
        > ? L0000ab9a : ;
        asm("xchg ax,di");
        asm("sbb [bx+di+0xab19],sp");
        asm("sbb [si+0xbd19],si");
        asm("sbb bp,sp");
        asm("sbb [di],ax");
        asm("sbb dl,[di]");
        asm("sbb ah,[0x3e1a]");
        asm("sbb cl,[bx+si+0x1a]");
        (restore)ax;
    }
    asm("sbb bl,[di+0x1a]");
    >= ? 0xabb7 : ;
    *(bp + si) = bx;
    asm("Unknown opcode 0x8f");
    asm("sbb bl,[bx+di+0xa31a]");
    asm("sbb ch,[si+0xb51a]");
    asm("sbb ah,bl");
    asm("sbb ch,al");
    asm("sbb cl,[si]");
    asm("sbb dx,[di]");
    asm("sbb bx,[0x2f1b]");
    asm("sbb si,[si]");
    asm("sbb di,[bp+di]");
    asm("sbb dx,[bx+0xa71b]");
    asm("sbb bp,[di+0xb71b]");
    asm("sbb ax,cx");
    asm("sbb cx,dx");
    asm("sbb dx,bx");
    asm("sbb ax,[bx+di]");
    asm("sbb al,0x6");
    asm("sbb al,0x2a");
    asm("sbb al,0x33");
    asm("sbb al,0x3c");
    asm("sbb al,0x47");
    asm("sbb al,0x4f");
    asm("sbb al,0x57");
    asm("sbb al,0x5c");
    asm("sbb al,0xaa");
    asm("sbb al,0xb5");
    asm("sbb al,0x35");
    asm("sbb ax,0x1d5f");
    0x1d92 = *di * bx;
    asm("pushf");
    asm("sbb ax,0x1da5");
    asm("scasb");
    asm("sbb ax,0x1dbd");
    asm("out dx,al");
    asm("sbb ax,0x1df7");
    asm("sbb al,0x1e");
    bx = bx - *L00001E46;
    (save)ax;
    cx = ds;
    (save)ds;
    asm("bound bx,[0x1e94]");
    ax = *L0000AA1E;
    (save)ds;
    bl = 0x1e;
    asm("cld");
    (save)ds;
    (restore)ds;
    ds = di;
    (restore)di;
    (restore)ds;
    asm("a32 pop ds");
    asm("insb");
    (restore)ds;
    if(!(sp = sp - 1)) {
        < ? L0000ac34 : ;
        asm("sbb word [bx],0x1f89");
        ds = *bx;
        asm("xchg ax,si");
        (restore)ds;
        asm("sahf");
        (restore)ds;
        *L0000B81F = ax;
        (restore)ds;
        asm("rcr byte [bx],0xc8");
        (restore)ds;
        asm("int 0x1f");
        asm("aad 0x1f");
        *bx = ((frestore));
        asm("in ax,0x1f");
        goto L0000f41f;
    }
    (restore)ds;
    asm("adc [bx+si],sp");
    asm("sbb [bx+si],sp");
    *(bx + si) = *(bx + si) & sp;
    *%es:bp+di] = *%es:bp+di] & ch;
    *(bp + di) = *(bp + di) & dh;
    *(bx + si) = *(bx + si) & bh;
    *di = *di & bh;
    *(bx + 0x20) = *(bx + 0x20) & dl;
    (restore)di;
    *(si + 0x20) = *(si + 0x20) & ah;
    0x2084 = *(bx + si) * sp;
    asm("cwd");
    *(bp + di + 0x4120) = *(bp + di + 0x4120) & ah;
    *(bp + 0x21) = *(bp + 0x21) & dx;
    asm("pusha");
    *(bp + 0x21) = *(bp + 0x21) & si;
    *(bx + di) = *(bx + di) & -115;
    *(bp + si + 47649) = *(bp + si + 47649) & dx;
    sp = sp & ax;
    si = si & cx;
    di = di & dx;
    ax = ax & sp;
    cx = cx & di;
    *(di + 0x22) = *(di + 0x22) & ax;
    asm("popa");
    dh = dh & *(bx + di + 0x22);
    asm("jpe 0xac97");
    *(bp + si) = *(bp + si) & 5;
    cx = cx & *di;
    dx = dx & *(bp + si);
    di = di & *(bx + di);
    ax = ax & *(bp + 0x23);
    sp = sp - 1;
    dx = dx & *(bp + 0x23);
    0x75 = *(bp + di) * sp;
    di = di & *(bp + 0x23);
    asm("xchg sp,[bp+di]");
    asm("xchg ax,si");
    si = si & *(bx + di + 47907);
    ax = ax & sp;
    cx = cx & bp;
    sp :: 0;
    bp :: 0;
    si :: 0;
    dx = dx & *(bx + si);
    ax = al & 0x19 & 0x22 & 0x64 & 0x97 & 0xbb & 0xc5 & 0xd8 & 0xdd & 0xe5 & 0xed & 0xf5 & 0xfa & 7 & 0x250c;
    fs = *di;
    asm("xchg ax,di");
    ax = 4;
    if(!(ax = ax & 0x25ae)) {
        asm("in ax,dx");
        ax = ax & 0x267e;
        asm("xchg sp,[0x2690]");
        al = *esi;
        esi = esi + 1;
        asm("%e mov ch,0x26");
        si = 52774;
        asm("in ax,0x26");
        asm("in ax,dx");
        asm("%e cmc");
        asm("%e cli");
        asm("sbb ah,[%es:bx]");
        *bx = *bx & ah;
        al = ah - *bx ^ 0x27;
        ax :: 0x4627;
    }
    asm("daa");
    asm("insw");
    asm("daa");
    *bx & sp;
    sp = bx;
    *di = *si;
    di = di + 1;
    si = si + 1;
    asm("daa");
    ax & 0xae27;
    asm("daa");
    dh = 0x27;
    bx = 49191;
    asm("daa");
    (fsave)((frestore)) - *%es:0x26e0] - *bx;
    asm("cli");
    asm("daa");
    goto ( *bx);
    al = al + 0x28;
    (save)ds;
    *L00003428 = *L00003428 - ch;
    *L00004828 = *L00004828 - bh;
    *(bx + di + 0x28) = *(bx + di + 0x28) - dl;
    (restore)dx;
    *(bp + di + 0x28) = *(bp + di + 0x28) - ah;
    asm("insw");
    *(bx + 0x28) = *(bx + 0x28) - dh;
    *(bx + si) = *(bx + si) - 0x89;
    *(bp + 0x9c28) = *(bp + 0x9c28) - dl;
    *(bp + 0xb028) = *(bp + 0xb028) - ah;
    *(bx + di + 49704) = *(bx + di + 49704) - bh;
    bh = bh - cl;
    ch = ch - dl;
    bh = bh - bl;
    cl = cl - ch;
    dl = dl - dh;
    *(bl - bh + si) = *(bl - bh + si) - cl;
    *L00001829 = *L00001829 - cx;
    *(bp + si) = *(bp + si) - sp;
    *(bp + di) = *(bp + di) - bp;
    *si = *si - si;
    if(!( *(bx + 0x29) = *(bx + 0x29) - sp)) {
        asm("xchg bp,[bx+di]");
        *(bp + si + 49193) = *(bp + si + 49193) - sp;
        ax = ax - cx;
        bp = bp - cx;
        bx = bx - si;
        ebp = 0 - di & 65535;
        *bx = *bx - ax;
        dl = dl - *(bx + si);
        bl = bl - *(bx + di);
        dh = dh - *(bp + si);
        al = al - *(si + 0x2a);
        bp = bp - 1;
        dl = dl - *(bp + 0x2a);
        asm("popa");
        if(ah = ah - *(bp + 0x2a)) {
            goto L0000ad9b;
        }
        asm("Unknown opcode 0x82");
        cl = cl - *(bp + di + 0x942a);
    }
    ah = ah - *(bx + 50218);
    bl = bl - ch;
    ch = ch - *si;
    di = di - *L0000472B;
L0000ad7f:
    dx = dx - *(bx + si + 0x2b);
    (restore)bx;
    sp = sp - *(bx + si + 0x2b);
    asm("outsw");
    ax = ax - *(bx + si + 0x862b);
    dx = dx - *(bx + si + 0x9a2b);
    sp = sp - *(bp + di + 0xac2b);
    di = di - *(bx + 56363) - ax;
L0000ad9b:
    si = si - *bx;
    ax = al - 0x3d - 0x47 - 0x51 - 0x5a - 0x63 - 0x6b - 0xbe - 0xc6 - 0xce - 0xd3 - 0xd8 - 0xe0 - 0xe5 - 0xea - 0x2d0a;
    asm("adc al,0x2d");
    asm("sbb ax,0x262d");
    ax = ax - 0x2d33;
    *di :: bp;
    bx = bx + 1;
    (save)si;
    ax = ax - 0x2d4d - 0x2d5f;
    *di = gs;
    asm("xchg ax,cx");
    ax = ax - 0x2d96;
    asm("sti");
    ax = ax - 0x2e82;
    asm("Unknown opcode 0x8f");
    asm("Unknown opcode 0x2e");
    asm("Unknown opcode 0xc7");
    *%cs:0x2ed9] = *%cs:0x2ed9] >> 1;
    asm("loop 0xae13");
    goto L0000f42e;
    ch = ch | *%cs:bx];
    asm("adc al,0x2f");
    asm("sbb ax,0x262f");
    asm("das");
    *bx :: (bp ^ *bx);
    bx = bx + 1;
    asm("das");
    bp = bp - 1;
    asm("das");
    (save)si;
    asm("das");
    (restore)di;
    asm("das");
    *bx = gs;
    ax & 63279;
    asm("das");
    asm("adc si,[bx+si]");
    ax = al - 0x30 ^ 0x3e30;
    *(bx + si + 0x30) = *(bx + si + 0x30) ^ cl;
    (save)dx;
    *(bp + di + 0x30) = *(bp + di + 0x30) ^ bl;
    *%fs:si+0x30] = *%fs:si+0x30] ^ ch;
    if(!(si = si & *(bx + si))) {
        >= ? 0xae4d : ;
        asm("xchg ax,si");
        *(bp + di + 0xa330) = *(bp + di + 0xa330) ^ bl;
        *(bx + si + 0xad30) = *(bx + si + 0xad30) ^ ch;
        ah = ah ^ al ^ cl ^ dl;
        cl = cl ^ bl ^ ah;
        dh = dh ^ ah;
        dh = 0;
        *L00001031 = *L00001031 ^ ah ^ bh;
        *(bx + di) = *(bx + di) ^ bx;
        *(bp + si) = *(bp + si) ^ sp;
        *(bx + di + 0x31) = *(bx + di + 0x31) ^ cx;
        (save)si;
        *(bx + 0x31) = *(bx + 0x31) ^ bx;
        (save)0x7531;
        *(bp + di + 0x31) = *(bp + di + 0x31) ^ di;
    }
    *(bx + di) & si;
    asm("Unknown opcode 0x8f");
    *(bx + si + 0xa131) = *(bx + si + 0xa131) ^ bx;
    *(bp + si) = *(bp + si) ^ si;
    cl = cl ^ *(bp + di + 0x32);
    (restore)ax;
    ah = ah ^ *(bx + di + 0x32);
    dl = dh ^ al ^ *si;
    bx = bx ^ *L00002733;
    si = si ^ *(bx + si);
    ax = L0000cf32(0x32) ^ *(bp + 0x33);
    bx = bx - 1;
    dx = dx ^ *(bp + di + 0x33);
    (restore)bx;
    sp = sp ^ *(bp + di + 0x33);
    (save)0x7533;
    di = di ^ *(bp + si + 0x33);
    asm("xchg ax,bx");
    di = di ^ *L00004734;
    ax = al ^ 0x50 ^ 0x5f ^ 0x6e ^ 0xdc ^ 0xe5 ^ 0xee ^ 0x37 ^ 0x3540;
    ax = ax ^ 0x3570;
    if(!(cx = cx - 1)) {
        asm("Unknown opcode 0x82");
        ax = ax ^ 0x358a;
        asm("cbw");
        return(ax ^ 0x35b0);
        ax = ax ^ 0x35cd;
        asm("xlatb");
        ax = ax ^ 0x35e0;
        goto L0000a4e1;
        ax = ax ^ 0x3600;
        dh = dh | *L00003613;
        asm("sbb al,0x36");
        asm("das");
        asm("%s xor al,0x36");
        (save)bp;
        asm("%s pop bx");
        asm("%s outsw");
        asm("%s js 0xaef9");
        *L00003694 = *L00003694 ^ 0x36c0;
        asm("fnstenv [0x36e3]");
        asm("in ax,dx");
    }
    *%ss:0x36ff] = *%ss:0x36ff] / *%ss:0x36ff];
    edx = *%ss:0x36ff] % *%ss:0x36ff];
    al = al | 0x37;
    (save)ss;
    asm("aaa");
    (restore)ds;
    asm("aaa");
    *bx = *bx - dh;
    ax = ax ^ 0x3e37;
    asm("aaa");
    di = di + 1;
    asm("aaa");
    asm("aaa");
    if(!(sp = sp - 1)) {
        >= ? L0000af1e : ;
        asm("Unknown opcode 0x82");
        asm("aaa");
        asm("xchg ax,bp");
        asm("aaa");
        asm("sahf");
        asm("aaa");
        asm("cmpsw");
        asm("aaa");
        ah = 0x37;
        bp = 50743;
        asm("aaa");
        asm("in ax,dx");
        asm("aaa");
        asm("cli");
        asm("aaa");
        al = al + 0x38;
        asm("adc [bx+si],bh");
        *(bx + si) = *(bx + si) ^ bh;
        ax :: 0x4738;
        *(bx + di + 0x38) :: dl;
        (restore)dx;
        if(*(bp + di + 0x38) >= ah) {
            goto L0000af43;
        }
        asm("Unknown opcode 0x82");
        *(bp + di + 0x9438) :: cl;
        *(bx + si + 0xb638) :: ah;
        bl :: al;
        ch :: cl;
        bh :: dl;
        al :: ah;
    }
    cl :: ch;
    bh :: dh;
    ch :: bh;
    *bx :: al;
    *(bx + di) :: dx;
    *(bp + si) :: bx;
    *(bp + di) :: sp;
    *(bx + di) :: si;
    *(bp + si) :: di;
    *(bp + di + 0x39) :: ax;
    (save)di;
    if(*(bx + si + 0x39) < si) {
        asm("Unknown opcode 0x82");
        *(bx + di + 0xae39) :: dx;
        *(bx + si + 49721) :: di;
        bx :: cx;
        sp :: dx;
L0000af43:
        cx :: sp;
        dx :: bp;
        bx :: si;
        *(bx + si) :: ax;
        cl :: *(bx + di);
        dl :: *(bp + si);
        ah :: *(bp + di);
        if(cl < *(di + 0x3a)) {
            goto L0000af91;
        }
        asm("cbw");
        ah :: *(bx + si + 0xb13a);
        bh :: *(bp + di + 50490);
        cl :: dh;
        dl :: bh;
        dh :: al;
        dh :: ch;
        cl :: *(bx + di);
        dx :: *(bp + si);
        bx :: *(bp + di);
        si :: *(bp + si);
    }
    di :: *(bp + di);
    ax :: *(si + 0x3b);
    (save)sp;
    bx :: *(di + 0x3b);
    esi :: *(di + 0x3b);
    asm("wait");
    sp :: *(si + 0xad3b);
    di :: *(bp + si + 49979);
    cx :: sp;
    bx :: bp;
    sp :: dx;
    bp :: bx;
    ax :: *(bp + si);
    al :: 0xb;
L0000af91:
    al :: 0x14;
    al :: 0x23;
    al :: 0x3a;
    al :: 0x43;
    al :: 0x4c;
    al :: 0x54;
    al :: 0x83;
    al :: 0xb0;
    al :: 0xb6;
    al :: 0xc3;
    al :: 0xc9;
    al :: 0xd3;
    al :: 0xdd;
    al :: 0xe6;
    al :: 0xef;
    al :: 0xfc;
    al :: 6;
    ax :: 0x3d10;
    asm("sbb [di],di");
    bh = bh & *di;
    asm("daa");
    ax :: 0x3d54;
    *di = bh;
    asm("xchg ax,cx");
    ax :: 0x3d9a;
    ax & 51261;
    ax :: 0x3dcd;
    asm("aad 0x3d");
    asm("fidivr dword [di]");
    asm("in al,dx");
    ax :: 0x3dfb;
    asm("%d dec bx");
    asm("%d push sp");
    asm("%d jo 0xb019");
    if(!(dx = dx + 1)) {
        asm("Unknown opcode 0x82");
        asm("%d mov al,0x3e");
        dh = 0x3e;
        asm("iret");
        asm("fnstcw [%ds:0x3eee]");
        asm("clc");
        bh = bh + *%ds:bx];
        di = di | *bx;
        asm("adc al,0x3f");
        asm("sbb ax,0x273f");
        asm("aas");
        *bx = *bx ^ di;
        bh :: *bx;
        bx = bx + 1;
        asm("aas");
        (save)ax;
        asm("aas");
        (restore)cx;
        asm("aas");
        asm("bound di,[bx]");
        asm("Unknown opcode 0x8f");
        asm("aas");
        asm("Unknown opcode 0xc6");
        asm("aas");
        *bx = ((frestore));
        asm("in al,dx");
        asm("aas");
        ax = ax + *(bx + si + 0x3e) + 1;
        bx = bx + 1;
        ax = ax + 1;
        (restore)sp;
        ax = ax + 1;
        asm("popa");
        if(ax = ax + 1) {
            goto L0000b055;
        }
        *(bx + si - 0x5f) = es;
        ax = ax + 1;
        *di = eax;
        di = di + 4;
        ax = ax + 1;
    }
    dh = 0x40;
    si = 50752;
    ax = ax + 1;
    asm("retf");
    ax = ax + 1;
    asm("rol byte [bx+si-0x28],1");
    (fsave) *(bx + si - 0x1e);
    ax = ax + 1 + 1;
    (restore)es;
    cx = cx + 1;
    asm("adc [bx+di+0x19],ax");
    *(bx + di + 0x29) = *(bx + di + 0x29) & ax;
    cx = cx + 1 + 1;
    asm("%c inc cx");
    ax = ax ^ *(bx + di + 0x3a);
    cx = cx + 1;
    asm("aas");
    cx = cx + 1;
    sp = sp + 1;
    cx = cx + 1 - 1 + 1;
    asm("pusha");
    (save)0x6d41;
    cx = cx + 1 + 1;
    asm("xchg ax,si");
    cx = cx + 1;
    asm("sahf");
    *L0000AE41 = ax;
    cx = cx + 1 + 1;
    dh = 0x41;
    si = 49985;
    cx = cx + 1;
L0000b055:
    asm("cmovc bx,[si]");
    dx = dx + 1;
    asm("%e inc dx");
    asm("%c inc dx");
    asm("%s inc dx");
    asm("%d inc dx");
    bx = bx + 1;
    dx = dx + 1;
    ax = ax - 1;
    dx = dx + 1;
    bp = bp - 1;
    dx = dx + 1;
    (save)dx;
    dx = dx + 1;
    al & 0x42;
    ch = 0x42;
    di = 50242;
    dx = dx + 1;
    asm("clc");
    dx = dx + 1;
    al = al + *(bp + di + 0xa);
    bx = bx + 1;
    asm("cmovnc bp,[bp+si]");
    bx = bx + 1;
    asm("aaa");
    bx = bx + 1;
    cx = cx + 1;
    bx = bx + 1;
    si = si + 1;
    bx = bx + 1;
    (restore)si;
    ebx = bx + 1 + 1;
    asm("outsb");
    if(!(bx = bx + 1)) {
        *(bp + di - 0x78) = *(bp + di - 0x78) + 0x43;
        ax = bp + di - 0x62;
        bx = bx + 1;
        asm("cmpsb");
        bx = bx + 1;
        asm("scasb");
        bx = bx + 1;
        bl = 0x43;
        asm("rol byte [bp+di-0x36],0x43");
        asm("rol byte [bp+di-0x29],cl");
        (fsave) *(bp + di - 0x1c);
        bx = bx + 1 + 1;
        goto L00009ee9;
        bx = bx + 1;
        ax = ax | *(si + 0x18);
        sp = sp + 1;
        al = al & *(si + 0x27);
        if(sp = sp + 1) {
            goto L0000b0f5;
        }
        dh = 0x44;
        sp = bp;
        (restore)bp;
        sp = sp + 1;
        asm("rol word [si-0x23],cl");
        sp = sp + 1;
        asm("out 0x44,ax");
        asm("int1");
        sp = sp + 1;
        asm("cli");
        sp = sp + 1;
        ax = ax + *(di + 0x10);
        (save)ss;
        *(di + 0x2a) = *(di + 0x2a) & al;
        bp = bp + 1 + 1 + 1;
        ax = ax ^ *(di + 0x3c);
    }
    bp = bp + 1;
    cx = cx - 1;
    (save)bx;
    bp = bp + 1 + 1;
    (restore)sp;
    asm("%g inc bp");
    if(!(bp = bp + 1)) {
        *(di - 0x72) & ax;
        bp = bp + 1;
        asm("xchg ax,bx");
        bp = bp + 1;
        asm("cbw");
        bp = bp + 1;
        cl = 0x45;
        (fsave)((frestore)) + *(di + 0xb);
        si = si + 1;
        asm("adc [bp+0x1b],ax");
        si = si + 1;
        ax = (al & 0x46) - 0x4446;
        si = si + 1;
        dx = dx - 1;
        (save)sp;
        si = si + 1 + 1;
        (restore)bp;
        si = si + 1;
L0000b0f5:
        if(esi = esi + 1) {
            goto L0000b13f;
        }
        *(bp - 0x6b) = es;
        si = si + 1;
        asm("sahf");
        si = si + 1;
        eax = *esi;
        si = esi + 4 + 1;
        asm("int 0x46");
        asm("salc");
        si = si + 1;
        (fsave) *(bp + 0xe);
        di = di + 1;
        asm("sbb ax,[bx+0x25]");
        di = di + 1;
        al = al - *(bx + 0x50);
        di = di + 1;
        (restore)bp;
        edi = di + 1 + 1;
        asm("outsw");
        di = di + 1;
        asm("xchg ax,[bx-0x6f]");
        di = di + 1;
        asm("xchg ax,di");
    }
    di = di + 1;
    ax = *L0000AB47;
    di = di + 1;
    bp = 0x1c47;
    cx = cx - *(bx + si + 0x30);
    (save)0x1c47;
    (restore)si;
    ax = 0x4c0a;
    asm("outsb");
    if(!(ax = ax - 1)) {
        *(bx + si - 0x4e) = *(bx + si - 0x4e) | 0x48;
        bh = 0x48;
        asm("in al,0x48");
L0000b13f:
        asm("int1");
        ax = ax - 1;
        cx = (cx | *(bx + di + 0x14)) - 1;
        asm("sbb ax,0x2649");
        *(bx + di + 0x3a) = *(bx + di + 0x3a) ^ cx - 1;
        cx = cx - 1 - 1;
        bx = bx + 1;
        cx = cx - 1;
        sp = sp - 1;
        cx = cx - 1;
        (restore)cx;
        cx = cx - 1;
        asm("bound cx,[bx+di+0x6b]");
        cx = cx - 1;
        asm("Unknown opcode 0x82");
        cx = cx - 1;
        cx = *(bx + di - 0x6c) - 1;
        al & 0x49;
        dl = 0x49;
        sp = 50505;
        cx = cx - 1;
        asm("into");
        cx = cx - 1;
        asm("stc");
        cx = cx - 1;
        al :: 0x4a;
        asm("Unknown opcode 0x8f");
        dx = dx - 1;
        asm("sahf");
        dx = dx - 1;
        *di = eax;
        di = di + 4;
        dx = dx - 1;
        cl = 0x4a;
        bx = 50506;
        dx = dx - 1;
        asm("into");
        dx = dx - 1;
        asm("xlatb");
        dx = dx - 1;
        asm("int1");
        dx = dx - 1;
        *(bp + di + 7) = *(bp + di + 7) + cx;
    }
    bx = bx - 1;
    asm("adc [bp+di+0x1b],cx");
    bx = bx - 1;
    ax = (al & 0x4b) - 0x764b;
    if(!(bx = bx - 1)) {
        asm("xchg cl,[bp+di-0x65]");
        bx = bx - 1;
        ax = *L0000AB4B;
        bx = bx - 1;
        ch = 0x4b;
        si = 51019;
        bx = bx - 1;
        asm("iret");
        bx = bx - 1;
        asm("aam 0x4b");
        (fsave)((frestore)) * *(bp + di - 0x17);
        bx = bx - 1;
        asm("out dx,ax");
        bx = bx - 1;
        asm("stc");
        bx = bx - 1;
        cx = cx + *(si + 0xc);
        sp = sp - 1;
        asm("adc ax,0x1d4c");
        sp = sp - 1;
        al = al ^ 0x4c;
        *(si + 0x4b) :: cx;
        sp = sp - 1;
        (save)sp;
        sp = sp - 1;
        (restore)bp;
        asm("%g dec sp");
        if(sp = sp - 1) {
            goto L0000b209;
        }
        *(si - 0x66) = *(si - 0x66) | 0xa24c;
        sp = sp - 1;
        asm("cmpsw");
        sp = sp - 1;
        cl = 0x4c;
        dh = 0x4c;
        asm("ror byte [si-0x36],0x4c");
        asm("ror word [si-0x24],cl");
        sp = sp - 1;
        asm("clc");
        sp = sp - 1;
        cl = cl + *(di + 0xa);
        bp = bp - 1;
        asm("daa");
    }
    bp = bp - 1;
    asm("das");
    bp = bp - 1;
    al = al ^ 0x4d;
    al :: 0x4d;
    cx = cx + 1;
    (save)sp;
    if(!(bp = bp - 1 - 1)) {
        asm("xchg ax,sp");
        bp = bp - 1;
        asm("popf");
        bp = bp - 1;
        asm("cmpsb");
        bp = bp - 1;
        asm("scasb");
        bp = bp - 1;
        asm("lds cx,[di-0x36]");
        bp = bp - 1 - 1;
        asm("in al,dx");
        bp = bp - 1;
        asm("Unknown opcode 0xf6");
        bp = bp - 1;
        *(di + 8) = *(di + 8) - 1;
        si = si - 1;
        cx = cx & *(bp + 0x4e);
        (fsave)((frestore)) * *(di - 0x1e) * *(bp - 0x17);
        si = si - 1 - 1;
        asm("repne dec si");
        asm("sti");
        si = si - 1;
L0000b209:
        (save)ds;
        di = di - 1;
        asm("%e dec di");
        asm("%c dec di");
        cx = cx ^ *(bx + 0x38);
        di = di - 1;
        sp = sp - 1;
        di = di - 1;
        asm("pusha");
        asm("%g dec di");
        if(di = di - 1) {
            goto L0000b26a;
        }
        asm("xchg ax,cx");
        di = di - 1;
        asm("xchg ax,di");
        di = di - 1;
        ax = *L0000AB4F;
        di = di - 1;
        ah = 0x4f;
        bp = 50511;
        (fsave)((frestore)) * *(bx - 0x1c);
        di = di - 1 - 1;
        goto L0000ad7f;
        di = di - 1;
        al = al + 0x50;
    }
    (save)ax | 0x2e50;
    cx = cx + 1;
    (save)ax;
    dx = dx - 1;
    (save)ax;
    (save)bx;
    (save)ax;
    asm("bound dx,[bx+si+0x78]");
    (save)ax;
    asm("adc word [bx+si-0x76],0x9250");
    L0000c250(ax);
    (save)ax;
    asm("retf");
    (save)ax;
    asm("aam 0x50");
    asm("loope 0xb2a3");
    goto L00000a50;
    (save)cx;
    asm("adc [bx+di+0x1a],dl");
    (save)cx;
    ax = (al & 0x51) - 0x3651;
    (save)cx;
    bx = bx + 1;
    (save)cx;
    sp = sp - 1;
    (save)cx;
    (save)bp;
    (save)cx;
    asm("Unknown opcode 0x82");
L0000b26a:
    (save)cx;
    dx = *(bx + di - 0x56);
    (save)cx;
    bl = 0x51;
    sp = 54353;
    (save)cx;
    asm("fcom qword [bx+di-0x1f]");
    (save)cx;
    asm("clc");
    (save)cx;
    *(bp + si + 5) = *(bp + si + 5) + dl;
    (save)dx;
    *(bp + si + 0x37) = *(bp + si + 0x37) ^ dx;
    (save)dx;
    cx = cx + 1;
    (save)dx;
    (save)dx;
    (save)sp;
    bp = dx;
    (save)dx;
    if(!(bx = bx - 1)) {
        asm("xchg ax,cx");
        (save)dx;
        asm("xchg ax,di");
        (save)dx;
        ax = *L0000AB52;
        (save)dx;
        ah = 0x52;
        bp = 54866;
        (save)dx;
        asm("loopne 0xb2ef");
        goto L0000a4f2;
        (save)dx;
        *(bp + di + 0xc) = *(bp + di + 0xc) + dl;
        (save)bx;
        asm("adc [bp+di+0x16],dx");
        (save)bx;
        asm("sbb ax,0x2253");
        (save)bx;
        asm("daa");
        (save)bx;
        asm("das");
        (save)bx;
        al = al ^ 0x53;
        (save)bx;
        (save)di;
        (save)bx;
        asm("pusha");
        (save)bx;
        if(si = si - 1) {
            goto L0000b310;
        }
        <= ? L0000b310 : ;
        asm("adc byte [bp+di-0x76],0x53");
        asm("xchg ax,bx");
        (save)bx;
        asm("pushf");
        (save)bx;
        ax = *L0000CE53;
        (save)bx;
        asm("lock push bx");
        asm("cli");
        (save)bx;
        asm("sbb al,0x54");
        asm("aaa");
        (save)sp;
        si = si - 1;
        (save)sp;
        (save)bx;
        (save)sp;
        eax = *esi;
        esi = esi + 4;
        (save)sp;
        return;
        (save)sp;
        asm("rcl byte [si-0x15],cl");
        (save)sp;
        asm("hlt");
        (save)sp;
    }
    asm("std");
    (save)sp;
    dx = dx | *(di + 0x34);
    (save)bp;
    (save)bp;
    (save)bp;
    asm("xchg ax,bx");
    (save)bp;
    asm("retf");
    (save)bp;
    asm("aam 0x55");
    asm("fst qword [di-0xc]");
    (save)bp;
    (save)es;
    (save)si;
    (save)si;
    dl = dl ^ *(bp + 0x5f);
    (save)si;
    asm("outsw");
    (save)si;
    if(!( *(bp + 0x29) = *(bp + 0x29) & dl)) {
        >= ? 0xb357 : ;
        *(bp - 0x5c) = ss;
        (save)si;
        sp = 49750;
        (save)si;
        asm("int3");
        (save)si;
        asm("salc");
        (save)si;
        asm("fist word [bp-0x18]");
L0000b310:
        (save)si;
        dx = dx | *(bx + 0x1d);
        (save)di;
        asm("%e push di");
        asm("das");
        (save)di;
        bx = bx + 1;
        (save)di;
        asm("jpe 0xb374");
        asm("adc word [bx-0x74],+0x57");
        asm("cwd");
        (save)di;
        *L0000AB57 = al;
        (save)di;
        asm("rcl word [bx-0x27],1");
        (save)di;
        asm("ficom word [bx+0x15]");
        (restore)ax;
        (restore)ds;
        (restore)ax;
        *(bx + si + 0x32) = *(bx + si + 0x32) - bx;
        (restore)ax;
        bx :: *(bx + si + 0x6c);
        (restore)ax;
        di = 60760;
        (restore)ax;
        *(bx + si - 1) = ~( *(bx + si - 1));
        (restore)ax;
        al = al + 0x59;
        *(bx + 60806) = *(bx + 60806) & bx;
        (restore)cx;
        (restore)cx;
        if(*(bx + 60821) < bl) {
            goto L0000b3a6;
        }
        < ? L0000b3a8 : ;
        *(bx + 60641) & bl;
        (restore)cx;
        asm("xchg ax,cx");
        (restore)cx;
    }
    asm("cwd");
    (restore)cx;
    asm("sahf");
    (restore)cx;
    cl = 0x59;
    asm("fcomp dword [bx+di-0x10]");
    (restore)cx;
    *(bx + di) = ~( *(bx + di));
    (restore)dx;
    bl = bl | *(bp + si + 0x13);
    (restore)dx;
    asm("sbb al,0x5a");
    (restore)dx;
    if(!(bx = bx - *(bp + si + 0x58))) {
        (restore)dx;
        asm("lahf");
        (restore)dx;
        dh = 0x5a;
        di = 51290;
        (restore)dx;
        asm("loopne 0xb3d7");
        goto L0000fd5a;
        (restore)dx;
        bx = es;
        ax = ax ^ 0x5e5b;
        (restore)bx;
        if(bx = bp + si - 0x6a) {
            goto L0000b3e6;
        }
        asm("Unknown opcode 0x82");
        (restore)bx;
        bx = *(bp + di - 0x6c);
        (restore)bx;
        ax = *L0000BB5B;
        (restore)bx;
        asm("enter 0xd15b,0x5b");
        asm("ficomp dword [bp+di-0x2]");
        (restore)bx;
        (restore)si;
        (restore)sp;
        asm("a32 pop sp");
        >= ? 0xb3ff : ;
        dx = 50012;
L0000b3a6:
        (restore)sp;
        asm("int3");
        (restore)sp;
        asm("out dx,al");
        (restore)sp;
        asm("hlt");
        (restore)sp;
        asm("Unknown opcode 0xfe");
        (restore)sp;
        (restore)bp;
        asm("sbb bl,[di+0x29]");
        (restore)bp;
        bp = si;
        asm("insb");
        (restore)bp;
        if(*(di + 0x11) = *(di + 0x11) | bl) {
            goto L0000b41a;
        }
        >= ? 0xb41c : ;
        bl = 0x5d;
        return;
        (restore)bp;
        asm("int 0x5d");
        asm("xlatb");
        (restore)bp;
        asm("loopne 0xb426");
    }
    goto L0000c529;
    (restore)si;
    si = ss;
    asm("sbb bx,[bp+0x4f]");
    (restore)si;
    (restore)si;
    (restore)si;
    (restore)si;
    dh = 0x5e;
    di = 61790;
    (restore)si;
    di = ss;
    ax = *L0000AD5E - 0x845f;
    (restore)di;
    asm("scasw");
L0000b3e6:
    (restore)di;
    ch = 0x5f;
    di = 59487;
    (restore)di;
    al = al + 0x60;
    dx = dx + 1;
    asm("pusha");
    asm("Unknown opcode 0x82");
    asm("pusha");
    dx = 55904;
    asm("pusha");
    asm("loop 0xb459");
    asm("out 0x60,ax");
    asm("in al,dx");
    asm("pusha");
    (save)es;
    asm("popa");
    ah = ah - *(bx + di + 0x58);
    asm("popa");
    asm("popa");
    asm("popa");
    (save)0x61;
    *(bx + di - 0x71) = sp;
    asm("popa");
    *di = *si;
    di = di + 4;
    si = si + 4;
L0000b40c:
    asm("popa");
    sp = 49505;
    asm("popa");
    asm("cld");
    asm("popa");
    ax = ax + 0xe62;
    asm("bound bx,[di]");
    asm("bound bp,[bp+si]");
L0000b41a:
    asm("bound si,[bp+di]");
    asm("bound di,[si]");
    asm("bound cx,[bp+di+0x62]");
    (restore)di;
    asm("bound si,[si+0x62]");
    asm("jpe 0xb489");
    *(bp + si - 0x72) & ah;
    asm("bound dx,[bx+0xb462]");
    asm("Unknown opcode 0x62");
    asm("enter 0xd262,0x62");
    asm("xlatb");
    asm("Unknown opcode 0x62");
    asm("Unknown opcode 0x62");
    asm("Unknown opcode 0xf3");
    asm("Unknown opcode 0x62");
    asm("cld");
    asm("bound ax,[di]");
    asm("arpl [bp+si],dx");
    asm("arpl [si],bx");
    asm("arpl [bp+si],di");
    asm("arpl [bp+di+0x63],ax");
    (save)si;
    asm("arpl [bp+di+0x63],sp");
    asm("insb");
    asm("arpl [di+0x63],si");
    asm("Unknown opcode 0x82");
    asm("arpl [bx+0xa863],bx");
    asm("arpl sp,bp");
    asm("arpl sp,si");
    asm("arpl sp,di");
    asm("arpl [bp+di+0x64],sp");
    asm("outsw");
    asm("%f movsb");
    asm("%f mov dl,0x64");
    asm("lds sp,[si+0x68]");
    asm("%g jna 0xb4ce");
    ax = 50789;
    (fsave)((frestore)) - *(bp + si - 0x17) - *%gs:di+0x5e];
    asm("o32 jns 0xb4d9");
    *(bp - 0x3a) = *(bp - 0x3a) << 0x66;
    asm("retf");
    asm("o32 fldenv [bp-0x1a]");
    asm("out dx,eax");
    asm("o32 clc");
    asm("o32 std");
    sp = (esp | *(bx + 0x26)) ^ *%cs:edi+0x38];
    asm("a32 inc ax");
    asm("a32 dec si");
    asm("a32 popa");
    asm("a32 jz 0xb4fc");
    asm("Unknown opcode 0x82");
    asm("Unknown opcode 0x67");
    asm("Unknown opcode 0xfe");
    bp = bp ^ *(eax + 0x41);
    (save)0x68d3;
    asm("loope 0xb509");
    goto L0000b40c;
    (save)0x6909;
    asm("adc ch,[bx+di+0x1b]");
    0x3a69 = *(bx + di) * bp;
    0x69d8 = *(bx + si + 0x69) * cx;
    asm("out 0x69,al");
    asm("lock imul di,bp,0x669");
    (save)0xf;
    (save)0x24;
    (save)0x3a;
    (save)0x4e;
    (save)0x5d;
    (save)0x62;
    (save)0x70;
    (save)0x7d;
    (save)-112;
    (save)-99;
    (save)-89;
    (save)-78;
    (save)-68;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
    *(bx + si) = *(bx + si) + al;
}

/* address  size  */
#if 0 /* auxiliary information */
# Current option values:
option: +asmflush
option: -compactcalls
option: +compactexprs
option: +compactifs
option: +compset
option: -dfoproc
option: -disasmonly
option: -displaylabels
option: +doblocks
option: +docase
option: +dofor
option: +doifs
option: +dointrinsics
option: +doloops
option: +donullgotos
option: +dopackloops
option: +dopackstmt
option: +doremlabs
option: +dosimplify
option: -dosort
option: +dostmts
option: +doswitch
option: +dowhile
option: -dumpaddrs
option: -dumpcall
option: -dumpcomments
option: -dumpdfo
option: +dumpdoms
option: -dumpsblocks
option: -dumpsets
option: -dumpsizes
option: -dumpstmtid
option: +fatcase
option: +flag16
option: +fullscreen
option: -genpattern
option: -help
option: -hexconst
option: +insertlabels
option: -int16
option: +int32
option: -interactive
option: -isvb5
option: +locals
option: -nostackoffs
option: -objdump
option: -okclone
option: -outprocs
option: -outrefs
option: -overrule
option: +rdonly
option: -showblocks
option: -showjump
option: -showlabel
option: -showprotosym
option: -showreg
option: -showstring
option: -silent
option: +simplifyexprs
option: -stackalign16
option: -stackalign4
option: -stackalign8
option: -strallregions
option: -traceall
option: -tracesets
option: +types
option: +usesymtab
option: -validatebr
option: -validatereg
option: +validatestr
#endif
